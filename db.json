{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-keep/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/avatar.svg","path":"images/avatar.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/bg.svg","path":"images/bg.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/bg2.svg","path":"images/bg2.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/back2top.js","path":"js/back2top.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/code-block.js","path":"js/code-block.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/toggle-theme.js","path":"js/toggle-theme.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/css-variables.styl","path":"css/common/css-variables.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/keep-style.styl","path":"css/common/keep-style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/stylus-variables.styl","path":"css/common/stylus-variables.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/404.styl","path":"css/layout/404.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page-template.styl","path":"css/layout/page-template.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/post-content.styl","path":"css/layout/post-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/brands.min.css","path":"font/css/brands.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/fontawesome.min.css","path":"font/css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/regular.min.css","path":"font/css/regular.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/solid.min.css","path":"font/css/solid.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.ttf","path":"font/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.woff2","path":"font/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.ttf","path":"font/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.woff2","path":"font/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.ttf","path":"font/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.woff2","path":"font/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.ttf","path":"font/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.woff2","path":"font/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/aliyun.png","path":"images/deploy-provider/aliyun.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/gitee.png","path":"images/deploy-provider/gitee.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/github.png","path":"images/deploy-provider/github.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/netlify.png","path":"images/deploy-provider/netlify.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/tencent_cloud.png","path":"images/deploy-provider/tencent_cloud.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/upyun.png","path":"images/deploy-provider/upyun.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/vercel.png","path":"images/deploy-provider/vercel.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/page/category-page.js","path":"js/page/category-page.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/page/links-page.js","path":"js/page/links-page.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/page/photos-page.js","path":"js/page/photos-page.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post/copyright-info.js","path":"js/post/copyright-info.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post/post-helper.js","path":"js/post/post-helper.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post/share.js","path":"js/post/share.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post/toc.js","path":"js/post/toc.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-block.styl","path":"css/common/code-block/code-block.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-theme.styl","path":"css/common/code-block/code-theme.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/highlight.styl","path":"css/common/code-block/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-button.styl","path":"css/common/tags/keep-button.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-note.styl","path":"css/common/tags/keep-note.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-tabs.styl","path":"css/common/tags/keep-tabs.styl","modified":1,"renderable":1},{"_id":"source/images/Jimmy.png","path":"images/Jimmy.png","modified":1,"renderable":0},{"_id":"source/images/QJ_Icon.svg","path":"images/QJ_Icon.svg","modified":1,"renderable":0},{"_id":"source/images/QJ_Logo.svg","path":"images/QJ_Logo.svg","modified":1,"renderable":0},{"_id":"source/images/bg.png","path":"images/bg.png","modified":1,"renderable":0},{"_id":"source/images/givemeacoffee.png","path":"images/givemeacoffee.png","modified":1,"renderable":0},{"_id":"source/images/night-bg.png","path":"images/night-bg.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e1a7d96b19a5dfd962aec13e52efdc7ec9578e79","modified":1716562406383},{"_id":"source/_data/.DS_Store","hash":"397a0c9a92247c9cd11d255d2fcc7ba6dfbaf017","modified":1708749394534},{"_id":"source/_posts/arduino-start-up-withMacOS-md.md","hash":"9ce2865034a0a85c14b79f11f4a58a80872a3783","modified":1712419606546},{"_id":"source/_posts/cpp-breifly-talk-obj-base.md","hash":"658755925d41ba0552720b871081d09b460b4ef3","modified":1711295310795},{"_id":"source/_data/keep.yml","hash":"0269585ae86b97db472c10c0898810fdda5f4be4","modified":1710646528919},{"_id":"source/_posts/20240706_Git-update-vs2022.md","hash":"59c8a0409a61cdb14d10e63de84374ae9428d553","modified":1720365008658},{"_id":"source/_posts/.DS_Store","hash":"55b62b6f00c8afb0c21bc7b6c2388f4f57999130","modified":1716562406369},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1707572913304},{"_id":"source/_posts/dlai-chatgpt-api-course-1-md.md","hash":"c1c0858895e5d066a587d7525e49523c7583de23","modified":1713195362794},{"_id":"source/images/.DS_Store","hash":"85c98c17727cddafaf04297a0f9cb710733cf04e","modified":1708826693416},{"_id":"source/about/index.md","hash":"690fe4b64ae1da193d0f22dd372c755ccb88d788","modified":1720264637950},{"_id":"source/_posts/202403-hexo/hexo_build_part3-2.md","hash":"eb0dd51cebfcbd3a5e486b0ee0192f14759a1744","modified":1709998000173},{"_id":"source/tags/index.md","hash":"9f10f8908c9813d182dab7773d785204290b6197","modified":1709731431642},{"_id":"source/_posts/202403-hexo/hexo_build_part3-1.md","hash":"f0ca868708236e48e4d8d0d32d0a9a8e7357746a","modified":1709960924949},{"_id":"source/_posts/202403-hexo/hexo_build_part2.md","hash":"fb75c84a36a8423d1e2bb61e154efb713288120f","modified":1709960617438},{"_id":"source/_posts/202403-hexo/hexo_build_part1.md","hash":"e9f12e3a038a4dc81285900ea82f993badcac647","modified":1710038661054},{"_id":"source/images/givemeacoffee.png","hash":"cf2be439f83b32c0b49f881795418adf651b9e3f","modified":1708850494813},{"_id":"source/images/Jimmy.png","hash":"fbcab86ec9f93b3fd0fc2d48cca99435571f2e0d","modified":1708748925238},{"_id":"source/images/bg.png","hash":"3d4c4b655338c3f7518724a042b1a96369e4df19","modified":1708769730007},{"_id":"node_modules/hexo-theme-keep/.commitlintrc.js","hash":"3925f491e830dcb684933589cec3d4be8db0ff26","modified":1708739824254},{"_id":"node_modules/hexo-theme-keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1708739824166},{"_id":"node_modules/hexo-theme-keep/package.json","hash":"f0ba5d8901a2175f921f38bff2bb74c00f7a7dd0","modified":1708739824313},{"_id":"node_modules/hexo-theme-keep/.prettierrc","hash":"459178a4dff70a0885b6f5a49eb6a6265eea3083","modified":1708739824166},{"_id":"node_modules/hexo-theme-keep/CHANGELOG.md","hash":"4894c32cae544c0d441a4211de45de04f8b34cd8","modified":1708739824317},{"_id":"node_modules/hexo-theme-keep/docs/README_zh-CN.md","hash":"8b9bf2013ced29092362f4b32fa8d2694a0c910f","modified":1708739824318},{"_id":"node_modules/hexo-theme-keep/README.md","hash":"1ee61586bb39b2a14e9461b944a6f9c04f7ec4a2","modified":1708739824318},{"_id":"node_modules/hexo-theme-keep/.stylelintrc.js","hash":"63ce9d43e8675a8cb771332c81c89ba7a60b5516","modified":1708739824254},{"_id":"node_modules/hexo-theme-keep/docs/README_zh-TW.md","hash":"b01ba3e9017b82a1d24f1893a8c34766f37488a0","modified":1708739824318},{"_id":"node_modules/hexo-theme-keep/_config.yml","hash":"a8c359affd4a4e3072351de7b08a7b78c73b6b27","modified":1708739824851},{"_id":"node_modules/hexo-theme-keep/languages/zh-CN.yml","hash":"ca129c59e04d08ac3f102f6cdda7a7ad4eb8d507","modified":1708739824852},{"_id":"node_modules/hexo-theme-keep/languages/en.yml","hash":"95686f5c494ba1ec531d85b866f5a3adc7a1fa04","modified":1708739824851},{"_id":"node_modules/hexo-theme-keep/LICENSE","hash":"a2f9ffbf32eeb6284afa81bc4fb4c27b80d044e9","modified":1708739824208},{"_id":"node_modules/hexo-theme-keep/layout/archive-content.ejs","hash":"e753c99c041f34f27d673e8c8da2f362ebeb2358","modified":1708739824242},{"_id":"node_modules/hexo-theme-keep/layout/category-list.ejs","hash":"31066addd434c7db2f6b5dce45302bb1ae8daa5f","modified":1708739824244},{"_id":"node_modules/hexo-theme-keep/languages/zh-TW.yml","hash":"0d5b195c80e8dbd6411c92a3261c4fde1bb3ca1a","modified":1708739824852},{"_id":"node_modules/hexo-theme-keep/layout/category-content.ejs","hash":"3e5bd0cd6adbfca93c2f08893b1f00c93e819559","modified":1708739824244},{"_id":"node_modules/hexo-theme-keep/layout/home-content.ejs","hash":"eda0f23f72a3ed07e16eb35cab27b168b00d3de9","modified":1708739824248},{"_id":"node_modules/hexo-theme-keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1708739824244},{"_id":"node_modules/hexo-theme-keep/layout/404.ejs","hash":"374939be71b9b29ef4a955e1fdf1d2b70f0b4f0b","modified":1708739824242},{"_id":"node_modules/hexo-theme-keep/layout/layout.ejs","hash":"e03731246bc99439eca82547081539618832a216","modified":1708739824248},{"_id":"node_modules/hexo-theme-keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1708739824248},{"_id":"node_modules/hexo-theme-keep/layout/page-template.ejs","hash":"696f5e09d19fb5625146ea866e458a01b3f61f17","modified":1708739824249},{"_id":"node_modules/hexo-theme-keep/layout/page.ejs","hash":"d818754986a6388707f32cfdab87e926aff41983","modified":1708739824249},{"_id":"node_modules/hexo-theme-keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1708739824252},{"_id":"node_modules/hexo-theme-keep/layout/tag-content.ejs","hash":"433996e7b50262283f6a84d4918814220cd52036","modified":1708739824252},{"_id":"node_modules/hexo-theme-keep/layout/_partial/archive-list.ejs","hash":"18f56857079abc6c381099c02cfe4971cf8d1976","modified":1708739824243},{"_id":"node_modules/hexo-theme-keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1708739824252},{"_id":"node_modules/hexo-theme-keep/layout/post-content.ejs","hash":"3a14d74ebcc51424699dfb5c6ee32267756356be","modified":1708739824251},{"_id":"node_modules/hexo-theme-keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1708739824243},{"_id":"node_modules/hexo-theme-keep/layout/_partial/first-screen.ejs","hash":"417ffa0baef2c6f55c529f90287e69d3cb44b8af","modified":1708739824246},{"_id":"node_modules/hexo-theme-keep/layout/_partial/header.ejs","hash":"00c7cd5413254d60587cb1b646938659c3c282d8","modified":1708739824248},{"_id":"node_modules/hexo-theme-keep/layout/_partial/footer.ejs","hash":"a91692bab3e9862e9b4ccf9d3f8ed43f928c1f38","modified":1708739824246},{"_id":"node_modules/hexo-theme-keep/layout/_partial/local-search.ejs","hash":"18207b298e413fc6b89efc07aa63e8c95a06e56c","modified":1708739824249},{"_id":"node_modules/hexo-theme-keep/layout/_partial/head.ejs","hash":"2c70c748c6bd5d16869c4b70cc0122cb6ee3af78","modified":1708739824248},{"_id":"node_modules/hexo-theme-keep/layout/_partial/paginator.ejs","hash":"c7de89669e7269db469bfd4a56b7c4d8665f56af","modified":1708739824249},{"_id":"node_modules/hexo-theme-keep/layout/_partial/image-mask.ejs","hash":"e785b4ca258ce378354216038ef544ca6ef4af51","modified":1708739824248},{"_id":"node_modules/hexo-theme-keep/scripts/events/404-page.js","hash":"ce2800bf5bb51cb0e1b97a3197bbea22086ce95f","modified":1708739824254},{"_id":"node_modules/hexo-theme-keep/layout/_partial/toc.ejs","hash":"d7a15f2967400afb4447a0c93fea6b8008bfa4f6","modified":1708739824253},{"_id":"node_modules/hexo-theme-keep/layout/_partial/progress-bar.ejs","hash":"0cda69a94f292073d13c36f409680b40527b9db0","modified":1708739824251},{"_id":"node_modules/hexo-theme-keep/scripts/events/config-handle.js","hash":"4680bfc5df3ab5a357e1226907dc271f12cff631","modified":1708739824256},{"_id":"node_modules/hexo-theme-keep/scripts/events/keep-info.js","hash":"3661991ef2e3f94d01eec041d84de615a01c2ede","modified":1708739824259},{"_id":"node_modules/hexo-theme-keep/scripts/filters/image-handle.js","hash":"a701a8c3efde5daea801ff464e86ceda6e2e79bd","modified":1708739824258},{"_id":"node_modules/hexo-theme-keep/scripts/tags/button.js","hash":"469d602b7e6f628f39accdc01995f7d53183c6b2","modified":1708739824255},{"_id":"node_modules/hexo-theme-keep/scripts/helpers/helper.js","hash":"37f00e01e35f3bdedc95b0169d251fbf6f5f1c43","modified":1708739824258},{"_id":"node_modules/hexo-theme-keep/layout/_partial/tagcloud.ejs","hash":"88653147fc2e1a589ad26d71b2a613c21762458a","modified":1708739824252},{"_id":"node_modules/hexo-theme-keep/scripts/helpers/export-config.js","hash":"68aeda9fbd77dfe6ba4844c9a1c14f6ed6179304","modified":1708739824257},{"_id":"node_modules/hexo-theme-keep/scripts/filters/link-handle.js","hash":"e6fa7d7d20876710d7e6f035d5c4cd69e6d55f6f","modified":1708739824259},{"_id":"node_modules/hexo-theme-keep/scripts/tags/index.js","hash":"253cd55481e683bdb8befdfe286cd65fb438d383","modified":1708739824258},{"_id":"node_modules/hexo-theme-keep/scripts/tags/note.js","hash":"8fff007ae56c5e719f984cbaf94eb643caf1c900","modified":1708739824260},{"_id":"node_modules/hexo-theme-keep/scripts/tags/tabs.js","hash":"febba0de7b1ee2ce8d08bcdb591cf1c8f8ee1256","modified":1708739824261},{"_id":"node_modules/hexo-theme-keep/layout/_partial/side-tools.ejs","hash":"651ccbe18ffda177dc8b0185edaf45492de984a3","modified":1708739824252},{"_id":"node_modules/hexo-theme-keep/layout/_partial/scripts.ejs","hash":"5d6e132b9071af902b7d76b889c2e7321fd65acf","modified":1708739824252},{"_id":"node_modules/hexo-theme-keep/source/images/bg.svg","hash":"7dfc551927ce3a789d8f4a62c59d600f2446aed5","modified":1708739824336},{"_id":"node_modules/hexo-theme-keep/source/css/style.styl","hash":"4d0932539e9d12a03dcc54a070e2f4073ab7713f","modified":1708739824334},{"_id":"node_modules/hexo-theme-keep/source/images/bg2.svg","hash":"f12bbb821857d4e41ec253f4d8025ca7e4afce3b","modified":1708739824336},{"_id":"node_modules/hexo-theme-keep/source/js/back2top.js","hash":"a20b7f4664eb0c5efaf027edb7b922e9e2ee5d79","modified":1708739824255},{"_id":"node_modules/hexo-theme-keep/source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1708739824336},{"_id":"node_modules/hexo-theme-keep/source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1708739824335},{"_id":"node_modules/hexo-theme-keep/source/js/header-shrink.js","hash":"558cd139a503b18dcccf9a72eab157d1b0e1e1f1","modified":1708739824257},{"_id":"node_modules/hexo-theme-keep/source/js/lazyload.js","hash":"4852b9075ea8350eed2332cea1fe3fafea6963eb","modified":1708739824259},{"_id":"node_modules/hexo-theme-keep/source/js/code-block.js","hash":"75cd51b3584e95b5767d6a699593941e6c567c7e","modified":1708739824256},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/comment.ejs","hash":"91cce42038c5c88c3cdcf53df275d56ed0928b84","modified":1708739824245},{"_id":"node_modules/hexo-theme-keep/source/js/toggle-theme.js","hash":"adc7429ee7d5689174fcd03ac8ec00cd81f2262d","modified":1708739824261},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/load-handler.ejs","hash":"f2603354acc2f8e2db1342a2b5394ffebb04e962","modified":1708739824249},{"_id":"node_modules/hexo-theme-keep/source/js/main.js","hash":"35b00505658f85c28d65d4825c1b5a8a3cb1caf9","modified":1708739824259},{"_id":"node_modules/hexo-theme-keep/source/js/local-search.js","hash":"4962807fa7f450f37c16b633fab34653b3238384","modified":1708739824259},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/config-error.ejs","hash":"5c791249d3d92310b11df74c890943914ad69c1d","modified":1708739824245},{"_id":"node_modules/hexo-theme-keep/layout/_partial/common/empty-content.ejs","hash":"78402dfaf5f2ab9462b31039551ca0b5a991485f","modified":1708739824246},{"_id":"node_modules/hexo-theme-keep/layout/_partial/common/mermaid.ejs","hash":"05b0dbdc2e28d9c8b342829debf112bea3ee2b68","modified":1708739824249},{"_id":"node_modules/hexo-theme-keep/layout/_partial/pjax/pjax.ejs","hash":"8d72e959001413d3c7d3721cf44111757982a3de","modified":1708739824251},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/post-copyright-info.ejs","hash":"d9d9532b87d737a121d0733d4840a6416a13a5f6","modified":1708739824251},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/reward-author.ejs","hash":"d9d2fcb0f7ac658ec5e9327a6082e234e4574e87","modified":1708739824252},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/post-tools.ejs","hash":"befe6702c610b68dfa6b230a40fd713ec9a5e404","modified":1708739824251},{"_id":"node_modules/hexo-theme-keep/source/js/utils.js","hash":"afb34a9414efbb99c638fd95277c89faf670af19","modified":1708739824312},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/post-share.ejs","hash":"2602390e3f35117b1c2dd73edfc5764dbe94dde4","modified":1708739824251},{"_id":"node_modules/hexo-theme-keep/layout/_partial/templates/friends-link.ejs","hash":"eb98776100f88053583b408989ee5376df0725e1","modified":1708739824247},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/post-meta-info.ejs","hash":"8ce3f21587e24eab628e41be9eb3a74ec00730a9","modified":1708739824251},{"_id":"node_modules/hexo-theme-keep/source/css/common/animated.styl","hash":"d9577cd145aeb11da400f694c18052f59f0f085e","modified":1708739824323},{"_id":"node_modules/hexo-theme-keep/layout/_partial/templates/photo-album.ejs","hash":"dd6db1e74abab1dbc2484c69dceabe6a8de65bc3","modified":1708739824249},{"_id":"node_modules/hexo-theme-keep/source/css/common/css-variables.styl","hash":"ff089c26093ed50808e51e2901e5b3d902433c62","modified":1708739824328},{"_id":"node_modules/hexo-theme-keep/source/css/layout/404.styl","hash":"a912c3cafd8f4ec892094b47aa110f08e8ebb1c0","modified":1708739824322},{"_id":"node_modules/hexo-theme-keep/source/css/common/keep-style.styl","hash":"e83f4cb3c4d578b9e139f6bc10a7c9af829a02dd","modified":1708739824331},{"_id":"node_modules/hexo-theme-keep/source/css/common/stylus-variables.styl","hash":"a5c02d09bccf5decd02299a5ce0e2210e1d9f3f9","modified":1708739824334},{"_id":"node_modules/hexo-theme-keep/source/css/common/markdown.styl","hash":"91435b01a87bd322447737e1deb8aa0d3d1030b5","modified":1708739824331},{"_id":"node_modules/hexo-theme-keep/source/css/layout/archive-content.styl","hash":"52cdeff06fdbd298050e048589d51831648126bb","modified":1708739824323},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-content.styl","hash":"e66894305c709647c8f46247ee866a5f225460f9","modified":1708739824324},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-list.styl","hash":"d87a312eb9dfe452ce3fb5caa8882c20c5b2587d","modified":1708739824325},{"_id":"node_modules/hexo-theme-keep/source/css/common/basic.styl","hash":"e64aeaa65fc3b714b9383197b9e2ff10347fd46e","modified":1708739824323},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page.styl","hash":"39db3bdcc6ca014c9b3b54b72c4a4cc6156356ea","modified":1708739824332},{"_id":"node_modules/hexo-theme-keep/source/css/layout/post-content.styl","hash":"ea5156be4e8b734f6088dc01184a6b8a15b8c93a","modified":1708739824333},{"_id":"node_modules/hexo-theme-keep/source/css/layout/tag-content.styl","hash":"946a62cedab05d125ce2551123c0eb5183a18364","modified":1708739824335},{"_id":"node_modules/hexo-theme-keep/source/css/layout/home-content.styl","hash":"fbf4145dd27301b391713fb042adce153a152772","modified":1708739824330},{"_id":"node_modules/hexo-theme-keep/source/font/css/solid.min.css","hash":"65f70e8978fb1db423c007310387573b635498aa","modified":1708739824242},{"_id":"node_modules/hexo-theme-keep/source/font/css/regular.min.css","hash":"7d1c0737e27ee4c129fe5b74204c0b588dc4091c","modified":1708739824242},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page-template.styl","hash":"12c92a18d4e976a06afe6094203b61a568483af0","modified":1708739824332},{"_id":"node_modules/hexo-theme-keep/source/font/css/brands.min.css","hash":"75e0c506eff6c93d4d3311b300d251c48236b714","modified":1708739824238},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.ttf","hash":"2d7890e12afb77490112ec57fe47ca0688aebda2","modified":1708739824531},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.ttf","hash":"321d89c65f1746f111341556bc62c7e217ad2544","modified":1708739824668},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.woff2","hash":"35794892fa2b4aede41ec686df49a1283ab2b2b3","modified":1708739824850},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1708739824319},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.woff2","hash":"07fc0ae14bb3187839082aed3bca11dfb1e04524","modified":1708739824762},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1708739824319},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1708739824320},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/netlify.png","hash":"894e9d227c3ebe1ca05d431c74b61c716eaf4e4d","modified":1708739824320},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1708739824321},{"_id":"node_modules/hexo-theme-keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1708739824255},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1708739824320},{"_id":"node_modules/hexo-theme-keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1708739824260},{"_id":"node_modules/hexo-theme-keep/source/js/page/category-page.js","hash":"95c642a02e3409984609cc93219ab05dbc16765f","modified":1708739824256},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1708739824320},{"_id":"node_modules/hexo-theme-keep/source/js/page/links-page.js","hash":"41c09beee46a5dd58387154841e5766e581b27ec","modified":1708739824259},{"_id":"node_modules/hexo-theme-keep/source/js/post/share.js","hash":"7ea60518e86c3b15f164592b4600c61033b8bc4a","modified":1708739824261},{"_id":"node_modules/hexo-theme-keep/source/js/page/photos-page.js","hash":"a1a52f415f3abca4d5a34b01df4f540f84d95009","modified":1708739824260},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/artalk.ejs","hash":"1788724a817d8362958c381feee0418277b3f8da","modified":1708739824244},{"_id":"node_modules/hexo-theme-keep/source/js/post/copyright-info.js","hash":"fe9dee9201455c1c2a98b171046bf59ba4d7af5e","modified":1708739824257},{"_id":"node_modules/hexo-theme-keep/source/js/post/post-helper.js","hash":"bbe5952ab6a69a1215ad011950d90d4426aff184","modified":1708739824261},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/twikoo.ejs","hash":"06087f1ce865dac2a52663ac2a52ef6302206fc3","modified":1708739824253},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/gitalk.ejs","hash":"36602f1864d21963a7896c4e04ade0a5ccf3b303","modified":1708739824248},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/disqus.ejs","hash":"e3ea930a445a331ed327a3e4dc41ee5ce9edeb37","modified":1708739824246},{"_id":"node_modules/hexo-theme-keep/source/js/post/toc.js","hash":"816077eab3613ca82ab33f1c8b3c06d66001e93b","modified":1708739824261},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/valine.ejs","hash":"3cf7eb50d3dd60200cca0d21493b1b78e681f28c","modified":1708739824253},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/giscus.ejs","hash":"76d193eea7c0ee2e9cdf11fd8018f2033baaf708","modified":1708739824247},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-button.styl","hash":"69254a234d544f4a92670885e611fcc0081f7194","modified":1708739824330},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/highlight.styl","hash":"88b888972ea4dba1b85256ab910c7356fc23be5c","modified":1708739824329},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/waline.ejs","hash":"1e03da5ea980f64c60fcd8327e44b7e77b6df351","modified":1708739824253},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-block.styl","hash":"e05ea3623133fa09ad351f88ae5e98f69ddd118f","modified":1708739824326},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/archive-list.styl","hash":"0e5170df2413fc41258bd9b6b0f0249065aa2ae1","modified":1708739824323},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-theme.styl","hash":"16012cb7e7c5f6ac79d326b5f10bea8e896d5d54","modified":1708739824326},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-note.styl","hash":"2283cd5399ef56023c31ac5555a9f4305b9fcf52","modified":1708739824331},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-tabs.styl","hash":"57bf54ad854b4fdc775a5dd7cb03bcdfd98f0f5c","modified":1708739824331},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/footer.styl","hash":"a03f740e21010fc90f6a76105a6226ccd896979e","modified":1708739824329},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/image-mask.styl","hash":"d3fb3d4beb0e8f3558d3010b7d28298600c2ae8f","modified":1708739824330},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/first-screen.styl","hash":"d51eb829ce96c78b4cb154c218a207b685c78806","modified":1708739824329},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/local-search.styl","hash":"ba965eb5230054feab9aad37c7668daf10281e3f","modified":1708739824331},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/paginator.styl","hash":"39157df0bd402d36438b2ced1ba2eb158e1f841e","modified":1708739824333},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post-meta-info.styl","hash":"c3098233d7b92cac48b9c46df68726b5295f8199","modified":1708739824333},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/header.styl","hash":"f69c8905e9b07884e9ae4726107a00cd18780f41","modified":1708739824329},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/progress-bar.styl","hash":"5a0ae1b59de2c95b11cfa8fca57601f6da9bc16c","modified":1708739824334},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/tagcloud.styl","hash":"1a2285e38541f9adb4fdf32b449bd0c1607aa4d0","modified":1708739824335},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/side-tools.styl","hash":"0b3f0e7f6ecf8c9f215886cb46ea0cc0f3c62470","modified":1708739824334},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/toc.styl","hash":"ad59e157e3e0abc6ac916e411b2ad94777fccb18","modified":1708739824335},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/comment.styl","hash":"d29edcb92a927f6c168ae45f4dc0a3199d167ff6","modified":1708739824326},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/gitalk.styl","hash":"6344eabedc352463b3ae25e2ee28024c70bd31a2","modified":1708739824329},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post/post-share.styl","hash":"e67474486d9c8e9fd65ec51f1b97abf0e0e619c6","modified":1708739824334},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/valine.styl","hash":"71ef4b5b22a63d567e48f76ccfaacc79ee40e7bc","modified":1708739824335},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post/post-copyright-info.styl","hash":"72d8d8daa0542f3fd8e23a4e8df22e9f9c895f9a","modified":1708739824333},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/common/empty-content.styl","hash":"c9dbd9242f3a4251018e42de0026c410808f3f49","modified":1708739824328},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post/post-tools.styl","hash":"5d817e9180224cc001437c4b47d2a7ef3076e01c","modified":1708739824334},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post/reward-author.styl","hash":"eed4fd19c4f73634335db0b9620a1524e98652bf","modified":1708739824334},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/twikoo.styl","hash":"df0b0cf4a778d1e1fbcade3d226ced1a74fdb38f","modified":1708739824335},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/waline.styl","hash":"fbf5ad7dd60f044cb12265dd33222da40777d43b","modified":1708739824335},{"_id":"node_modules/hexo-theme-keep/source/font/css/fontawesome.min.css","hash":"c562501b761480adb1b4db14b6b09981b3510ac8","modified":1708739824241},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.woff2","hash":"373361ed756b1fe68ce2f5968d467826b6973bb5","modified":1708739824741},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.woff2","hash":"97f0942c6627ddd89fb62170e5cac9a2cbd6c98c","modified":1708739824848},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.ttf","hash":"d8b3568e9d8a1d3c01c85520eb9ca0b49b72815d","modified":1708739824516},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.ttf","hash":"e9ace557c3aa403307f1e7a2cef1c035d522b94b","modified":1708739824667},{"_id":"source/images/night-bg.png","hash":"adfc0cf7463419a7ea0efd3cd28a90d89313e476","modified":1708826512454},{"_id":"source/images/QJ_Icon.svg","hash":"02dd617d52ac3e766c33c0d8c6faeaef06ec705e","modified":1708749722906},{"_id":"source/images/QJ_Logo.svg","hash":"f1c44418711d364b24e93a4b3248ebddc09b234b","modified":1708749627234},{"_id":"public/search.json","hash":"0027e5435fb1b9dcf40ea60035b0bba00b539546","modified":1720365027002},{"_id":"public/about/index.html","hash":"c331d31a8b6a3303c62c9078be20599b59b9cd26","modified":1720365027002},{"_id":"public/tags/index.html","hash":"e7a71adada55a18e0ed965040b1732f1315d3b8b","modified":1720365027002},{"_id":"public/2024/07/07/20240706_Git-update-vs2022/index.html","hash":"d4683b27e7c1936fc1e159a09980f0571f11ea51","modified":1720365027002},{"_id":"public/2024/04/15/dlai-chatgpt-api-course-1-md/index.html","hash":"adc9f223d446064a28ff04e33f29e825ef61f348","modified":1720365027002},{"_id":"public/2024/04/06/arduino-start-up-withMacOS-md/index.html","hash":"6dd555c73a9a964586c5bbe394a55c5de099c3d5","modified":1720365027002},{"_id":"public/2024/03/24/cpp-breifly-talk-obj-base/index.html","hash":"488e687180234478e3298d19a6139e784d563309","modified":1720365027002},{"_id":"public/2024/03/09/202403-hexo/hexo_build_part3-2/index.html","hash":"d0497897ce3402337b51d00cb83042ba772ae83e","modified":1720365027002},{"_id":"public/2024/03/09/202403-hexo/hexo_build_part3-1/index.html","hash":"17b937472645934bd32a56bf3e0c54aae4dbf3d9","modified":1720365027002},{"_id":"public/2024/03/03/202403-hexo/hexo_build_part2/index.html","hash":"aa4304e1ae1dc2b20918364b0c92f59c506009ed","modified":1720365027002},{"_id":"public/2024/02/29/202403-hexo/hexo_build_part1/index.html","hash":"cc29625df1eb50112ed18756b21bbd9d6ff9c026","modified":1720365027002},{"_id":"public/2024/02/10/hello-world/index.html","hash":"915ce4bbd9aa5a675145c66da38c54d66fc8316a","modified":1720365027002},{"_id":"public/categories/software/index.html","hash":"4b8a9659c545e46f1d0b7d1dea7630fba1bab031","modified":1720365027002},{"_id":"public/categories/LifeDIY/index.html","hash":"bc2207bcd0b0d4368b46ae3f0b3f7a7ad638418e","modified":1720365027002},{"_id":"public/categories/Software/index.html","hash":"5b3df144079268d67e2634490c5f7c2ee2f74870","modified":1720365027002},{"_id":"public/index.html","hash":"5f6b23559bdae609bc317115ff48a1bcfef649e2","modified":1720365027002},{"_id":"public/tags/git/index.html","hash":"d0d135d3ee8cf52f63a7362a2130f129a741b2a4","modified":1720365027002},{"_id":"public/tags/arduino/index.html","hash":"9147a2a5d757467029f438ec95dabe6ed1b16815","modified":1720365027002},{"_id":"public/tags/c/index.html","hash":"40da82a5919297b6bdc84e18cdadcb15acb72336","modified":1720365027002},{"_id":"public/tags/llm-gpt/index.html","hash":"90ea199e40632c749c3b958022e08ab3b0dfffe7","modified":1720365027002},{"_id":"public/tags/hexo/index.html","hash":"d1b2a4f5f07bfe167c4ae8353ca14f7f64acc4ad","modified":1720365027002},{"_id":"public/archives/index.html","hash":"410d13856c0c36316d1fe3a4780564d7e825619e","modified":1720365027002},{"_id":"public/archives/2024/index.html","hash":"7f3b7d2c00816a80cc01f346b2e5b9f808b4c977","modified":1720365027002},{"_id":"public/archives/2024/02/index.html","hash":"296a92990c7daaf4cbbd6428b6ff45f90ce9e49c","modified":1720365027002},{"_id":"public/archives/2024/03/index.html","hash":"774ac76056c87c2e35184f41f2d55944b76fcfc4","modified":1720365027002},{"_id":"public/archives/2024/04/index.html","hash":"554ccf2a5f2bdf61070e52b7971195eabe86b23b","modified":1720365027002},{"_id":"public/archives/2024/07/index.html","hash":"59f8e96ffccd97158412b56d1b254a196e38a034","modified":1720365027002},{"_id":"public/404.html","hash":"673ca6052f9da14bf7a3153d01ad96688d3b2f71","modified":1720365027002},{"_id":"public/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1720365027002},{"_id":"public/images/bg.svg","hash":"7dfc551927ce3a789d8f4a62c59d600f2446aed5","modified":1720365027002},{"_id":"public/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1720365027002},{"_id":"public/images/bg2.svg","hash":"f12bbb821857d4e41ec253f4d8025ca7e4afce3b","modified":1720365027002},{"_id":"public/font/webfonts/fa-regular-400.woff2","hash":"07fc0ae14bb3187839082aed3bca11dfb1e04524","modified":1720365027002},{"_id":"public/font/webfonts/fa-regular-400.ttf","hash":"2d7890e12afb77490112ec57fe47ca0688aebda2","modified":1720365027002},{"_id":"public/font/webfonts/fa-v4compatibility.woff2","hash":"35794892fa2b4aede41ec686df49a1283ab2b2b3","modified":1720365027002},{"_id":"public/font/webfonts/fa-v4compatibility.ttf","hash":"321d89c65f1746f111341556bc62c7e217ad2544","modified":1720365027002},{"_id":"public/images/deploy-provider/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1720365027002},{"_id":"public/images/deploy-provider/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1720365027002},{"_id":"public/images/deploy-provider/netlify.png","hash":"894e9d227c3ebe1ca05d431c74b61c716eaf4e4d","modified":1720365027002},{"_id":"public/images/deploy-provider/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1720365027002},{"_id":"public/images/deploy-provider/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1720365027002},{"_id":"public/images/deploy-provider/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1720365027002},{"_id":"public/images/deploy-provider/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1720365027002},{"_id":"public/font/webfonts/fa-brands-400.woff2","hash":"373361ed756b1fe68ce2f5968d467826b6973bb5","modified":1720365027002},{"_id":"public/images/givemeacoffee.png","hash":"cf2be439f83b32c0b49f881795418adf651b9e3f","modified":1720365027002},{"_id":"public/css/style.css","hash":"104de80124df53fe836fbe5877747176370eb578","modified":1720365027002},{"_id":"public/js/back2top.js","hash":"a20b7f4664eb0c5efaf027edb7b922e9e2ee5d79","modified":1720365027002},{"_id":"public/js/code-block.js","hash":"75cd51b3584e95b5767d6a699593941e6c567c7e","modified":1720365027002},{"_id":"public/js/header-shrink.js","hash":"558cd139a503b18dcccf9a72eab157d1b0e1e1f1","modified":1720365027002},{"_id":"public/js/lazyload.js","hash":"4852b9075ea8350eed2332cea1fe3fafea6963eb","modified":1720365027002},{"_id":"public/js/local-search.js","hash":"4962807fa7f450f37c16b633fab34653b3238384","modified":1720365027002},{"_id":"public/js/main.js","hash":"35b00505658f85c28d65d4825c1b5a8a3cb1caf9","modified":1720365027002},{"_id":"public/js/toggle-theme.js","hash":"adc7429ee7d5689174fcd03ac8ec00cd81f2262d","modified":1720365027002},{"_id":"public/js/utils.js","hash":"afb34a9414efbb99c638fd95277c89faf670af19","modified":1720365027002},{"_id":"public/css/common/animated.css","hash":"d3966d2c19b5d004e361bae598298311956352ab","modified":1720365027002},{"_id":"public/css/common/basic.css","hash":"f03627ed3cf4f2a329ab0a2bc1d20b0a097cfc25","modified":1720365027002},{"_id":"public/css/common/css-variables.css","hash":"8874c785a488e4e8c38526d468f1fe1232d5f9e0","modified":1720365027002},{"_id":"public/css/common/keep-style.css","hash":"e9419bd77e415986e5ae2d724d93798bb7cb8a86","modified":1720365027002},{"_id":"public/css/common/markdown.css","hash":"f9ed0115a291e90ef4b0cf248ce675c7d99436c9","modified":1720365027002},{"_id":"public/css/common/stylus-variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720365027002},{"_id":"public/css/layout/404.css","hash":"fc65d6a0c801be462bde63b6091d659ed7c213e6","modified":1720365027002},{"_id":"public/css/layout/category-content.css","hash":"c8b8a3b8a5155106ac8baa4c8af3a4aacb7aca1a","modified":1720365027002},{"_id":"public/css/layout/category-list.css","hash":"800b3e4fe0a256fd7f47ec07aeebaab65a5641b5","modified":1720365027002},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720365027002},{"_id":"public/css/layout/home-content.css","hash":"df4707028ec9c2d7a6f5f7a59de76fd7003aae91","modified":1720365027002},{"_id":"public/css/layout/page-template.css","hash":"4caa415361f3f29a63168a997eff975814f0ca67","modified":1720365027002},{"_id":"public/css/layout/page.css","hash":"f8f23197cabe0b324d3cd022e11db3704426d3c7","modified":1720365027002},{"_id":"public/css/layout/post-content.css","hash":"c07c7226c41f857b57f794ae5bf23f06d263b52a","modified":1720365027002},{"_id":"public/css/layout/tag-content.css","hash":"335deb9379466fd46b7880bf4e3090185b0aa963","modified":1720365027002},{"_id":"public/font/css/brands.min.css","hash":"75e0c506eff6c93d4d3311b300d251c48236b714","modified":1720365027002},{"_id":"public/font/css/fontawesome.min.css","hash":"c562501b761480adb1b4db14b6b09981b3510ac8","modified":1720365027002},{"_id":"public/font/css/regular.min.css","hash":"7d1c0737e27ee4c129fe5b74204c0b588dc4091c","modified":1720365027002},{"_id":"public/font/css/solid.min.css","hash":"65f70e8978fb1db423c007310387573b635498aa","modified":1720365027002},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1720365027002},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1720365027002},{"_id":"public/js/page/category-page.js","hash":"95c642a02e3409984609cc93219ab05dbc16765f","modified":1720365027002},{"_id":"public/js/page/links-page.js","hash":"41c09beee46a5dd58387154841e5766e581b27ec","modified":1720365027002},{"_id":"public/js/page/photos-page.js","hash":"a1a52f415f3abca4d5a34b01df4f540f84d95009","modified":1720365027002},{"_id":"public/js/post/copyright-info.js","hash":"fe9dee9201455c1c2a98b171046bf59ba4d7af5e","modified":1720365027002},{"_id":"public/js/post/post-helper.js","hash":"bbe5952ab6a69a1215ad011950d90d4426aff184","modified":1720365027002},{"_id":"public/js/post/share.js","hash":"7ea60518e86c3b15f164592b4600c61033b8bc4a","modified":1720365027002},{"_id":"public/js/post/toc.js","hash":"816077eab3613ca82ab33f1c8b3c06d66001e93b","modified":1720365027002},{"_id":"public/css/common/code-block/code-block.css","hash":"b8bb33d297e3b4e7747bf83e5fee8d643d37cfcd","modified":1720365027002},{"_id":"public/css/common/code-block/code-theme.css","hash":"004b737e0414b03d853b4fe146d8f848129ec65d","modified":1720365027002},{"_id":"public/css/common/code-block/highlight.css","hash":"0b3590f95b2f11f702df32c613ca4e02ce7996d4","modified":1720365027002},{"_id":"public/css/common/tags/keep-button.css","hash":"17bd98d7daad3ddaf5e0ea44e16007548b49305b","modified":1720365027002},{"_id":"public/css/common/tags/keep-note.css","hash":"483632c7c234da5fd88ecb943be54455b3f1644b","modified":1720365027002},{"_id":"public/css/common/tags/keep-tabs.css","hash":"795cb5e2bf4e25f079303aaf9044fc50a8f8b8d5","modified":1720365027002},{"_id":"public/font/webfonts/fa-brands-400.ttf","hash":"d8b3568e9d8a1d3c01c85520eb9ca0b49b72815d","modified":1720365027002},{"_id":"public/font/webfonts/fa-solid-900.woff2","hash":"97f0942c6627ddd89fb62170e5cac9a2cbd6c98c","modified":1720365027002},{"_id":"public/images/Jimmy.png","hash":"fbcab86ec9f93b3fd0fc2d48cca99435571f2e0d","modified":1720365027002},{"_id":"public/images/bg.png","hash":"3d4c4b655338c3f7518724a042b1a96369e4df19","modified":1720365027002},{"_id":"public/font/webfonts/fa-solid-900.ttf","hash":"e9ace557c3aa403307f1e7a2cef1c035d522b94b","modified":1720365027002},{"_id":"public/images/night-bg.png","hash":"adfc0cf7463419a7ea0efd3cd28a90d89313e476","modified":1720365027002},{"_id":"public/images/QJ_Logo.svg","hash":"f1c44418711d364b24e93a4b3248ebddc09b234b","modified":1720365027002},{"_id":"public/images/QJ_Icon.svg","hash":"02dd617d52ac3e766c33c0d8c6faeaef06ec705e","modified":1720365027002}],"Category":[{"name":"software","_id":"clybox2pf0004txzk2vgc6dqi"},{"name":"LifeDIY","_id":"clybox2ph0009txzk0oyueb19"},{"name":"Software","_id":"clybox2pi000dtxzk8zfk9h6b"}],"Data":[{"_id":".DS_Store","data":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000.\u0000y\u0000m\u0000lIloc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000k\u0000e\u0000e\u0000p\u0000.\u0000y\u0000m\u0000lIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000<\u0000\u0000\u0000+������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"},{"_id":"keep","data":{"base_info":{"primary_color":"#669966","title":"Quan-Jun Space","author":"Jimmy Shen","avatar":"/images/Jimmy.png","logo":"/images/QJ_Logo.svg","favicon":"/images/QJ_Icon.svg"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","About":"/about"},"first_screen":{"enable":true,"background_img":"/images/bg.png","background_img_dark":"/images/night-bg.png","description":"Never lose your value, have a life, and live it with your pride.","hitokoto":false,"social_contact":{"enable":true,"links":{"github":"https://github.com/Janes128","twitter":null,"facebook":null,"email":"jimmy851208@gmail.com"}}},"scroll":{"progress_bar":true,"percent":false,"hide_header":false},"home":{"category":true,"tag":true,"announcement":null},"post":{"author_badge":{"enable":false,"level_badge":false,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":false,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":true,"img_link":"/images/givemeacoffee.png","text":"請我喝一杯讚的！"}},"code_block":{"tools":{"enable":true,"style":"default"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":false,"init_open":true,"layout":"left"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":true},"comment":{"enable":true,"use":"disqus","disqus":{"enable":true,"shortname":"quanjun-space","count":true}},"rss":{"enable":false},"lazyload":{"enable":true},"cdn":{"enable":false,"provider":"cdnjs"},"pjax":{"enable":false},"footer":{"since":2023,"word_count":false,"icp":{"enable":false,"record_code":null,"url":null},"site_deploy":{"enable":true,"provider":"netlify","url":null},"shields_style":{"enable":false,"custom":[{"link_url":null,"img_url":null}]}},"inject":{"enable":false,"css":[null],"js":[null]}}}],"Page":[{"title":"about","date":"2024-02-24T02:37:57.000Z","comment":false,"_content":"\n## About me\n\n我是詮鈞，可以叫我 Jimmy。一個想把程式語言當文章寫的軟體工程師，享受在知識探索與分享的過程中。\n本站將分享自己在工作學習中的收穫筆記；還有生活DIY心得、知識分享等等。他們是我的生活軌跡。\n人生，就是不斷的在探索學習，朝向美好的自己邁進。\n\n期許，今天的自己都要比昨天的自己還進步一點！\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-02-24 10:37:57\ncomment: false\n---\n\n## About me\n\n我是詮鈞，可以叫我 Jimmy。一個想把程式語言當文章寫的軟體工程師，享受在知識探索與分享的過程中。\n本站將分享自己在工作學習中的收穫筆記；還有生活DIY心得、知識分享等等。他們是我的生活軌跡。\n人生，就是不斷的在探索學習，朝向美好的自己邁進。\n\n期許，今天的自己都要比昨天的自己還進步一點！\n","updated":"2024-07-06T11:17:17.950Z","path":"about/index.html","comments":1,"layout":"page","_id":"clybox2p70000txzkhcdaetup","content":"<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p>我是詮鈞，可以叫我 Jimmy。一個想把程式語言當文章寫的軟體工程師，享受在知識探索與分享的過程中。<br>本站將分享自己在工作學習中的收穫筆記；還有生活DIY心得、知識分享等等。他們是我的生活軌跡。<br>人生，就是不斷的在探索學習，朝向美好的自己邁進。</p>\n<p>期許，今天的自己都要比昨天的自己還進步一點！</p>\n","excerpt":"","more":"<h2 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h2><p>我是詮鈞，可以叫我 Jimmy。一個想把程式語言當文章寫的軟體工程師，享受在知識探索與分享的過程中。<br>本站將分享自己在工作學習中的收穫筆記；還有生活DIY心得、知識分享等等。他們是我的生活軌跡。<br>人生，就是不斷的在探索學習，朝向美好的自己邁進。</p>\n<p>期許，今天的自己都要比昨天的自己還進步一點！</p>\n"},{"title":"tags","date":"2024-03-06T13:22:51.000Z","updated":"2024-03-06T13:23:51.642Z","comment":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-03-06 21:22:51\nupdated:\ncomment: false\n---\n","path":"tags/index.html","comments":1,"layout":"page","_id":"clybox2pd0002txzkb1h5cxnx","content":"","excerpt":"","more":""}],"Post":[{"title":"Git 使用教學－如何在VS 2022將自己的程式碼，更新至主分支(by Github)","date":"2024-07-07T15:50:15.000Z","updated":"2024-07-07T15:10:08.658Z","_content":"\n有鑑於最近公司專案規劃，有合併程式、更新最新版程式的需求，因此手把手教學在VS 2022中，怎麼將自己的程式碼更新到最新版，並且合併上傳至主分支的流程。\n\n- 相關資訊\n   - 我使用 GitFlow 工作流\n   - 我使用 Github 作為線上存放庫\n   - 學習的參考影片，請參見：[https://youtu.be/uj8hjLyEBmU?si=LhyT-WpM6E-HpTb7](https://youtu.be/uj8hjLyEBmU?si=LhyT-WpM6E-HpTb7) 。作者分享的很好，也有圖例與git指令可以參考\n- 此方法可以協助開發人員，持續在\"最新版本\"上進行開發，減少合併會遇到的各種衝突\n\n讓我們開始吧！\n\n### Step 1－在本地端中切回主分支\n\n![](https://hackmd.io/_uploads/BJS-oprGR.png)\n\n### Step 2－在本地端\"提取\"並更新主分支\n\n![](https://hackmd.io/_uploads/rkwuipHzR.png)\n\n### Step 3－切回自己修改的分支(feature branch)\n\n![](https://hackmd.io/_uploads/B1EzRpSMR.png)\n\n### Step 4－將主分支的更新，重訂基底(Rebase)回自己的分支\n\n![](https://hackmd.io/_uploads/H1xy06HMC.png)\n\n- 目前在自己的分支，要在develop上按下右鍵\n\n![](https://hackmd.io/_uploads/H1bDApHzA.png)\n\n- 當Rebase發生衝突時，請妥善的解決衝突\n\n![](https://hackmd.io/_uploads/rkv03lIG0.png)\n\n- Rebase後會長這樣\n\n![](https://hackmd.io/_uploads/rk5hAaHGC.png)\n\n### Step 5－強制推回\"遠端自己\"的分支\n\n> 重要提醒：此時的遠端更新，是要更新\"自己的\"分支，而非主分支\n\n- 也可以直接按下\"**Sync**\" (fetch and pull)\n\n![](https://hackmd.io/_uploads/SJ-61RSMA.png)\n\n以上流程，可以於自己的專案中經常這麼做，以確保自己的專案是處在最新版本的喔！\n\n未來有PR時，也比較不會有那麼多衝突。\n\n----\n\n### Step 6－提出新的\"提取需求\" 去更新主分支，再由管理者進行主分支進版\n\n- 現在，要創建一個新的\"提取需求\"，更新主分支，讓主分支在最新版\n\n![](https://hackmd.io/_uploads/BytYgArzR.png)\n\n> 必須要選好: 要進行合併的目標與來源，這個步驟關鍵點，記得要選好\n\n![](https://hackmd.io/_uploads/r1OAlCHGR.png)\n\n- 輸入好左側\"輸入標題\"欄位後，按下\"create\"\n\n![](https://hackmd.io/_uploads/SJrNReIfC.png)\n\n- 按下\"create\"，會出現一個提取要求連結，請點入連結到Github網站上\n\n![](https://hackmd.io/_uploads/rypA-CSzA.png)\n\n- 直接到Github中，進行相關資訊的檢查，也可以留下自己的Commit評論。完成後，將綠色的merge按鍵，重新選為\"**Squash and merge**\"的方式進行合併\n\n![](https://hackmd.io/_uploads/HJ9q-0rfA.png)\n\n> 備註：**Squash and merge** 的用意在於：將完成提取要求時壓縮主題分支的Git 歷程記錄，這會將這個主題分支的commit message 合成成單一個message，用意是比較清楚與簡化。但，這可以自行評估使用，且看自己的需求。\n\n- 檢查Merge Message並進行修改，接著按下\"**Confirm squash and merge**\"進行提交\n\n![](https://hackmd.io/_uploads/BJloMfCSzR.png)\n\n- 並且將這個已經合併的自己的舊分支刪除(如紅色箭頭)\n\n![](https://hackmd.io/_uploads/BylHM0SMA.png)\n\n- 此時可以回去主頁面，查看是否已將舊分支刪除了\n\n![](https://hackmd.io/_uploads/HJh9f0HzA.png)\n\n### Step 7－本地端切回主分支，並刪除自己的舊分支\n\n- 先切到*develop*\n\n![](https://hackmd.io/_uploads/ryJk70BzC.png)\n\n- 刪除本機自己的分支\n\n![](https://hackmd.io/_uploads/S17-70SG0.png)\n\n- 刪除遠端自己的分支\n\n![](https://hackmd.io/_uploads/SJNOm0Sf0.png)\n\n- 在當前分支(*develop*)進行\"**Sync**\"或\"**Pull**\"，亦即將當前分支更新為最新版本\n\n![](https://hackmd.io/_uploads/HJ6V70SzA.png)\n\n- 查看紀錄，是否有更新為最新版的程式\n\n![](https://hackmd.io/_uploads/H1uLXAHGC.png)\n\n:::info\n> **恭喜完成！ 🎉**\n:::\n\n## 小結\n\n雖然步驟會比較麻煩，但這真的有助於團隊在合併程式碼時，可以更方便的合作。如果省略這樣的過程直接merge，無疑是殺雞取卵的作法，已經體驗過了，真的痛苦。\n\n另外，平常時，可以使用\"**Step 1**~**Step 5**\"，常態性的將自己的版本維持到線上的最新版本，減少衝突狀況出現。\n\n","source":"_posts/20240706_Git-update-vs2022.md","raw":"---\ntitle: Git 使用教學－如何在VS 2022將自己的程式碼，更新至主分支(by Github)\ndate: 2024-07-07 23:50:15\nupdated:\ntags: git\ncategories: software\n---\n\n有鑑於最近公司專案規劃，有合併程式、更新最新版程式的需求，因此手把手教學在VS 2022中，怎麼將自己的程式碼更新到最新版，並且合併上傳至主分支的流程。\n\n- 相關資訊\n   - 我使用 GitFlow 工作流\n   - 我使用 Github 作為線上存放庫\n   - 學習的參考影片，請參見：[https://youtu.be/uj8hjLyEBmU?si=LhyT-WpM6E-HpTb7](https://youtu.be/uj8hjLyEBmU?si=LhyT-WpM6E-HpTb7) 。作者分享的很好，也有圖例與git指令可以參考\n- 此方法可以協助開發人員，持續在\"最新版本\"上進行開發，減少合併會遇到的各種衝突\n\n讓我們開始吧！\n\n### Step 1－在本地端中切回主分支\n\n![](https://hackmd.io/_uploads/BJS-oprGR.png)\n\n### Step 2－在本地端\"提取\"並更新主分支\n\n![](https://hackmd.io/_uploads/rkwuipHzR.png)\n\n### Step 3－切回自己修改的分支(feature branch)\n\n![](https://hackmd.io/_uploads/B1EzRpSMR.png)\n\n### Step 4－將主分支的更新，重訂基底(Rebase)回自己的分支\n\n![](https://hackmd.io/_uploads/H1xy06HMC.png)\n\n- 目前在自己的分支，要在develop上按下右鍵\n\n![](https://hackmd.io/_uploads/H1bDApHzA.png)\n\n- 當Rebase發生衝突時，請妥善的解決衝突\n\n![](https://hackmd.io/_uploads/rkv03lIG0.png)\n\n- Rebase後會長這樣\n\n![](https://hackmd.io/_uploads/rk5hAaHGC.png)\n\n### Step 5－強制推回\"遠端自己\"的分支\n\n> 重要提醒：此時的遠端更新，是要更新\"自己的\"分支，而非主分支\n\n- 也可以直接按下\"**Sync**\" (fetch and pull)\n\n![](https://hackmd.io/_uploads/SJ-61RSMA.png)\n\n以上流程，可以於自己的專案中經常這麼做，以確保自己的專案是處在最新版本的喔！\n\n未來有PR時，也比較不會有那麼多衝突。\n\n----\n\n### Step 6－提出新的\"提取需求\" 去更新主分支，再由管理者進行主分支進版\n\n- 現在，要創建一個新的\"提取需求\"，更新主分支，讓主分支在最新版\n\n![](https://hackmd.io/_uploads/BytYgArzR.png)\n\n> 必須要選好: 要進行合併的目標與來源，這個步驟關鍵點，記得要選好\n\n![](https://hackmd.io/_uploads/r1OAlCHGR.png)\n\n- 輸入好左側\"輸入標題\"欄位後，按下\"create\"\n\n![](https://hackmd.io/_uploads/SJrNReIfC.png)\n\n- 按下\"create\"，會出現一個提取要求連結，請點入連結到Github網站上\n\n![](https://hackmd.io/_uploads/rypA-CSzA.png)\n\n- 直接到Github中，進行相關資訊的檢查，也可以留下自己的Commit評論。完成後，將綠色的merge按鍵，重新選為\"**Squash and merge**\"的方式進行合併\n\n![](https://hackmd.io/_uploads/HJ9q-0rfA.png)\n\n> 備註：**Squash and merge** 的用意在於：將完成提取要求時壓縮主題分支的Git 歷程記錄，這會將這個主題分支的commit message 合成成單一個message，用意是比較清楚與簡化。但，這可以自行評估使用，且看自己的需求。\n\n- 檢查Merge Message並進行修改，接著按下\"**Confirm squash and merge**\"進行提交\n\n![](https://hackmd.io/_uploads/BJloMfCSzR.png)\n\n- 並且將這個已經合併的自己的舊分支刪除(如紅色箭頭)\n\n![](https://hackmd.io/_uploads/BylHM0SMA.png)\n\n- 此時可以回去主頁面，查看是否已將舊分支刪除了\n\n![](https://hackmd.io/_uploads/HJh9f0HzA.png)\n\n### Step 7－本地端切回主分支，並刪除自己的舊分支\n\n- 先切到*develop*\n\n![](https://hackmd.io/_uploads/ryJk70BzC.png)\n\n- 刪除本機自己的分支\n\n![](https://hackmd.io/_uploads/S17-70SG0.png)\n\n- 刪除遠端自己的分支\n\n![](https://hackmd.io/_uploads/SJNOm0Sf0.png)\n\n- 在當前分支(*develop*)進行\"**Sync**\"或\"**Pull**\"，亦即將當前分支更新為最新版本\n\n![](https://hackmd.io/_uploads/HJ6V70SzA.png)\n\n- 查看紀錄，是否有更新為最新版的程式\n\n![](https://hackmd.io/_uploads/H1uLXAHGC.png)\n\n:::info\n> **恭喜完成！ 🎉**\n:::\n\n## 小結\n\n雖然步驟會比較麻煩，但這真的有助於團隊在合併程式碼時，可以更方便的合作。如果省略這樣的過程直接merge，無疑是殺雞取卵的作法，已經體驗過了，真的痛苦。\n\n另外，平常時，可以使用\"**Step 1**~**Step 5**\"，常態性的將自己的版本維持到線上的最新版本，減少衝突狀況出現。\n\n","slug":"20240706_Git-update-vs2022","published":1,"comments":1,"layout":"post","photos":[],"_id":"clybox2pb0001txzkbzdlezh7","content":"<p>有鑑於最近公司專案規劃，有合併程式、更新最新版程式的需求，因此手把手教學在VS 2022中，怎麼將自己的程式碼更新到最新版，並且合併上傳至主分支的流程。</p>\n<ul>\n<li>相關資訊<ul>\n<li>我使用 GitFlow 工作流</li>\n<li>我使用 Github 作為線上存放庫</li>\n<li>學習的參考影片，請參見：<a class=\"link\"   href=\"https://youtu.be/uj8hjLyEBmU?si=LhyT-WpM6E-HpTb7\" >https://youtu.be/uj8hjLyEBmU?si=LhyT-WpM6E-HpTb7<i class=\"fas fa-external-link-alt\"></i></a> 。作者分享的很好，也有圖例與git指令可以參考</li>\n</ul>\n</li>\n<li>此方法可以協助開發人員，持續在”最新版本”上進行開發，減少合併會遇到的各種衝突</li>\n</ul>\n<p>讓我們開始吧！</p>\n<h3 id=\"Step-1－在本地端中切回主分支\"><a href=\"#Step-1－在本地端中切回主分支\" class=\"headerlink\" title=\"Step 1－在本地端中切回主分支\"></a>Step 1－在本地端中切回主分支</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/BJS-oprGR.png\"\n                       \n                 ></p>\n<h3 id=\"Step-2－在本地端”提取”並更新主分支\"><a href=\"#Step-2－在本地端”提取”並更新主分支\" class=\"headerlink\" title=\"Step 2－在本地端”提取”並更新主分支\"></a>Step 2－在本地端”提取”並更新主分支</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/rkwuipHzR.png\"\n                       \n                 ></p>\n<h3 id=\"Step-3－切回自己修改的分支-feature-branch\"><a href=\"#Step-3－切回自己修改的分支-feature-branch\" class=\"headerlink\" title=\"Step 3－切回自己修改的分支(feature branch)\"></a>Step 3－切回自己修改的分支(feature branch)</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/B1EzRpSMR.png\"\n                       \n                 ></p>\n<h3 id=\"Step-4－將主分支的更新，重訂基底-Rebase-回自己的分支\"><a href=\"#Step-4－將主分支的更新，重訂基底-Rebase-回自己的分支\" class=\"headerlink\" title=\"Step 4－將主分支的更新，重訂基底(Rebase)回自己的分支\"></a>Step 4－將主分支的更新，重訂基底(Rebase)回自己的分支</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/H1xy06HMC.png\"\n                       \n                 ></p>\n<ul>\n<li>目前在自己的分支，要在develop上按下右鍵</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/H1bDApHzA.png\"\n                       \n                 ></p>\n<ul>\n<li>當Rebase發生衝突時，請妥善的解決衝突</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/rkv03lIG0.png\"\n                       \n                 ></p>\n<ul>\n<li>Rebase後會長這樣</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/rk5hAaHGC.png\"\n                       \n                 ></p>\n<h3 id=\"Step-5－強制推回”遠端自己”的分支\"><a href=\"#Step-5－強制推回”遠端自己”的分支\" class=\"headerlink\" title=\"Step 5－強制推回”遠端自己”的分支\"></a>Step 5－強制推回”遠端自己”的分支</h3><blockquote>\n<p>重要提醒：此時的遠端更新，是要更新”自己的”分支，而非主分支</p>\n</blockquote>\n<ul>\n<li>也可以直接按下”<strong>Sync</strong>“ (fetch and pull)</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/SJ-61RSMA.png\"\n                       \n                 ></p>\n<p>以上流程，可以於自己的專案中經常這麼做，以確保自己的專案是處在最新版本的喔！</p>\n<p>未來有PR時，也比較不會有那麼多衝突。</p>\n<hr>\n<h3 id=\"Step-6－提出新的”提取需求”-去更新主分支，再由管理者進行主分支進版\"><a href=\"#Step-6－提出新的”提取需求”-去更新主分支，再由管理者進行主分支進版\" class=\"headerlink\" title=\"Step 6－提出新的”提取需求” 去更新主分支，再由管理者進行主分支進版\"></a>Step 6－提出新的”提取需求” 去更新主分支，再由管理者進行主分支進版</h3><ul>\n<li>現在，要創建一個新的”提取需求”，更新主分支，讓主分支在最新版</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/BytYgArzR.png\"\n                       \n                 ></p>\n<blockquote>\n<p>必須要選好: 要進行合併的目標與來源，這個步驟關鍵點，記得要選好</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/r1OAlCHGR.png\"\n                       \n                 ></p>\n<ul>\n<li>輸入好左側”輸入標題”欄位後，按下”create”</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/SJrNReIfC.png\"\n                       \n                 ></p>\n<ul>\n<li>按下”create”，會出現一個提取要求連結，請點入連結到Github網站上</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/rypA-CSzA.png\"\n                       \n                 ></p>\n<ul>\n<li>直接到Github中，進行相關資訊的檢查，也可以留下自己的Commit評論。完成後，將綠色的merge按鍵，重新選為”<strong>Squash and merge</strong>“的方式進行合併</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/HJ9q-0rfA.png\"\n                       \n                 ></p>\n<blockquote>\n<p>備註：<strong>Squash and merge</strong> 的用意在於：將完成提取要求時壓縮主題分支的Git 歷程記錄，這會將這個主題分支的commit message 合成成單一個message，用意是比較清楚與簡化。但，這可以自行評估使用，且看自己的需求。</p>\n</blockquote>\n<ul>\n<li>檢查Merge Message並進行修改，接著按下”<strong>Confirm squash and merge</strong>“進行提交</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/BJloMfCSzR.png\"\n                       \n                 ></p>\n<ul>\n<li>並且將這個已經合併的自己的舊分支刪除(如紅色箭頭)</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/BylHM0SMA.png\"\n                       \n                 ></p>\n<ul>\n<li>此時可以回去主頁面，查看是否已將舊分支刪除了</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/HJh9f0HzA.png\"\n                       \n                 ></p>\n<h3 id=\"Step-7－本地端切回主分支，並刪除自己的舊分支\"><a href=\"#Step-7－本地端切回主分支，並刪除自己的舊分支\" class=\"headerlink\" title=\"Step 7－本地端切回主分支，並刪除自己的舊分支\"></a>Step 7－本地端切回主分支，並刪除自己的舊分支</h3><ul>\n<li>先切到<em>develop</em></li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/ryJk70BzC.png\"\n                       \n                 ></p>\n<ul>\n<li>刪除本機自己的分支</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/S17-70SG0.png\"\n                       \n                 ></p>\n<ul>\n<li>刪除遠端自己的分支</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/SJNOm0Sf0.png\"\n                       \n                 ></p>\n<ul>\n<li>在當前分支(<em>develop</em>)進行”<strong>Sync</strong>“或”<strong>Pull</strong>“，亦即將當前分支更新為最新版本</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/HJ6V70SzA.png\"\n                       \n                 ></p>\n<ul>\n<li>查看紀錄，是否有更新為最新版的程式</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/H1uLXAHGC.png\"\n                       \n                 ></p>\n<p>:::info</p>\n<blockquote>\n<p><strong>恭喜完成！ 🎉</strong><br>:::</p>\n</blockquote>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>雖然步驟會比較麻煩，但這真的有助於團隊在合併程式碼時，可以更方便的合作。如果省略這樣的過程直接merge，無疑是殺雞取卵的作法，已經體驗過了，真的痛苦。</p>\n<p>另外，平常時，可以使用”<strong>Step 1</strong>~<strong>Step 5</strong>“，常態性的將自己的版本維持到線上的最新版本，減少衝突狀況出現。</p>\n","excerpt":"","more":"<p>有鑑於最近公司專案規劃，有合併程式、更新最新版程式的需求，因此手把手教學在VS 2022中，怎麼將自己的程式碼更新到最新版，並且合併上傳至主分支的流程。</p>\n<ul>\n<li>相關資訊<ul>\n<li>我使用 GitFlow 工作流</li>\n<li>我使用 Github 作為線上存放庫</li>\n<li>學習的參考影片，請參見：<a class=\"link\"   href=\"https://youtu.be/uj8hjLyEBmU?si=LhyT-WpM6E-HpTb7\" >https://youtu.be/uj8hjLyEBmU?si=LhyT-WpM6E-HpTb7<i class=\"fas fa-external-link-alt\"></i></a> 。作者分享的很好，也有圖例與git指令可以參考</li>\n</ul>\n</li>\n<li>此方法可以協助開發人員，持續在”最新版本”上進行開發，減少合併會遇到的各種衝突</li>\n</ul>\n<p>讓我們開始吧！</p>\n<h3 id=\"Step-1－在本地端中切回主分支\"><a href=\"#Step-1－在本地端中切回主分支\" class=\"headerlink\" title=\"Step 1－在本地端中切回主分支\"></a>Step 1－在本地端中切回主分支</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/BJS-oprGR.png\"\n                       \n                 ></p>\n<h3 id=\"Step-2－在本地端”提取”並更新主分支\"><a href=\"#Step-2－在本地端”提取”並更新主分支\" class=\"headerlink\" title=\"Step 2－在本地端”提取”並更新主分支\"></a>Step 2－在本地端”提取”並更新主分支</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/rkwuipHzR.png\"\n                       \n                 ></p>\n<h3 id=\"Step-3－切回自己修改的分支-feature-branch\"><a href=\"#Step-3－切回自己修改的分支-feature-branch\" class=\"headerlink\" title=\"Step 3－切回自己修改的分支(feature branch)\"></a>Step 3－切回自己修改的分支(feature branch)</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/B1EzRpSMR.png\"\n                       \n                 ></p>\n<h3 id=\"Step-4－將主分支的更新，重訂基底-Rebase-回自己的分支\"><a href=\"#Step-4－將主分支的更新，重訂基底-Rebase-回自己的分支\" class=\"headerlink\" title=\"Step 4－將主分支的更新，重訂基底(Rebase)回自己的分支\"></a>Step 4－將主分支的更新，重訂基底(Rebase)回自己的分支</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/H1xy06HMC.png\"\n                       \n                 ></p>\n<ul>\n<li>目前在自己的分支，要在develop上按下右鍵</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/H1bDApHzA.png\"\n                       \n                 ></p>\n<ul>\n<li>當Rebase發生衝突時，請妥善的解決衝突</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/rkv03lIG0.png\"\n                       \n                 ></p>\n<ul>\n<li>Rebase後會長這樣</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/rk5hAaHGC.png\"\n                       \n                 ></p>\n<h3 id=\"Step-5－強制推回”遠端自己”的分支\"><a href=\"#Step-5－強制推回”遠端自己”的分支\" class=\"headerlink\" title=\"Step 5－強制推回”遠端自己”的分支\"></a>Step 5－強制推回”遠端自己”的分支</h3><blockquote>\n<p>重要提醒：此時的遠端更新，是要更新”自己的”分支，而非主分支</p>\n</blockquote>\n<ul>\n<li>也可以直接按下”<strong>Sync</strong>“ (fetch and pull)</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/SJ-61RSMA.png\"\n                       \n                 ></p>\n<p>以上流程，可以於自己的專案中經常這麼做，以確保自己的專案是處在最新版本的喔！</p>\n<p>未來有PR時，也比較不會有那麼多衝突。</p>\n<hr>\n<h3 id=\"Step-6－提出新的”提取需求”-去更新主分支，再由管理者進行主分支進版\"><a href=\"#Step-6－提出新的”提取需求”-去更新主分支，再由管理者進行主分支進版\" class=\"headerlink\" title=\"Step 6－提出新的”提取需求” 去更新主分支，再由管理者進行主分支進版\"></a>Step 6－提出新的”提取需求” 去更新主分支，再由管理者進行主分支進版</h3><ul>\n<li>現在，要創建一個新的”提取需求”，更新主分支，讓主分支在最新版</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/BytYgArzR.png\"\n                       \n                 ></p>\n<blockquote>\n<p>必須要選好: 要進行合併的目標與來源，這個步驟關鍵點，記得要選好</p>\n</blockquote>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/r1OAlCHGR.png\"\n                       \n                 ></p>\n<ul>\n<li>輸入好左側”輸入標題”欄位後，按下”create”</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/SJrNReIfC.png\"\n                       \n                 ></p>\n<ul>\n<li>按下”create”，會出現一個提取要求連結，請點入連結到Github網站上</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/rypA-CSzA.png\"\n                       \n                 ></p>\n<ul>\n<li>直接到Github中，進行相關資訊的檢查，也可以留下自己的Commit評論。完成後，將綠色的merge按鍵，重新選為”<strong>Squash and merge</strong>“的方式進行合併</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/HJ9q-0rfA.png\"\n                       \n                 ></p>\n<blockquote>\n<p>備註：<strong>Squash and merge</strong> 的用意在於：將完成提取要求時壓縮主題分支的Git 歷程記錄，這會將這個主題分支的commit message 合成成單一個message，用意是比較清楚與簡化。但，這可以自行評估使用，且看自己的需求。</p>\n</blockquote>\n<ul>\n<li>檢查Merge Message並進行修改，接著按下”<strong>Confirm squash and merge</strong>“進行提交</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/BJloMfCSzR.png\"\n                       \n                 ></p>\n<ul>\n<li>並且將這個已經合併的自己的舊分支刪除(如紅色箭頭)</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/BylHM0SMA.png\"\n                       \n                 ></p>\n<ul>\n<li>此時可以回去主頁面，查看是否已將舊分支刪除了</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/HJh9f0HzA.png\"\n                       \n                 ></p>\n<h3 id=\"Step-7－本地端切回主分支，並刪除自己的舊分支\"><a href=\"#Step-7－本地端切回主分支，並刪除自己的舊分支\" class=\"headerlink\" title=\"Step 7－本地端切回主分支，並刪除自己的舊分支\"></a>Step 7－本地端切回主分支，並刪除自己的舊分支</h3><ul>\n<li>先切到<em>develop</em></li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/ryJk70BzC.png\"\n                       \n                 ></p>\n<ul>\n<li>刪除本機自己的分支</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/S17-70SG0.png\"\n                       \n                 ></p>\n<ul>\n<li>刪除遠端自己的分支</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/SJNOm0Sf0.png\"\n                       \n                 ></p>\n<ul>\n<li>在當前分支(<em>develop</em>)進行”<strong>Sync</strong>“或”<strong>Pull</strong>“，亦即將當前分支更新為最新版本</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/HJ6V70SzA.png\"\n                       \n                 ></p>\n<ul>\n<li>查看紀錄，是否有更新為最新版的程式</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://hackmd.io/_uploads/H1uLXAHGC.png\"\n                       \n                 ></p>\n<p>:::info</p>\n<blockquote>\n<p><strong>恭喜完成！ 🎉</strong><br>:::</p>\n</blockquote>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>雖然步驟會比較麻煩，但這真的有助於團隊在合併程式碼時，可以更方便的合作。如果省略這樣的過程直接merge，無疑是殺雞取卵的作法，已經體驗過了，真的痛苦。</p>\n<p>另外，平常時，可以使用”<strong>Step 1</strong>~<strong>Step 5</strong>“，常態性的將自己的版本維持到線上的最新版本，減少衝突狀況出現。</p>\n"},{"title":"Arduino - Start Arduino in MacOS","date":"2024-04-06T15:50:15.000Z","updated":"2024-04-06T16:06:46.546Z","_content":"\n## Install Arduino IDE and test in MacOS\n\n1. Go to Arduino Office Website: [https://www.arduino.cc/en/software](https://www.arduino.cc/en/software), choosing the download option you need. Then, press the corresponding text button and download it.\n2. Install the IDE: after installation, double chick the \".dmg\" file. Then, pull the Arduino IDE icon to \"Applications\" to install the software.\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/2E0970F3-AF0A-4B24-8377-854F5EE2030E_2/VbhUKPZnBPe8yUwoUuDrEpgLKTpcV8iqq3pNtQfdFqEz/Image.png)\n\n3. Open the IDE from \"Launchpad （啟動台）\" and enjoy it!\n\n### Install Rosetta 2\n\n> Rosetta 2 enables a Mac with Apple silicon to use apps built for a Mac with an Intel processor.\n\n> From: [https://support.apple.com/en-us/102527](https://support.apple.com/en-us/102527)\n\nBecause Arduino development software is built for use on *x86-64* processors. So, we need to install Rosetta for it.\n\nHow to install. In terminal, we just command:\n\n```bash\nsoftwareupdate --install-rosetta --agree-to-license\n```\n\nDone!\n\n#### What if we don't install Rosetta\n\nI tested that before for you guys! If we uploaded Arduino code without Rosetta, it would show the compiled error like below content:\n\n```bash\nfork/exec /Users/user/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU type in executable\n\nCompilation error: fork/exec /Users/user/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU type in executable\n```\n\n---\n\n## Test with Arduino\n\n> Requirement Device:\n>\n> 1. Arduino device, e.g. Arduino UNO R3 board\n> 2. Cable: type A to type B USB\n> 3. USB hub (All in one to Type C USB)\n> 4. MacBook, e.g. MacBook Air M1\n\nTest Steps:\n\n1. Connect the Arduino device with cable and USB hub, like picture below:\n\n![Image](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/280DEF2D-FBF6-4AA1-BD2C-FCE72104F10B_2/ZV63HSlkZzmur55hTK0SQRJSyYBaliqF1EmvQNoooUUz/Image.heic)\n\nmake sure Arduino is worked (yellow light keeps flashing)\n\n2. Open the Arduino IDE, select the correct Board to connect to your device. After selecting, it will show up your type of Arduino, e.g. \"Arduino UNO\" for my case.\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/B3279C3D-6198-4A3C-88B6-781B19309C1F_2/nbg7gsE9aI14QGzdCgS6WYxTll1OGBf2T6srN3UboA0z/Image.png)\n\n3. Test with the example code: we will test the Arduino with code called \"Blink\", and this is a program make your Arduino LED blinking with delay time you set. We open the code from \"File\" > \"Examples\" > \"01.Basics\" > \"Blink\", and it will open a window for this code.\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/8816B92D-F5CC-4325-8F72-9834EA8D8B18_2/NB4doo3duzVP9zW4bC9pGfbJCzA0KauSYWwsh31WcFgz/Image.png)\n\n4. You can modify the delay time (I set 2 sec in this case), and then chick the \"right arrow\" button to upload the program into Arduino.\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/9797497F-9A05-4781-B132-E90B8314DA2A_2/jWva5Sm1dkPcV8xyYByrxmoOAmYC2Vi2fRxx6dhWAD4z/Image.png)\n\n5. If the LED on the Arduino turns on and off every two seconds, that is! Congratulations!\n\n## Conclusion\n\nThis is my first time playing with Arduino on MacOS. Initially, I thought it would be difficult to use Arduino with MacBooks, but I was wrong. Setting it up is as easy as it is on Windows. Finally, I can create some interesting things with my MacBook at home!","source":"_posts/arduino-start-up-withMacOS-md.md","raw":"---\ntitle: Arduino - Start Arduino in MacOS\ndate: 2024-04-06 23:50:15\nupdated:\ntags: arduino\ncategories: LifeDIY\n---\n\n## Install Arduino IDE and test in MacOS\n\n1. Go to Arduino Office Website: [https://www.arduino.cc/en/software](https://www.arduino.cc/en/software), choosing the download option you need. Then, press the corresponding text button and download it.\n2. Install the IDE: after installation, double chick the \".dmg\" file. Then, pull the Arduino IDE icon to \"Applications\" to install the software.\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/2E0970F3-AF0A-4B24-8377-854F5EE2030E_2/VbhUKPZnBPe8yUwoUuDrEpgLKTpcV8iqq3pNtQfdFqEz/Image.png)\n\n3. Open the IDE from \"Launchpad （啟動台）\" and enjoy it!\n\n### Install Rosetta 2\n\n> Rosetta 2 enables a Mac with Apple silicon to use apps built for a Mac with an Intel processor.\n\n> From: [https://support.apple.com/en-us/102527](https://support.apple.com/en-us/102527)\n\nBecause Arduino development software is built for use on *x86-64* processors. So, we need to install Rosetta for it.\n\nHow to install. In terminal, we just command:\n\n```bash\nsoftwareupdate --install-rosetta --agree-to-license\n```\n\nDone!\n\n#### What if we don't install Rosetta\n\nI tested that before for you guys! If we uploaded Arduino code without Rosetta, it would show the compiled error like below content:\n\n```bash\nfork/exec /Users/user/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU type in executable\n\nCompilation error: fork/exec /Users/user/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU type in executable\n```\n\n---\n\n## Test with Arduino\n\n> Requirement Device:\n>\n> 1. Arduino device, e.g. Arduino UNO R3 board\n> 2. Cable: type A to type B USB\n> 3. USB hub (All in one to Type C USB)\n> 4. MacBook, e.g. MacBook Air M1\n\nTest Steps:\n\n1. Connect the Arduino device with cable and USB hub, like picture below:\n\n![Image](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/280DEF2D-FBF6-4AA1-BD2C-FCE72104F10B_2/ZV63HSlkZzmur55hTK0SQRJSyYBaliqF1EmvQNoooUUz/Image.heic)\n\nmake sure Arduino is worked (yellow light keeps flashing)\n\n2. Open the Arduino IDE, select the correct Board to connect to your device. After selecting, it will show up your type of Arduino, e.g. \"Arduino UNO\" for my case.\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/B3279C3D-6198-4A3C-88B6-781B19309C1F_2/nbg7gsE9aI14QGzdCgS6WYxTll1OGBf2T6srN3UboA0z/Image.png)\n\n3. Test with the example code: we will test the Arduino with code called \"Blink\", and this is a program make your Arduino LED blinking with delay time you set. We open the code from \"File\" > \"Examples\" > \"01.Basics\" > \"Blink\", and it will open a window for this code.\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/8816B92D-F5CC-4325-8F72-9834EA8D8B18_2/NB4doo3duzVP9zW4bC9pGfbJCzA0KauSYWwsh31WcFgz/Image.png)\n\n4. You can modify the delay time (I set 2 sec in this case), and then chick the \"right arrow\" button to upload the program into Arduino.\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/9797497F-9A05-4781-B132-E90B8314DA2A_2/jWva5Sm1dkPcV8xyYByrxmoOAmYC2Vi2fRxx6dhWAD4z/Image.png)\n\n5. If the LED on the Arduino turns on and off every two seconds, that is! Congratulations!\n\n## Conclusion\n\nThis is my first time playing with Arduino on MacOS. Initially, I thought it would be difficult to use Arduino with MacBooks, but I was wrong. Setting it up is as easy as it is on Windows. Finally, I can create some interesting things with my MacBook at home!","slug":"arduino-start-up-withMacOS-md","published":1,"comments":1,"layout":"post","photos":[],"_id":"clybox2pe0003txzk6xqo03ni","content":"<h2 id=\"Install-Arduino-IDE-and-test-in-MacOS\"><a href=\"#Install-Arduino-IDE-and-test-in-MacOS\" class=\"headerlink\" title=\"Install Arduino IDE and test in MacOS\"></a>Install Arduino IDE and test in MacOS</h2><ol>\n<li>Go to Arduino Office Website: <a class=\"link\"   href=\"https://www.arduino.cc/en/software\" >https://www.arduino.cc/en/software<i class=\"fas fa-external-link-alt\"></i></a>, choosing the download option you need. Then, press the corresponding text button and download it.</li>\n<li>Install the IDE: after installation, double chick the “.dmg” file. Then, pull the Arduino IDE icon to “Applications” to install the software.</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/2E0970F3-AF0A-4B24-8377-854F5EE2030E_2/VbhUKPZnBPe8yUwoUuDrEpgLKTpcV8iqq3pNtQfdFqEz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ol start=\"3\">\n<li>Open the IDE from “Launchpad （啟動台）” and enjoy it!</li>\n</ol>\n<h3 id=\"Install-Rosetta-2\"><a href=\"#Install-Rosetta-2\" class=\"headerlink\" title=\"Install Rosetta 2\"></a>Install Rosetta 2</h3><blockquote>\n<p>Rosetta 2 enables a Mac with Apple silicon to use apps built for a Mac with an Intel processor.</p>\n</blockquote>\n<blockquote>\n<p>From: <a class=\"link\"   href=\"https://support.apple.com/en-us/102527\" >https://support.apple.com/en-us/102527<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>Because Arduino development software is built for use on <em>x86-64</em> processors. So, we need to install Rosetta for it.</p>\n<p>How to install. In terminal, we just command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">softwareupdate --install-rosetta --agree-to-license</span><br></pre></td></tr></table></figure>\n\n<p>Done!</p>\n<h4 id=\"What-if-we-don’t-install-Rosetta\"><a href=\"#What-if-we-don’t-install-Rosetta\" class=\"headerlink\" title=\"What if we don’t install Rosetta\"></a>What if we don’t install Rosetta</h4><p>I tested that before for you guys! If we uploaded Arduino code without Rosetta, it would show the compiled error like below content:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fork/exec /Users/user/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> executable</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation error: fork/exec /Users/user/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> executable</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Test-with-Arduino\"><a href=\"#Test-with-Arduino\" class=\"headerlink\" title=\"Test with Arduino\"></a>Test with Arduino</h2><blockquote>\n<p>Requirement Device:</p>\n<ol>\n<li>Arduino device, e.g. Arduino UNO R3 board</li>\n<li>Cable: type A to type B USB</li>\n<li>USB hub (All in one to Type C USB)</li>\n<li>MacBook, e.g. MacBook Air M1</li>\n</ol>\n</blockquote>\n<p>Test Steps:</p>\n<ol>\n<li>Connect the Arduino device with cable and USB hub, like picture below:</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/280DEF2D-FBF6-4AA1-BD2C-FCE72104F10B_2/ZV63HSlkZzmur55hTK0SQRJSyYBaliqF1EmvQNoooUUz/Image.heic\"\n                        alt=\"Image\"\n                 ></p>\n<p>make sure Arduino is worked (yellow light keeps flashing)</p>\n<ol start=\"2\">\n<li>Open the Arduino IDE, select the correct Board to connect to your device. After selecting, it will show up your type of Arduino, e.g. “Arduino UNO” for my case.</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/B3279C3D-6198-4A3C-88B6-781B19309C1F_2/nbg7gsE9aI14QGzdCgS6WYxTll1OGBf2T6srN3UboA0z/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ol start=\"3\">\n<li>Test with the example code: we will test the Arduino with code called “Blink”, and this is a program make your Arduino LED blinking with delay time you set. We open the code from “File” &gt; “Examples” &gt; “01.Basics” &gt; “Blink”, and it will open a window for this code.</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/8816B92D-F5CC-4325-8F72-9834EA8D8B18_2/NB4doo3duzVP9zW4bC9pGfbJCzA0KauSYWwsh31WcFgz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ol start=\"4\">\n<li>You can modify the delay time (I set 2 sec in this case), and then chick the “right arrow” button to upload the program into Arduino.</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/9797497F-9A05-4781-B132-E90B8314DA2A_2/jWva5Sm1dkPcV8xyYByrxmoOAmYC2Vi2fRxx6dhWAD4z/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ol start=\"5\">\n<li>If the LED on the Arduino turns on and off every two seconds, that is! Congratulations!</li>\n</ol>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This is my first time playing with Arduino on MacOS. Initially, I thought it would be difficult to use Arduino with MacBooks, but I was wrong. Setting it up is as easy as it is on Windows. Finally, I can create some interesting things with my MacBook at home!</p>\n","excerpt":"","more":"<h2 id=\"Install-Arduino-IDE-and-test-in-MacOS\"><a href=\"#Install-Arduino-IDE-and-test-in-MacOS\" class=\"headerlink\" title=\"Install Arduino IDE and test in MacOS\"></a>Install Arduino IDE and test in MacOS</h2><ol>\n<li>Go to Arduino Office Website: <a class=\"link\"   href=\"https://www.arduino.cc/en/software\" >https://www.arduino.cc/en/software<i class=\"fas fa-external-link-alt\"></i></a>, choosing the download option you need. Then, press the corresponding text button and download it.</li>\n<li>Install the IDE: after installation, double chick the “.dmg” file. Then, pull the Arduino IDE icon to “Applications” to install the software.</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/2E0970F3-AF0A-4B24-8377-854F5EE2030E_2/VbhUKPZnBPe8yUwoUuDrEpgLKTpcV8iqq3pNtQfdFqEz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ol start=\"3\">\n<li>Open the IDE from “Launchpad （啟動台）” and enjoy it!</li>\n</ol>\n<h3 id=\"Install-Rosetta-2\"><a href=\"#Install-Rosetta-2\" class=\"headerlink\" title=\"Install Rosetta 2\"></a>Install Rosetta 2</h3><blockquote>\n<p>Rosetta 2 enables a Mac with Apple silicon to use apps built for a Mac with an Intel processor.</p>\n</blockquote>\n<blockquote>\n<p>From: <a class=\"link\"   href=\"https://support.apple.com/en-us/102527\" >https://support.apple.com/en-us/102527<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>Because Arduino development software is built for use on <em>x86-64</em> processors. So, we need to install Rosetta for it.</p>\n<p>How to install. In terminal, we just command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">softwareupdate --install-rosetta --agree-to-license</span><br></pre></td></tr></table></figure>\n\n<p>Done!</p>\n<h4 id=\"What-if-we-don’t-install-Rosetta\"><a href=\"#What-if-we-don’t-install-Rosetta\" class=\"headerlink\" title=\"What if we don’t install Rosetta\"></a>What if we don’t install Rosetta</h4><p>I tested that before for you guys! If we uploaded Arduino code without Rosetta, it would show the compiled error like below content:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fork/exec /Users/user/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> executable</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation error: fork/exec /Users/user/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> executable</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Test-with-Arduino\"><a href=\"#Test-with-Arduino\" class=\"headerlink\" title=\"Test with Arduino\"></a>Test with Arduino</h2><blockquote>\n<p>Requirement Device:</p>\n<ol>\n<li>Arduino device, e.g. Arduino UNO R3 board</li>\n<li>Cable: type A to type B USB</li>\n<li>USB hub (All in one to Type C USB)</li>\n<li>MacBook, e.g. MacBook Air M1</li>\n</ol>\n</blockquote>\n<p>Test Steps:</p>\n<ol>\n<li>Connect the Arduino device with cable and USB hub, like picture below:</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/280DEF2D-FBF6-4AA1-BD2C-FCE72104F10B_2/ZV63HSlkZzmur55hTK0SQRJSyYBaliqF1EmvQNoooUUz/Image.heic\"\n                        alt=\"Image\"\n                 ></p>\n<p>make sure Arduino is worked (yellow light keeps flashing)</p>\n<ol start=\"2\">\n<li>Open the Arduino IDE, select the correct Board to connect to your device. After selecting, it will show up your type of Arduino, e.g. “Arduino UNO” for my case.</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/B3279C3D-6198-4A3C-88B6-781B19309C1F_2/nbg7gsE9aI14QGzdCgS6WYxTll1OGBf2T6srN3UboA0z/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ol start=\"3\">\n<li>Test with the example code: we will test the Arduino with code called “Blink”, and this is a program make your Arduino LED blinking with delay time you set. We open the code from “File” &gt; “Examples” &gt; “01.Basics” &gt; “Blink”, and it will open a window for this code.</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/8816B92D-F5CC-4325-8F72-9834EA8D8B18_2/NB4doo3duzVP9zW4bC9pGfbJCzA0KauSYWwsh31WcFgz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ol start=\"4\">\n<li>You can modify the delay time (I set 2 sec in this case), and then chick the “right arrow” button to upload the program into Arduino.</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/61CADF38-458F-423A-98E5-1E25311F4B40/9797497F-9A05-4781-B132-E90B8314DA2A_2/jWva5Sm1dkPcV8xyYByrxmoOAmYC2Vi2fRxx6dhWAD4z/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ol start=\"5\">\n<li>If the LED on the Arduino turns on and off every two seconds, that is! Congratulations!</li>\n</ol>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This is my first time playing with Arduino on MacOS. Initially, I thought it would be difficult to use Arduino with MacBooks, but I was wrong. Setting it up is as easy as it is on Windows. Finally, I can create some interesting things with my MacBook at home!</p>\n"},{"title":"Briefly Talk about C++ Class - Object Based","date":"2024-03-24T15:46:00.000Z","updated":"2024-03-24T15:48:30.795Z","_content":"\n> 本篇文章會簡單介紹，關於C++ Class類別的簡單概念與使用方法，說明其特色，讓讀者對C++ Class有初步的認識。\n\n## What is C++ Class\n\n- A class in C++ is a **user-defined** type or data structure declared with keyword class that has **data and functions**. (from Wiki)\n- C++ Class 我的體驗上，可以做好封裝、程式碼的區隔，在與人協作上會有很好的效果\n- 我們要如何實作C++的類別呢？我們分為兩個面向來探討\n   - *Object Based*: What kind of Class. How to build a Class. 會針對單一個Class，討論如何建構或規劃一個類別中的成員（member）\n   - *Object Oriented*: Relationship of multiple Classes. 會討論到**物件導向**的概念，著重於多個類別的交互作用關係\n- 本篇文章，會針對 *Object Based 來去做介紹喔！（有機會在討論另一個）*\n\n## How to Build a Class - Header File\n\n- 對於C++ Class，主要會有兩個相同名稱，但副檔名不同的檔案，一個是header file(.h)，另一個為source file(.cpp)\n   - *header file*: 作為類別成員宣告（declaration）之用，定義某個成員的原型(prototype)\n   - *source file*: 作為前述類別成員的定義(definition)，在header定義的成員會被連結到這裡來，查看並實作出對應的程式\n   - 但詳細的定義，會關乎C++的編譯行為，稍微複雜，有興趣的朋友們可以再做研究～\n- 以下就為各位介紹，Header File的各項成員：\n\n### Header File 標頭檔\n\n- 通常，標頭檔的副檔名，都會是 \"`.h`\" (header files for own)居多\n   - `#include<>`and `#include\"\"`\n      - `<>`: 用於編譯器定義之資料庫或C++標準資料庫，會優先到系統路徑做尋找\n      - `\"\"`:  用於自定義的標頭檔，或在同一層（或同個專案資料夾）中的資料庫或標頭檔\n      - 可以參考[這個](https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename)\n   - **Header Guard**\n      - 表示如下，目的是為了保護宣告名稱的“獨特性”，要**防止多重載入**的狀況發生\n\n```cpp\n/* complex.h */\n#ifndef COMPLEX_ /*如果之前都沒有定義COMPLEX_的話，進入以下程式碼區域；否則跳出*/ \n#define COMPLEX_\n\n// The contexts we write\n//\n//\n\n#endif\n```\n\n### Class Members Declaration 類別成員變數、函數定義\n\n```cpp\n/* Header file: complex.h */\n#ifndef COMPLEX_    // Header guard\n#define COMPLEX_\n\n#include <cmath>    // Include other header\n    \n////////////    \n/// class head\nclass Complex         // 1. 類－聲明: class declarations\n{\n/// class body\npublic:\n    Complex (double r = 0, double i = 0)\n        : re (r), im (i)\n        { }\n    Complex& operator += (const Complex&); // 定義放在body之外做定義\n    double real () const { return re; }    // 有些函數可以在此直接定義\n    double imag () const { return im; }    // 這種定義方式叫做內聯(inline)，優點是編譯速度快，但不能過於複雜\n    int Function (); // 自定義的函式\n    // 另外，回傳值前加入const，表示回傳值不可改變\nprivate:\n    double re, im;\n    \n};\n\n////////////\nint Complex::Function() {\n  ... // 2. 類－定義: class definition\n} \n\n#endif\n```\n\n對於標頭檔中的內容，這邊做個簡單的解釋，這邊大概分成三個部分：\n\n- **Header Guard**與**引用**：最上面的區域\n- **類別聲明（class declarations）**: 中間的部分，進行類別成員的聲明動作。在我看來，是在跟系統說「我有這個成員喔！」，接著就會自動引導到**類別定義（class definition）**去實作這個方法\n- **類別定義（class definitions）（optional）**: 通常，類別定義會出現在對應這個標頭檔的.cpp裏頭，但也可以定義在最下面這部分\n\n## How to Build a Class - Class Members\n\n以下會講解，成員函數或變數的相關知識，以及用法。\n\n我們首要提到的就是**成員存取控制（Access Levels）**，他會對每個類別成員，做存取控制的設定，做好**封裝（Encapsulation）**管理。\n\n### Access Levels\n\n| **Levels**    | **In Class** | **Out of Class** | **Can be inherited** |\n| ------------- | ------------ | ---------------- | -------------------- |\n| **public**    | 🆗           | 🆗               | 🆗                   |\n| **private**   | 🆗           | 🚫               | 🚫                   |\n| **protected** | 🆗           | 🚫               | 🆗                   |\n\n- 對上面表格的相關說明：\n   - 我們有三種存取控制階層，分別是`public` , `private` 以及`protected`\n   - 每個階層有其對應的存取範圍，分別是In class, out of class and Can be inherited\n      - **In Class**: 可以在本身自己的類別範圍內存取，存取範圍是最小的。其他類別或繼承他的類別，是無法知道他的存在\n      - **Out of Class**: 其他的類別，是可以存取這個類別成員的。好比眾所皆知的公眾人物\n      - **Can be inherited**: 表示自身，以及繼承該類別的子類別（又叫 **衍生類別**，derived class）可以進行存取。就像住在同一個屋簷下，兒子總會知道老爸的一些底細\n\n### Setter and Getter\n\n對於一個無法從外部取得，存取權限為`private` 的成員變數而言，為了要從外部存取該成員，我們常會加上Setter and Getter來對這個變數做存取管理。\n\n直接來看以下範例吧！\n\n```cpp\nclass Employee {\nprivate:\n    int salary_;\n    \npublic:\n    // Setter\n    void set_salary(int s) { salary_ = s; }\n\n    // Getter\n    int salary() const { return salary_; }\n    // or get_salary()...\n}\n```\n\n- 程式碼解說：\n   - 目的：我們對`Employee` 這個類別中的`salary_` 這個`private` 成員，設置Setter and Getter\n   - **Setter**: **變異子，**賦與值，對`salary_`進行寫入動作\n      - 深入探討：這個也可以寫成`void set_salary(const int& s) { salary_ = s; }`，觀察看到小括弧中的`const int&` 是對`s`做Pass by Reference to Constant，晚點會講到！\n   - **Getter**: **訪問子**，讀取值，對`salary_`進行數值的讀取\n      - 深入探討：小括弧跟上大括弧之間的`const` ，會強制以**常數方式**訪問的成員，比較安全，不會因為訪問而變動到這個數值\n\n### Inline Function\n\n**內嵌函數**，看到內嵌函數，只要記得：當程式碼呼叫到這個函數的話，經過**編譯器編譯**後，他會直接將他的定義，**插入並取代**調用他的地方，可以說在原地**展開**這個函數的定義。\n\n- 好處：節省了每次調用函數帶來的額外時間開支\n- 要注意的是，要進行內嵌的函數，不能夠**太複雜**，且**不能是遞回形式**，否則編譯器不會理我們\n\n以下為一個內嵌函數的範例：\n\n```cpp\nclass HelloWorld {\npublic:\n    void SayHello();\n}\n// Out of class\ninline void HelloWorld::SayHello() {\n    std::cout << \"Hello World!\" << std::endl;\n}\n```\n\n下面程式碼為編譯器的行為：\n\n```cpp\n///////// Before Compiled //////////\nint main() {\n    HelloWorld hw;\n    hw.SayHello();\n}\n///////// After Compiled //////////\nint main() {\n    HelloWorld hw;\n    //hw.SayHello();    // Directly extent here!\n    std::cout << \"Hello World!\" << std::endl;\n}\n```\n\n### Constructor and Destructor\n\n**建構子**，在類別中是一個重要的函數，當這個類別的物件（Object）被創建時（也就是在程式碼中要呼叫並創建該類別），編譯器總是會尋找跟這個類別匹配的建構子，自動執行建構子中的函數內容。\n\n這邊簡單講解幾點關於建構子的重點：\n\n- 建構子函數中，通常會執行：初始化類別中的參數，以及執行其他函數（檢查數值啊，讀取資料等等）\n- 建構子名稱必須跟類別名稱一樣；且建構子沒有回傳值（沒有return）\n- 相反的函數為**解構子**，意思是當這個類別的物件要被刪除（解構）時，會自動呼叫解構子\n- 如果一個類別沒有定義建構子或解構子時，會使用**編譯器預設**的建構子或解構子\n\n下面程式碼為String的建構子與解構子範例：\n\n```cpp\nString::String(const char* cstr = 0) // 建構子\n{\n    if (cstr) {    // 判別是否有值\n        m_data = new char[strlen(cstr)+1];    // 最後在+1 為結束符號'\\0'\n        strcpy(m_data, cstr);\n    }\n    else {    // 未指定初始值\n        m_data = new char[1];\n        *m_data = '\\0';\n    }\n}\n\nString::~String() // 解構子\n{\n    delete[] m_data;    // 之前是new一個array，因此這邊要刪除array []\n}\n```\n\n另，關於建構子，也會提到一個深入的觀念，叫做**Big of Three**三大函數：\n\n- **Constructor** (建構子):`String(const char* cstr=0)`\n1. **Destructor** (解構子): `~String()`\n2. **Copy constructor** (複製建構子): `String(const String& str)`\n3. **Copy assignment operator** (設定運算子): `String& operator=(const String& str)`\n\n在這邊不在做細述，有機會可以在做介紹～\n\n### Initialization List\n\n建構子中，初始化參數時，我們會較常使用Initialization List來對參數初始化，會有比較好的執行效能\n\n```cpp\nClass Point {\nprivate:\n    int x;\n    int y;\npublic:\n    Point(int i = 0, int j = 0)\n        :x(i), y(j)  // <== This is Initialization List\n    {\n        /*\n        Equal to: \n\t\tPoint(int i = 0, int j = 0) { \n\t\t\tx = i; \n\t\t\ty = j; \n\t\t} \n        */\n    }\n}\n```\n\n## Passing and Returning Values\n\n撰寫函數時，總會遇到**傳遞/回傳**數值的相關問題，以下列出主要的兩種傳遞方式：\n\n- **Pass/Return by value**: 被傳遞或回傳的參數值，是不會變動的，會維持原先的初始值。因為只是**複製並傳遞**當前的參數值進行操作\n   - 好處：原先的數值不會被變動，只是拷貝一份物件進到此函數中操作\n   - 可能的壞處：如果該物件過大時，如一個非常大的字串或struct，可能會影響執行效能，因為每次使用到都要拷貝一份過去\n- **Pass/Return by reference**: 傳遞或回傳的對象為這個物件（變數）的地址（Reference），因此當函數對此變數進行數值改動的話，原先的初始值會遭到變動，因為是直接到這個物件的地址去讀取或修改數值\n   - 好處：傳遞快速，不需要拷貝就可以參考到該變數\n   - 可能的壞處：一不小心會將數值修改到，可能會造成隱性的bug; 但可以依照使用情境，實作**Pass by Reference to Constant**來迴避這個壞處\n\n以下就來看看，他們怎麼實作吧！\n\n### Pass by Value\n\n```cpp\n//建構子中，傳遞的double值 r 以及 i\ncomplex (double r = 0, double i = 0)    // Here\n    : re (r), im (i)\n    { }\n```\n\n### Pass by Reference\n\n```cpp\n// ostream傳遞位址，os這個變數將會被改變\nostream&\noperator << (ostream& os, const Complex& x){    \n    return os << '(' << real (x) << ','\n              << imag (x) << ')';\n}\n```\n\n### Pass by Reference to Constant\n\n```cpp\nComplex& operator += (const Complex&);\n// += 右邊的變數，是被加的，不會改變其量值，因此加上const\n```\n\n### Return by Value\n\n```cpp\ndouble real () const { return re; }    // 回傳值，因其沒有位址\n```\n\n### Return by Reference\n\n```cpp\nComplex& operator += ( const Complex& );    // 回傳的值需要\"賦值\" 給變數\n```\n\n## Appendix - Smart Pointer\n\n可以用來取代傳統的pointer方法，更具有強健性、更加可靠，也可以自動做好內存管理，以避免memory leaking的問題\n\n```cpp\n#include <memory>\n\nint* a = new int(0);  // allocate memory\nint b = *a;           // dereference\ndelete a;             // release resource\n\n//////// Use Smart pointer ////////\nstd::unique_ptr<int> a( new int(0) );\n// or: std::unique_ptr<int> a = make_unique<int>(0);\nint b = *a;\n// NO NEED to release 'a'\n```\n\n## Appendix - Enum Class\n\n用來取代傳統的enum方法\n\n![WPBFLSn.png](https://i.imgur.com/WPBFLSn.png)\n\n## Appendix - Coding Style\n\n**Reference：**\n\n[https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html](https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html)\n\n## Reference\n\n[C++ 物件導向高級程式學習筆記](https://hackmd.io/@1_KXOGKTSJ-h5DpyHTXySg/rk5ki3auK)\n\n[科技讀蟲 C++ 建構子](https://yhtechnote.com/constructor/)\n\n[When do we use Initializer List in C++?](https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/)\n\n[[C++]內嵌函數（inline　function）筆記](https://dotblogs.com.tw/v6610688/2013/11/27/introduction_inline_function)\n\n[C++ Constructor後面的\":\"是什麼鬼意思？ (Initialization List 教學)](https://vinesmsuic.github.io/2020/01/09/c++-initializationlists/#initializer-list)\n\n[使用 enum class 取代傳統的 enum](https://kheresy.wordpress.com/2019/03/27/using-enum-class/)\n\n## 小結\n\n這篇文章的初稿，其實是我在公司與同事分享的ＰＰＴ；自己希望將這些重要的概念，寫成文章，將使用方法記錄下來，以便未來自己可以去重複複習，在創建一個類別時，可以有所依據。也希望可以幫助到有需要的朋友們！\n\n如果文章內容有錯誤的話，歡迎留言與我指教指教！\n\n","source":"_posts/cpp-breifly-talk-obj-base.md","raw":"---\ntitle: Briefly Talk about C++ Class - Object Based\ndate: 2024-03-24 23:46:00\nupdated:\ntags: c++\ncategories: Software\n---\n\n> 本篇文章會簡單介紹，關於C++ Class類別的簡單概念與使用方法，說明其特色，讓讀者對C++ Class有初步的認識。\n\n## What is C++ Class\n\n- A class in C++ is a **user-defined** type or data structure declared with keyword class that has **data and functions**. (from Wiki)\n- C++ Class 我的體驗上，可以做好封裝、程式碼的區隔，在與人協作上會有很好的效果\n- 我們要如何實作C++的類別呢？我們分為兩個面向來探討\n   - *Object Based*: What kind of Class. How to build a Class. 會針對單一個Class，討論如何建構或規劃一個類別中的成員（member）\n   - *Object Oriented*: Relationship of multiple Classes. 會討論到**物件導向**的概念，著重於多個類別的交互作用關係\n- 本篇文章，會針對 *Object Based 來去做介紹喔！（有機會在討論另一個）*\n\n## How to Build a Class - Header File\n\n- 對於C++ Class，主要會有兩個相同名稱，但副檔名不同的檔案，一個是header file(.h)，另一個為source file(.cpp)\n   - *header file*: 作為類別成員宣告（declaration）之用，定義某個成員的原型(prototype)\n   - *source file*: 作為前述類別成員的定義(definition)，在header定義的成員會被連結到這裡來，查看並實作出對應的程式\n   - 但詳細的定義，會關乎C++的編譯行為，稍微複雜，有興趣的朋友們可以再做研究～\n- 以下就為各位介紹，Header File的各項成員：\n\n### Header File 標頭檔\n\n- 通常，標頭檔的副檔名，都會是 \"`.h`\" (header files for own)居多\n   - `#include<>`and `#include\"\"`\n      - `<>`: 用於編譯器定義之資料庫或C++標準資料庫，會優先到系統路徑做尋找\n      - `\"\"`:  用於自定義的標頭檔，或在同一層（或同個專案資料夾）中的資料庫或標頭檔\n      - 可以參考[這個](https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename)\n   - **Header Guard**\n      - 表示如下，目的是為了保護宣告名稱的“獨特性”，要**防止多重載入**的狀況發生\n\n```cpp\n/* complex.h */\n#ifndef COMPLEX_ /*如果之前都沒有定義COMPLEX_的話，進入以下程式碼區域；否則跳出*/ \n#define COMPLEX_\n\n// The contexts we write\n//\n//\n\n#endif\n```\n\n### Class Members Declaration 類別成員變數、函數定義\n\n```cpp\n/* Header file: complex.h */\n#ifndef COMPLEX_    // Header guard\n#define COMPLEX_\n\n#include <cmath>    // Include other header\n    \n////////////    \n/// class head\nclass Complex         // 1. 類－聲明: class declarations\n{\n/// class body\npublic:\n    Complex (double r = 0, double i = 0)\n        : re (r), im (i)\n        { }\n    Complex& operator += (const Complex&); // 定義放在body之外做定義\n    double real () const { return re; }    // 有些函數可以在此直接定義\n    double imag () const { return im; }    // 這種定義方式叫做內聯(inline)，優點是編譯速度快，但不能過於複雜\n    int Function (); // 自定義的函式\n    // 另外，回傳值前加入const，表示回傳值不可改變\nprivate:\n    double re, im;\n    \n};\n\n////////////\nint Complex::Function() {\n  ... // 2. 類－定義: class definition\n} \n\n#endif\n```\n\n對於標頭檔中的內容，這邊做個簡單的解釋，這邊大概分成三個部分：\n\n- **Header Guard**與**引用**：最上面的區域\n- **類別聲明（class declarations）**: 中間的部分，進行類別成員的聲明動作。在我看來，是在跟系統說「我有這個成員喔！」，接著就會自動引導到**類別定義（class definition）**去實作這個方法\n- **類別定義（class definitions）（optional）**: 通常，類別定義會出現在對應這個標頭檔的.cpp裏頭，但也可以定義在最下面這部分\n\n## How to Build a Class - Class Members\n\n以下會講解，成員函數或變數的相關知識，以及用法。\n\n我們首要提到的就是**成員存取控制（Access Levels）**，他會對每個類別成員，做存取控制的設定，做好**封裝（Encapsulation）**管理。\n\n### Access Levels\n\n| **Levels**    | **In Class** | **Out of Class** | **Can be inherited** |\n| ------------- | ------------ | ---------------- | -------------------- |\n| **public**    | 🆗           | 🆗               | 🆗                   |\n| **private**   | 🆗           | 🚫               | 🚫                   |\n| **protected** | 🆗           | 🚫               | 🆗                   |\n\n- 對上面表格的相關說明：\n   - 我們有三種存取控制階層，分別是`public` , `private` 以及`protected`\n   - 每個階層有其對應的存取範圍，分別是In class, out of class and Can be inherited\n      - **In Class**: 可以在本身自己的類別範圍內存取，存取範圍是最小的。其他類別或繼承他的類別，是無法知道他的存在\n      - **Out of Class**: 其他的類別，是可以存取這個類別成員的。好比眾所皆知的公眾人物\n      - **Can be inherited**: 表示自身，以及繼承該類別的子類別（又叫 **衍生類別**，derived class）可以進行存取。就像住在同一個屋簷下，兒子總會知道老爸的一些底細\n\n### Setter and Getter\n\n對於一個無法從外部取得，存取權限為`private` 的成員變數而言，為了要從外部存取該成員，我們常會加上Setter and Getter來對這個變數做存取管理。\n\n直接來看以下範例吧！\n\n```cpp\nclass Employee {\nprivate:\n    int salary_;\n    \npublic:\n    // Setter\n    void set_salary(int s) { salary_ = s; }\n\n    // Getter\n    int salary() const { return salary_; }\n    // or get_salary()...\n}\n```\n\n- 程式碼解說：\n   - 目的：我們對`Employee` 這個類別中的`salary_` 這個`private` 成員，設置Setter and Getter\n   - **Setter**: **變異子，**賦與值，對`salary_`進行寫入動作\n      - 深入探討：這個也可以寫成`void set_salary(const int& s) { salary_ = s; }`，觀察看到小括弧中的`const int&` 是對`s`做Pass by Reference to Constant，晚點會講到！\n   - **Getter**: **訪問子**，讀取值，對`salary_`進行數值的讀取\n      - 深入探討：小括弧跟上大括弧之間的`const` ，會強制以**常數方式**訪問的成員，比較安全，不會因為訪問而變動到這個數值\n\n### Inline Function\n\n**內嵌函數**，看到內嵌函數，只要記得：當程式碼呼叫到這個函數的話，經過**編譯器編譯**後，他會直接將他的定義，**插入並取代**調用他的地方，可以說在原地**展開**這個函數的定義。\n\n- 好處：節省了每次調用函數帶來的額外時間開支\n- 要注意的是，要進行內嵌的函數，不能夠**太複雜**，且**不能是遞回形式**，否則編譯器不會理我們\n\n以下為一個內嵌函數的範例：\n\n```cpp\nclass HelloWorld {\npublic:\n    void SayHello();\n}\n// Out of class\ninline void HelloWorld::SayHello() {\n    std::cout << \"Hello World!\" << std::endl;\n}\n```\n\n下面程式碼為編譯器的行為：\n\n```cpp\n///////// Before Compiled //////////\nint main() {\n    HelloWorld hw;\n    hw.SayHello();\n}\n///////// After Compiled //////////\nint main() {\n    HelloWorld hw;\n    //hw.SayHello();    // Directly extent here!\n    std::cout << \"Hello World!\" << std::endl;\n}\n```\n\n### Constructor and Destructor\n\n**建構子**，在類別中是一個重要的函數，當這個類別的物件（Object）被創建時（也就是在程式碼中要呼叫並創建該類別），編譯器總是會尋找跟這個類別匹配的建構子，自動執行建構子中的函數內容。\n\n這邊簡單講解幾點關於建構子的重點：\n\n- 建構子函數中，通常會執行：初始化類別中的參數，以及執行其他函數（檢查數值啊，讀取資料等等）\n- 建構子名稱必須跟類別名稱一樣；且建構子沒有回傳值（沒有return）\n- 相反的函數為**解構子**，意思是當這個類別的物件要被刪除（解構）時，會自動呼叫解構子\n- 如果一個類別沒有定義建構子或解構子時，會使用**編譯器預設**的建構子或解構子\n\n下面程式碼為String的建構子與解構子範例：\n\n```cpp\nString::String(const char* cstr = 0) // 建構子\n{\n    if (cstr) {    // 判別是否有值\n        m_data = new char[strlen(cstr)+1];    // 最後在+1 為結束符號'\\0'\n        strcpy(m_data, cstr);\n    }\n    else {    // 未指定初始值\n        m_data = new char[1];\n        *m_data = '\\0';\n    }\n}\n\nString::~String() // 解構子\n{\n    delete[] m_data;    // 之前是new一個array，因此這邊要刪除array []\n}\n```\n\n另，關於建構子，也會提到一個深入的觀念，叫做**Big of Three**三大函數：\n\n- **Constructor** (建構子):`String(const char* cstr=0)`\n1. **Destructor** (解構子): `~String()`\n2. **Copy constructor** (複製建構子): `String(const String& str)`\n3. **Copy assignment operator** (設定運算子): `String& operator=(const String& str)`\n\n在這邊不在做細述，有機會可以在做介紹～\n\n### Initialization List\n\n建構子中，初始化參數時，我們會較常使用Initialization List來對參數初始化，會有比較好的執行效能\n\n```cpp\nClass Point {\nprivate:\n    int x;\n    int y;\npublic:\n    Point(int i = 0, int j = 0)\n        :x(i), y(j)  // <== This is Initialization List\n    {\n        /*\n        Equal to: \n\t\tPoint(int i = 0, int j = 0) { \n\t\t\tx = i; \n\t\t\ty = j; \n\t\t} \n        */\n    }\n}\n```\n\n## Passing and Returning Values\n\n撰寫函數時，總會遇到**傳遞/回傳**數值的相關問題，以下列出主要的兩種傳遞方式：\n\n- **Pass/Return by value**: 被傳遞或回傳的參數值，是不會變動的，會維持原先的初始值。因為只是**複製並傳遞**當前的參數值進行操作\n   - 好處：原先的數值不會被變動，只是拷貝一份物件進到此函數中操作\n   - 可能的壞處：如果該物件過大時，如一個非常大的字串或struct，可能會影響執行效能，因為每次使用到都要拷貝一份過去\n- **Pass/Return by reference**: 傳遞或回傳的對象為這個物件（變數）的地址（Reference），因此當函數對此變數進行數值改動的話，原先的初始值會遭到變動，因為是直接到這個物件的地址去讀取或修改數值\n   - 好處：傳遞快速，不需要拷貝就可以參考到該變數\n   - 可能的壞處：一不小心會將數值修改到，可能會造成隱性的bug; 但可以依照使用情境，實作**Pass by Reference to Constant**來迴避這個壞處\n\n以下就來看看，他們怎麼實作吧！\n\n### Pass by Value\n\n```cpp\n//建構子中，傳遞的double值 r 以及 i\ncomplex (double r = 0, double i = 0)    // Here\n    : re (r), im (i)\n    { }\n```\n\n### Pass by Reference\n\n```cpp\n// ostream傳遞位址，os這個變數將會被改變\nostream&\noperator << (ostream& os, const Complex& x){    \n    return os << '(' << real (x) << ','\n              << imag (x) << ')';\n}\n```\n\n### Pass by Reference to Constant\n\n```cpp\nComplex& operator += (const Complex&);\n// += 右邊的變數，是被加的，不會改變其量值，因此加上const\n```\n\n### Return by Value\n\n```cpp\ndouble real () const { return re; }    // 回傳值，因其沒有位址\n```\n\n### Return by Reference\n\n```cpp\nComplex& operator += ( const Complex& );    // 回傳的值需要\"賦值\" 給變數\n```\n\n## Appendix - Smart Pointer\n\n可以用來取代傳統的pointer方法，更具有強健性、更加可靠，也可以自動做好內存管理，以避免memory leaking的問題\n\n```cpp\n#include <memory>\n\nint* a = new int(0);  // allocate memory\nint b = *a;           // dereference\ndelete a;             // release resource\n\n//////// Use Smart pointer ////////\nstd::unique_ptr<int> a( new int(0) );\n// or: std::unique_ptr<int> a = make_unique<int>(0);\nint b = *a;\n// NO NEED to release 'a'\n```\n\n## Appendix - Enum Class\n\n用來取代傳統的enum方法\n\n![WPBFLSn.png](https://i.imgur.com/WPBFLSn.png)\n\n## Appendix - Coding Style\n\n**Reference：**\n\n[https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html](https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html)\n\n## Reference\n\n[C++ 物件導向高級程式學習筆記](https://hackmd.io/@1_KXOGKTSJ-h5DpyHTXySg/rk5ki3auK)\n\n[科技讀蟲 C++ 建構子](https://yhtechnote.com/constructor/)\n\n[When do we use Initializer List in C++?](https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/)\n\n[[C++]內嵌函數（inline　function）筆記](https://dotblogs.com.tw/v6610688/2013/11/27/introduction_inline_function)\n\n[C++ Constructor後面的\":\"是什麼鬼意思？ (Initialization List 教學)](https://vinesmsuic.github.io/2020/01/09/c++-initializationlists/#initializer-list)\n\n[使用 enum class 取代傳統的 enum](https://kheresy.wordpress.com/2019/03/27/using-enum-class/)\n\n## 小結\n\n這篇文章的初稿，其實是我在公司與同事分享的ＰＰＴ；自己希望將這些重要的概念，寫成文章，將使用方法記錄下來，以便未來自己可以去重複複習，在創建一個類別時，可以有所依據。也希望可以幫助到有需要的朋友們！\n\n如果文章內容有錯誤的話，歡迎留言與我指教指教！\n\n","slug":"cpp-breifly-talk-obj-base","published":1,"comments":1,"layout":"post","photos":[],"_id":"clybox2pg0006txzkagnt4dwk","content":"<blockquote>\n<p>本篇文章會簡單介紹，關於C++ Class類別的簡單概念與使用方法，說明其特色，讓讀者對C++ Class有初步的認識。</p>\n</blockquote>\n<h2 id=\"What-is-C-Class\"><a href=\"#What-is-C-Class\" class=\"headerlink\" title=\"What is C++ Class\"></a>What is C++ Class</h2><ul>\n<li>A class in C++ is a <strong>user-defined</strong> type or data structure declared with keyword class that has <strong>data and functions</strong>. (from Wiki)</li>\n<li>C++ Class 我的體驗上，可以做好封裝、程式碼的區隔，在與人協作上會有很好的效果</li>\n<li>我們要如何實作C++的類別呢？我們分為兩個面向來探討<ul>\n<li><em>Object Based</em>: What kind of Class. How to build a Class. 會針對單一個Class，討論如何建構或規劃一個類別中的成員（member）</li>\n<li><em>Object Oriented</em>: Relationship of multiple Classes. 會討論到<strong>物件導向</strong>的概念，著重於多個類別的交互作用關係</li>\n</ul>\n</li>\n<li>本篇文章，會針對 <em>Object Based 來去做介紹喔！（有機會在討論另一個）</em></li>\n</ul>\n<h2 id=\"How-to-Build-a-Class-Header-File\"><a href=\"#How-to-Build-a-Class-Header-File\" class=\"headerlink\" title=\"How to Build a Class - Header File\"></a>How to Build a Class - Header File</h2><ul>\n<li>對於C++ Class，主要會有兩個相同名稱，但副檔名不同的檔案，一個是header file(.h)，另一個為source file(.cpp)<ul>\n<li><em>header file</em>: 作為類別成員宣告（declaration）之用，定義某個成員的原型(prototype)</li>\n<li><em>source file</em>: 作為前述類別成員的定義(definition)，在header定義的成員會被連結到這裡來，查看並實作出對應的程式</li>\n<li>但詳細的定義，會關乎C++的編譯行為，稍微複雜，有興趣的朋友們可以再做研究～</li>\n</ul>\n</li>\n<li>以下就為各位介紹，Header File的各項成員：</li>\n</ul>\n<h3 id=\"Header-File-標頭檔\"><a href=\"#Header-File-標頭檔\" class=\"headerlink\" title=\"Header File 標頭檔\"></a>Header File 標頭檔</h3><ul>\n<li>通常，標頭檔的副檔名，都會是 “<code>.h</code>“ (header files for own)居多<ul>\n<li><code>#include&lt;&gt;</code>and <code>#include&quot;&quot;</code><ul>\n<li><code>&lt;&gt;</code>: 用於編譯器定義之資料庫或C++標準資料庫，會優先到系統路徑做尋找</li>\n<li><code>&quot;&quot;</code>:  用於自定義的標頭檔，或在同一層（或同個專案資料夾）中的資料庫或標頭檔</li>\n<li>可以參考<a class=\"link\"   href=\"https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename\" >這個<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n<li><strong>Header Guard</strong><ul>\n<li>表示如下，目的是為了保護宣告名稱的“獨特性”，要<strong>防止多重載入</strong>的狀況發生</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* complex.h */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> COMPLEX_ <span class=\"comment\">/*如果之前都沒有定義COMPLEX_的話，進入以下程式碼區域；否則跳出*/</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COMPLEX_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The contexts we write</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Class-Members-Declaration-類別成員變數、函數定義\"><a href=\"#Class-Members-Declaration-類別成員變數、函數定義\" class=\"headerlink\" title=\"Class Members Declaration 類別成員變數、函數定義\"></a>Class Members Declaration 類別成員變數、函數定義</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Header file: complex.h */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> COMPLEX_    <span class=\"comment\">// Header guard</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COMPLEX_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span>    <span class=\"comment\">// Include other header</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">////////////    </span></span><br><span class=\"line\"><span class=\"comment\">/// class head</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Complex</span>         <span class=\"comment\">// 1. 類－聲明: class declarations</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/// class body</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Complex</span> (<span class=\"type\">double</span> r = <span class=\"number\">0</span>, <span class=\"type\">double</span> i = <span class=\"number\">0</span>)</span><br><span class=\"line\">        : <span class=\"built_in\">re</span> (r), <span class=\"built_in\">im</span> (i)</span><br><span class=\"line\">        &#123; &#125;</span><br><span class=\"line\">    Complex&amp; <span class=\"keyword\">operator</span> += (<span class=\"type\">const</span> Complex&amp;); <span class=\"comment\">// 定義放在body之外做定義</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">real</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> re; &#125;    <span class=\"comment\">// 有些函數可以在此直接定義</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">imag</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> im; &#125;    <span class=\"comment\">// 這種定義方式叫做內聯(inline)，優點是編譯速度快，但不能過於複雜</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Function</span> <span class=\"params\">()</span></span>; <span class=\"comment\">// 自定義的函式</span></span><br><span class=\"line\">    <span class=\"comment\">// 另外，回傳值前加入const，表示回傳值不可改變</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">double</span> re, im;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////////////</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Complex::Function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// 2. 類－定義: class definition</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>對於標頭檔中的內容，這邊做個簡單的解釋，這邊大概分成三個部分：</p>\n<ul>\n<li><strong>Header Guard</strong>與<strong>引用</strong>：最上面的區域</li>\n<li><strong>類別聲明（class declarations）</strong>: 中間的部分，進行類別成員的聲明動作。在我看來，是在跟系統說「我有這個成員喔！」，接著就會自動引導到<strong>類別定義（class definition）</strong>去實作這個方法</li>\n<li><strong>類別定義（class definitions）（optional）</strong>: 通常，類別定義會出現在對應這個標頭檔的.cpp裏頭，但也可以定義在最下面這部分</li>\n</ul>\n<h2 id=\"How-to-Build-a-Class-Class-Members\"><a href=\"#How-to-Build-a-Class-Class-Members\" class=\"headerlink\" title=\"How to Build a Class - Class Members\"></a>How to Build a Class - Class Members</h2><p>以下會講解，成員函數或變數的相關知識，以及用法。</p>\n<p>我們首要提到的就是<strong>成員存取控制（Access Levels）</strong>，他會對每個類別成員，做存取控制的設定，做好<strong>封裝（Encapsulation）</strong>管理。</p>\n<h3 id=\"Access-Levels\"><a href=\"#Access-Levels\" class=\"headerlink\" title=\"Access Levels\"></a>Access Levels</h3><table>\n<thead>\n<tr>\n<th><strong>Levels</strong></th>\n<th><strong>In Class</strong></th>\n<th><strong>Out of Class</strong></th>\n<th><strong>Can be inherited</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>public</strong></td>\n<td>🆗</td>\n<td>🆗</td>\n<td>🆗</td>\n</tr>\n<tr>\n<td><strong>private</strong></td>\n<td>🆗</td>\n<td>🚫</td>\n<td>🚫</td>\n</tr>\n<tr>\n<td><strong>protected</strong></td>\n<td>🆗</td>\n<td>🚫</td>\n<td>🆗</td>\n</tr>\n</tbody></table>\n<ul>\n<li>對上面表格的相關說明：<ul>\n<li>我們有三種存取控制階層，分別是<code>public</code> , <code>private</code> 以及<code>protected</code></li>\n<li>每個階層有其對應的存取範圍，分別是In class, out of class and Can be inherited<ul>\n<li><strong>In Class</strong>: 可以在本身自己的類別範圍內存取，存取範圍是最小的。其他類別或繼承他的類別，是無法知道他的存在</li>\n<li><strong>Out of Class</strong>: 其他的類別，是可以存取這個類別成員的。好比眾所皆知的公眾人物</li>\n<li><strong>Can be inherited</strong>: 表示自身，以及繼承該類別的子類別（又叫 <strong>衍生類別</strong>，derived class）可以進行存取。就像住在同一個屋簷下，兒子總會知道老爸的一些底細</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Setter-and-Getter\"><a href=\"#Setter-and-Getter\" class=\"headerlink\" title=\"Setter and Getter\"></a>Setter and Getter</h3><p>對於一個無法從外部取得，存取權限為<code>private</code> 的成員變數而言，為了要從外部存取該成員，我們常會加上Setter and Getter來對這個變數做存取管理。</p>\n<p>直接來看以下範例吧！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> salary_;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// Setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_salary</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123; salary_ = s; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">salary</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> salary_; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// or get_salary()...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>程式碼解說：<ul>\n<li>目的：我們對<code>Employee</code> 這個類別中的<code>salary_</code> 這個<code>private</code> 成員，設置Setter and Getter</li>\n<li><strong>Setter</strong>: <strong>變異子，</strong>賦與值，對<code>salary_</code>進行寫入動作<ul>\n<li>深入探討：這個也可以寫成<code>void set_salary(const int&amp; s) &#123; salary_ = s; &#125;</code>，觀察看到小括弧中的<code>const int&amp;</code> 是對<code>s</code>做Pass by Reference to Constant，晚點會講到！</li>\n</ul>\n</li>\n<li><strong>Getter</strong>: <strong>訪問子</strong>，讀取值，對<code>salary_</code>進行數值的讀取<ul>\n<li>深入探討：小括弧跟上大括弧之間的<code>const</code> ，會強制以<strong>常數方式</strong>訪問的成員，比較安全，不會因為訪問而變動到這個數值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Inline-Function\"><a href=\"#Inline-Function\" class=\"headerlink\" title=\"Inline Function\"></a>Inline Function</h3><p><strong>內嵌函數</strong>，看到內嵌函數，只要記得：當程式碼呼叫到這個函數的話，經過<strong>編譯器編譯</strong>後，他會直接將他的定義，<strong>插入並取代</strong>調用他的地方，可以說在原地<strong>展開</strong>這個函數的定義。</p>\n<ul>\n<li>好處：節省了每次調用函數帶來的額外時間開支</li>\n<li>要注意的是，要進行內嵌的函數，不能夠<strong>太複雜</strong>，且<strong>不能是遞回形式</strong>，否則編譯器不會理我們</li>\n</ul>\n<p>以下為一個內嵌函數的範例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SayHello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Out of class</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">HelloWorld::SayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面程式碼為編譯器的行為：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///////// Before Compiled //////////</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HelloWorld hw;</span><br><span class=\"line\">    hw.<span class=\"built_in\">SayHello</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">///////// After Compiled //////////</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HelloWorld hw;</span><br><span class=\"line\">    <span class=\"comment\">//hw.SayHello();    // Directly extent here!</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Constructor-and-Destructor\"><a href=\"#Constructor-and-Destructor\" class=\"headerlink\" title=\"Constructor and Destructor\"></a>Constructor and Destructor</h3><p><strong>建構子</strong>，在類別中是一個重要的函數，當這個類別的物件（Object）被創建時（也就是在程式碼中要呼叫並創建該類別），編譯器總是會尋找跟這個類別匹配的建構子，自動執行建構子中的函數內容。</p>\n<p>這邊簡單講解幾點關於建構子的重點：</p>\n<ul>\n<li>建構子函數中，通常會執行：初始化類別中的參數，以及執行其他函數（檢查數值啊，讀取資料等等）</li>\n<li>建構子名稱必須跟類別名稱一樣；且建構子沒有回傳值（沒有return）</li>\n<li>相反的函數為<strong>解構子</strong>，意思是當這個類別的物件要被刪除（解構）時，會自動呼叫解構子</li>\n<li>如果一個類別沒有定義建構子或解構子時，會使用<strong>編譯器預設</strong>的建構子或解構子</li>\n</ul>\n<p>下面程式碼為String的建構子與解構子範例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String::<span class=\"built_in\">String</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* cstr = <span class=\"number\">0</span>) <span class=\"comment\">// 建構子</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cstr) &#123;    <span class=\"comment\">// 判別是否有值</span></span><br><span class=\"line\">        m_data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(cstr)+<span class=\"number\">1</span>];    <span class=\"comment\">// 最後在+1 為結束符號&#x27;\\0&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(m_data, cstr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;    <span class=\"comment\">// 未指定初始值</span></span><br><span class=\"line\">        m_data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        *m_data = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">String::~<span class=\"built_in\">String</span>() <span class=\"comment\">// 解構子</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] m_data;    <span class=\"comment\">// 之前是new一個array，因此這邊要刪除array []</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另，關於建構子，也會提到一個深入的觀念，叫做<strong>Big of Three</strong>三大函數：</p>\n<ul>\n<li><strong>Constructor</strong> (建構子):<code>String(const char* cstr=0)</code></li>\n</ul>\n<ol>\n<li><strong>Destructor</strong> (解構子): <code>~String()</code></li>\n<li><strong>Copy constructor</strong> (複製建構子): <code>String(const String&amp; str)</code></li>\n<li><strong>Copy assignment operator</strong> (設定運算子): <code>String&amp; operator=(const String&amp; str)</code></li>\n</ol>\n<p>在這邊不在做細述，有機會可以在做介紹～</p>\n<h3 id=\"Initialization-List\"><a href=\"#Initialization-List\" class=\"headerlink\" title=\"Initialization List\"></a>Initialization List</h3><p>建構子中，初始化參數時，我們會較常使用Initialization List來對參數初始化，會有比較好的執行效能</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Point &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">int</span> y;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>, <span class=\"type\">int</span> j = <span class=\"number\">0</span>)</span><br><span class=\"line\">        :<span class=\"built_in\">x</span>(i), <span class=\"built_in\">y</span>(j)  <span class=\"comment\">// &lt;== This is Initialization List</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        Equal to: </span></span><br><span class=\"line\"><span class=\"comment\">\t\tPoint(int i = 0, int j = 0) &#123; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tx = i; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\ty = j; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125; </span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Passing-and-Returning-Values\"><a href=\"#Passing-and-Returning-Values\" class=\"headerlink\" title=\"Passing and Returning Values\"></a>Passing and Returning Values</h2><p>撰寫函數時，總會遇到<strong>傳遞&#x2F;回傳</strong>數值的相關問題，以下列出主要的兩種傳遞方式：</p>\n<ul>\n<li><strong>Pass&#x2F;Return by value</strong>: 被傳遞或回傳的參數值，是不會變動的，會維持原先的初始值。因為只是<strong>複製並傳遞</strong>當前的參數值進行操作<ul>\n<li>好處：原先的數值不會被變動，只是拷貝一份物件進到此函數中操作</li>\n<li>可能的壞處：如果該物件過大時，如一個非常大的字串或struct，可能會影響執行效能，因為每次使用到都要拷貝一份過去</li>\n</ul>\n</li>\n<li><strong>Pass&#x2F;Return by reference</strong>: 傳遞或回傳的對象為這個物件（變數）的地址（Reference），因此當函數對此變數進行數值改動的話，原先的初始值會遭到變動，因為是直接到這個物件的地址去讀取或修改數值<ul>\n<li>好處：傳遞快速，不需要拷貝就可以參考到該變數</li>\n<li>可能的壞處：一不小心會將數值修改到，可能會造成隱性的bug; 但可以依照使用情境，實作<strong>Pass by Reference to Constant</strong>來迴避這個壞處</li>\n</ul>\n</li>\n</ul>\n<p>以下就來看看，他們怎麼實作吧！</p>\n<h3 id=\"Pass-by-Value\"><a href=\"#Pass-by-Value\" class=\"headerlink\" title=\"Pass by Value\"></a>Pass by Value</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建構子中，傳遞的double值 r 以及 i</span></span><br><span class=\"line\"><span class=\"built_in\">complex</span> (<span class=\"type\">double</span> r = <span class=\"number\">0</span>, <span class=\"type\">double</span> i = <span class=\"number\">0</span>)    <span class=\"comment\">// Here</span></span><br><span class=\"line\">    : <span class=\"built_in\">re</span> (r), <span class=\"built_in\">im</span> (i)</span><br><span class=\"line\">    &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pass-by-Reference\"><a href=\"#Pass-by-Reference\" class=\"headerlink\" title=\"Pass by Reference\"></a>Pass by Reference</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ostream傳遞位址，os這個變數將會被改變</span></span><br><span class=\"line\">ostream&amp;</span><br><span class=\"line\"><span class=\"keyword\">operator</span> &lt;&lt; (ostream&amp; os, <span class=\"type\">const</span> Complex&amp; x)&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">&#x27;(&#x27;</span> &lt;&lt; <span class=\"built_in\">real</span> (x) &lt;&lt; <span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">              &lt;&lt; <span class=\"built_in\">imag</span> (x) &lt;&lt; <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pass-by-Reference-to-Constant\"><a href=\"#Pass-by-Reference-to-Constant\" class=\"headerlink\" title=\"Pass by Reference to Constant\"></a>Pass by Reference to Constant</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Complex&amp; <span class=\"keyword\">operator</span> += (<span class=\"type\">const</span> Complex&amp;);</span><br><span class=\"line\"><span class=\"comment\">// += 右邊的變數，是被加的，不會改變其量值，因此加上const</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Return-by-Value\"><a href=\"#Return-by-Value\" class=\"headerlink\" title=\"Return by Value\"></a>Return by Value</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">real</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> re; &#125;    <span class=\"comment\">// 回傳值，因其沒有位址</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Return-by-Reference\"><a href=\"#Return-by-Reference\" class=\"headerlink\" title=\"Return by Reference\"></a>Return by Reference</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Complex&amp; <span class=\"keyword\">operator</span> += ( <span class=\"type\">const</span> Complex&amp; );    <span class=\"comment\">// 回傳的值需要&quot;賦值&quot; 給變數</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Appendix-Smart-Pointer\"><a href=\"#Appendix-Smart-Pointer\" class=\"headerlink\" title=\"Appendix - Smart Pointer\"></a>Appendix - Smart Pointer</h2><p>可以用來取代傳統的pointer方法，更具有強健性、更加可靠，也可以自動做好內存管理，以避免memory leaking的問題</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">0</span>);  <span class=\"comment\">// allocate memory</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = *a;           <span class=\"comment\">// dereference</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> a;             <span class=\"comment\">// release resource</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////// Use Smart pointer ////////</span></span><br><span class=\"line\"><span class=\"function\">std::unique_ptr&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">( <span class=\"keyword\">new</span> <span class=\"type\">int</span>(<span class=\"number\">0</span>) )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// or: std::unique_ptr&lt;int&gt; a = make_unique&lt;int&gt;(0);</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = *a;</span><br><span class=\"line\"><span class=\"comment\">// NO NEED to release &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Appendix-Enum-Class\"><a href=\"#Appendix-Enum-Class\" class=\"headerlink\" title=\"Appendix - Enum Class\"></a>Appendix - Enum Class</h2><p>用來取代傳統的enum方法</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://i.imgur.com/WPBFLSn.png\"\n                        alt=\"WPBFLSn.png\"\n                 ></p>\n<h2 id=\"Appendix-Coding-Style\"><a href=\"#Appendix-Coding-Style\" class=\"headerlink\" title=\"Appendix - Coding Style\"></a>Appendix - Coding Style</h2><p><strong>Reference：</strong></p>\n<p><a class=\"link\"   href=\"https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html\" >https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a class=\"link\"   href=\"https://hackmd.io/@1_KXOGKTSJ-h5DpyHTXySg/rk5ki3auK\" >C++ 物件導向高級程式學習筆記<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://yhtechnote.com/constructor/\" >科技讀蟲 C++ 建構子<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/\" >When do we use Initializer List in C++?<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://dotblogs.com.tw/v6610688/2013/11/27/introduction_inline_function\" >[C++]內嵌函數（inline　function）筆記<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://vinesmsuic.github.io/2020/01/09/c++-initializationlists/#initializer-list\" >C++ Constructor後面的”:”是什麼鬼意思？ (Initialization List 教學)<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://kheresy.wordpress.com/2019/03/27/using-enum-class/\" >使用 enum class 取代傳統的 enum<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>這篇文章的初稿，其實是我在公司與同事分享的ＰＰＴ；自己希望將這些重要的概念，寫成文章，將使用方法記錄下來，以便未來自己可以去重複複習，在創建一個類別時，可以有所依據。也希望可以幫助到有需要的朋友們！</p>\n<p>如果文章內容有錯誤的話，歡迎留言與我指教指教！</p>\n","excerpt":"","more":"<blockquote>\n<p>本篇文章會簡單介紹，關於C++ Class類別的簡單概念與使用方法，說明其特色，讓讀者對C++ Class有初步的認識。</p>\n</blockquote>\n<h2 id=\"What-is-C-Class\"><a href=\"#What-is-C-Class\" class=\"headerlink\" title=\"What is C++ Class\"></a>What is C++ Class</h2><ul>\n<li>A class in C++ is a <strong>user-defined</strong> type or data structure declared with keyword class that has <strong>data and functions</strong>. (from Wiki)</li>\n<li>C++ Class 我的體驗上，可以做好封裝、程式碼的區隔，在與人協作上會有很好的效果</li>\n<li>我們要如何實作C++的類別呢？我們分為兩個面向來探討<ul>\n<li><em>Object Based</em>: What kind of Class. How to build a Class. 會針對單一個Class，討論如何建構或規劃一個類別中的成員（member）</li>\n<li><em>Object Oriented</em>: Relationship of multiple Classes. 會討論到<strong>物件導向</strong>的概念，著重於多個類別的交互作用關係</li>\n</ul>\n</li>\n<li>本篇文章，會針對 <em>Object Based 來去做介紹喔！（有機會在討論另一個）</em></li>\n</ul>\n<h2 id=\"How-to-Build-a-Class-Header-File\"><a href=\"#How-to-Build-a-Class-Header-File\" class=\"headerlink\" title=\"How to Build a Class - Header File\"></a>How to Build a Class - Header File</h2><ul>\n<li>對於C++ Class，主要會有兩個相同名稱，但副檔名不同的檔案，一個是header file(.h)，另一個為source file(.cpp)<ul>\n<li><em>header file</em>: 作為類別成員宣告（declaration）之用，定義某個成員的原型(prototype)</li>\n<li><em>source file</em>: 作為前述類別成員的定義(definition)，在header定義的成員會被連結到這裡來，查看並實作出對應的程式</li>\n<li>但詳細的定義，會關乎C++的編譯行為，稍微複雜，有興趣的朋友們可以再做研究～</li>\n</ul>\n</li>\n<li>以下就為各位介紹，Header File的各項成員：</li>\n</ul>\n<h3 id=\"Header-File-標頭檔\"><a href=\"#Header-File-標頭檔\" class=\"headerlink\" title=\"Header File 標頭檔\"></a>Header File 標頭檔</h3><ul>\n<li>通常，標頭檔的副檔名，都會是 “<code>.h</code>“ (header files for own)居多<ul>\n<li><code>#include&lt;&gt;</code>and <code>#include&quot;&quot;</code><ul>\n<li><code>&lt;&gt;</code>: 用於編譯器定義之資料庫或C++標準資料庫，會優先到系統路徑做尋找</li>\n<li><code>&quot;&quot;</code>:  用於自定義的標頭檔，或在同一層（或同個專案資料夾）中的資料庫或標頭檔</li>\n<li>可以參考<a class=\"link\"   href=\"https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename\" >這個<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n<li><strong>Header Guard</strong><ul>\n<li>表示如下，目的是為了保護宣告名稱的“獨特性”，要<strong>防止多重載入</strong>的狀況發生</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* complex.h */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> COMPLEX_ <span class=\"comment\">/*如果之前都沒有定義COMPLEX_的話，進入以下程式碼區域；否則跳出*/</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COMPLEX_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The contexts we write</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Class-Members-Declaration-類別成員變數、函數定義\"><a href=\"#Class-Members-Declaration-類別成員變數、函數定義\" class=\"headerlink\" title=\"Class Members Declaration 類別成員變數、函數定義\"></a>Class Members Declaration 類別成員變數、函數定義</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Header file: complex.h */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> COMPLEX_    <span class=\"comment\">// Header guard</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COMPLEX_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span>    <span class=\"comment\">// Include other header</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">////////////    </span></span><br><span class=\"line\"><span class=\"comment\">/// class head</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Complex</span>         <span class=\"comment\">// 1. 類－聲明: class declarations</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/// class body</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Complex</span> (<span class=\"type\">double</span> r = <span class=\"number\">0</span>, <span class=\"type\">double</span> i = <span class=\"number\">0</span>)</span><br><span class=\"line\">        : <span class=\"built_in\">re</span> (r), <span class=\"built_in\">im</span> (i)</span><br><span class=\"line\">        &#123; &#125;</span><br><span class=\"line\">    Complex&amp; <span class=\"keyword\">operator</span> += (<span class=\"type\">const</span> Complex&amp;); <span class=\"comment\">// 定義放在body之外做定義</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">real</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> re; &#125;    <span class=\"comment\">// 有些函數可以在此直接定義</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">imag</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> im; &#125;    <span class=\"comment\">// 這種定義方式叫做內聯(inline)，優點是編譯速度快，但不能過於複雜</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Function</span> <span class=\"params\">()</span></span>; <span class=\"comment\">// 自定義的函式</span></span><br><span class=\"line\">    <span class=\"comment\">// 另外，回傳值前加入const，表示回傳值不可改變</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">double</span> re, im;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////////////</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Complex::Function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// 2. 類－定義: class definition</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>對於標頭檔中的內容，這邊做個簡單的解釋，這邊大概分成三個部分：</p>\n<ul>\n<li><strong>Header Guard</strong>與<strong>引用</strong>：最上面的區域</li>\n<li><strong>類別聲明（class declarations）</strong>: 中間的部分，進行類別成員的聲明動作。在我看來，是在跟系統說「我有這個成員喔！」，接著就會自動引導到<strong>類別定義（class definition）</strong>去實作這個方法</li>\n<li><strong>類別定義（class definitions）（optional）</strong>: 通常，類別定義會出現在對應這個標頭檔的.cpp裏頭，但也可以定義在最下面這部分</li>\n</ul>\n<h2 id=\"How-to-Build-a-Class-Class-Members\"><a href=\"#How-to-Build-a-Class-Class-Members\" class=\"headerlink\" title=\"How to Build a Class - Class Members\"></a>How to Build a Class - Class Members</h2><p>以下會講解，成員函數或變數的相關知識，以及用法。</p>\n<p>我們首要提到的就是<strong>成員存取控制（Access Levels）</strong>，他會對每個類別成員，做存取控制的設定，做好<strong>封裝（Encapsulation）</strong>管理。</p>\n<h3 id=\"Access-Levels\"><a href=\"#Access-Levels\" class=\"headerlink\" title=\"Access Levels\"></a>Access Levels</h3><table>\n<thead>\n<tr>\n<th><strong>Levels</strong></th>\n<th><strong>In Class</strong></th>\n<th><strong>Out of Class</strong></th>\n<th><strong>Can be inherited</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>public</strong></td>\n<td>🆗</td>\n<td>🆗</td>\n<td>🆗</td>\n</tr>\n<tr>\n<td><strong>private</strong></td>\n<td>🆗</td>\n<td>🚫</td>\n<td>🚫</td>\n</tr>\n<tr>\n<td><strong>protected</strong></td>\n<td>🆗</td>\n<td>🚫</td>\n<td>🆗</td>\n</tr>\n</tbody></table>\n<ul>\n<li>對上面表格的相關說明：<ul>\n<li>我們有三種存取控制階層，分別是<code>public</code> , <code>private</code> 以及<code>protected</code></li>\n<li>每個階層有其對應的存取範圍，分別是In class, out of class and Can be inherited<ul>\n<li><strong>In Class</strong>: 可以在本身自己的類別範圍內存取，存取範圍是最小的。其他類別或繼承他的類別，是無法知道他的存在</li>\n<li><strong>Out of Class</strong>: 其他的類別，是可以存取這個類別成員的。好比眾所皆知的公眾人物</li>\n<li><strong>Can be inherited</strong>: 表示自身，以及繼承該類別的子類別（又叫 <strong>衍生類別</strong>，derived class）可以進行存取。就像住在同一個屋簷下，兒子總會知道老爸的一些底細</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Setter-and-Getter\"><a href=\"#Setter-and-Getter\" class=\"headerlink\" title=\"Setter and Getter\"></a>Setter and Getter</h3><p>對於一個無法從外部取得，存取權限為<code>private</code> 的成員變數而言，為了要從外部存取該成員，我們常會加上Setter and Getter來對這個變數做存取管理。</p>\n<p>直接來看以下範例吧！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> salary_;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// Setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_salary</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123; salary_ = s; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">salary</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> salary_; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// or get_salary()...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>程式碼解說：<ul>\n<li>目的：我們對<code>Employee</code> 這個類別中的<code>salary_</code> 這個<code>private</code> 成員，設置Setter and Getter</li>\n<li><strong>Setter</strong>: <strong>變異子，</strong>賦與值，對<code>salary_</code>進行寫入動作<ul>\n<li>深入探討：這個也可以寫成<code>void set_salary(const int&amp; s) &#123; salary_ = s; &#125;</code>，觀察看到小括弧中的<code>const int&amp;</code> 是對<code>s</code>做Pass by Reference to Constant，晚點會講到！</li>\n</ul>\n</li>\n<li><strong>Getter</strong>: <strong>訪問子</strong>，讀取值，對<code>salary_</code>進行數值的讀取<ul>\n<li>深入探討：小括弧跟上大括弧之間的<code>const</code> ，會強制以<strong>常數方式</strong>訪問的成員，比較安全，不會因為訪問而變動到這個數值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Inline-Function\"><a href=\"#Inline-Function\" class=\"headerlink\" title=\"Inline Function\"></a>Inline Function</h3><p><strong>內嵌函數</strong>，看到內嵌函數，只要記得：當程式碼呼叫到這個函數的話，經過<strong>編譯器編譯</strong>後，他會直接將他的定義，<strong>插入並取代</strong>調用他的地方，可以說在原地<strong>展開</strong>這個函數的定義。</p>\n<ul>\n<li>好處：節省了每次調用函數帶來的額外時間開支</li>\n<li>要注意的是，要進行內嵌的函數，不能夠<strong>太複雜</strong>，且<strong>不能是遞回形式</strong>，否則編譯器不會理我們</li>\n</ul>\n<p>以下為一個內嵌函數的範例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SayHello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Out of class</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">HelloWorld::SayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面程式碼為編譯器的行為：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///////// Before Compiled //////////</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HelloWorld hw;</span><br><span class=\"line\">    hw.<span class=\"built_in\">SayHello</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">///////// After Compiled //////////</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HelloWorld hw;</span><br><span class=\"line\">    <span class=\"comment\">//hw.SayHello();    // Directly extent here!</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Constructor-and-Destructor\"><a href=\"#Constructor-and-Destructor\" class=\"headerlink\" title=\"Constructor and Destructor\"></a>Constructor and Destructor</h3><p><strong>建構子</strong>，在類別中是一個重要的函數，當這個類別的物件（Object）被創建時（也就是在程式碼中要呼叫並創建該類別），編譯器總是會尋找跟這個類別匹配的建構子，自動執行建構子中的函數內容。</p>\n<p>這邊簡單講解幾點關於建構子的重點：</p>\n<ul>\n<li>建構子函數中，通常會執行：初始化類別中的參數，以及執行其他函數（檢查數值啊，讀取資料等等）</li>\n<li>建構子名稱必須跟類別名稱一樣；且建構子沒有回傳值（沒有return）</li>\n<li>相反的函數為<strong>解構子</strong>，意思是當這個類別的物件要被刪除（解構）時，會自動呼叫解構子</li>\n<li>如果一個類別沒有定義建構子或解構子時，會使用<strong>編譯器預設</strong>的建構子或解構子</li>\n</ul>\n<p>下面程式碼為String的建構子與解構子範例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String::<span class=\"built_in\">String</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* cstr = <span class=\"number\">0</span>) <span class=\"comment\">// 建構子</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cstr) &#123;    <span class=\"comment\">// 判別是否有值</span></span><br><span class=\"line\">        m_data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(cstr)+<span class=\"number\">1</span>];    <span class=\"comment\">// 最後在+1 為結束符號&#x27;\\0&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(m_data, cstr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;    <span class=\"comment\">// 未指定初始值</span></span><br><span class=\"line\">        m_data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        *m_data = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">String::~<span class=\"built_in\">String</span>() <span class=\"comment\">// 解構子</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] m_data;    <span class=\"comment\">// 之前是new一個array，因此這邊要刪除array []</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另，關於建構子，也會提到一個深入的觀念，叫做<strong>Big of Three</strong>三大函數：</p>\n<ul>\n<li><strong>Constructor</strong> (建構子):<code>String(const char* cstr=0)</code></li>\n</ul>\n<ol>\n<li><strong>Destructor</strong> (解構子): <code>~String()</code></li>\n<li><strong>Copy constructor</strong> (複製建構子): <code>String(const String&amp; str)</code></li>\n<li><strong>Copy assignment operator</strong> (設定運算子): <code>String&amp; operator=(const String&amp; str)</code></li>\n</ol>\n<p>在這邊不在做細述，有機會可以在做介紹～</p>\n<h3 id=\"Initialization-List\"><a href=\"#Initialization-List\" class=\"headerlink\" title=\"Initialization List\"></a>Initialization List</h3><p>建構子中，初始化參數時，我們會較常使用Initialization List來對參數初始化，會有比較好的執行效能</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Point &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">int</span> y;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Point</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>, <span class=\"type\">int</span> j = <span class=\"number\">0</span>)</span><br><span class=\"line\">        :<span class=\"built_in\">x</span>(i), <span class=\"built_in\">y</span>(j)  <span class=\"comment\">// &lt;== This is Initialization List</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        Equal to: </span></span><br><span class=\"line\"><span class=\"comment\">\t\tPoint(int i = 0, int j = 0) &#123; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tx = i; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\ty = j; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125; </span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Passing-and-Returning-Values\"><a href=\"#Passing-and-Returning-Values\" class=\"headerlink\" title=\"Passing and Returning Values\"></a>Passing and Returning Values</h2><p>撰寫函數時，總會遇到<strong>傳遞&#x2F;回傳</strong>數值的相關問題，以下列出主要的兩種傳遞方式：</p>\n<ul>\n<li><strong>Pass&#x2F;Return by value</strong>: 被傳遞或回傳的參數值，是不會變動的，會維持原先的初始值。因為只是<strong>複製並傳遞</strong>當前的參數值進行操作<ul>\n<li>好處：原先的數值不會被變動，只是拷貝一份物件進到此函數中操作</li>\n<li>可能的壞處：如果該物件過大時，如一個非常大的字串或struct，可能會影響執行效能，因為每次使用到都要拷貝一份過去</li>\n</ul>\n</li>\n<li><strong>Pass&#x2F;Return by reference</strong>: 傳遞或回傳的對象為這個物件（變數）的地址（Reference），因此當函數對此變數進行數值改動的話，原先的初始值會遭到變動，因為是直接到這個物件的地址去讀取或修改數值<ul>\n<li>好處：傳遞快速，不需要拷貝就可以參考到該變數</li>\n<li>可能的壞處：一不小心會將數值修改到，可能會造成隱性的bug; 但可以依照使用情境，實作<strong>Pass by Reference to Constant</strong>來迴避這個壞處</li>\n</ul>\n</li>\n</ul>\n<p>以下就來看看，他們怎麼實作吧！</p>\n<h3 id=\"Pass-by-Value\"><a href=\"#Pass-by-Value\" class=\"headerlink\" title=\"Pass by Value\"></a>Pass by Value</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建構子中，傳遞的double值 r 以及 i</span></span><br><span class=\"line\"><span class=\"built_in\">complex</span> (<span class=\"type\">double</span> r = <span class=\"number\">0</span>, <span class=\"type\">double</span> i = <span class=\"number\">0</span>)    <span class=\"comment\">// Here</span></span><br><span class=\"line\">    : <span class=\"built_in\">re</span> (r), <span class=\"built_in\">im</span> (i)</span><br><span class=\"line\">    &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pass-by-Reference\"><a href=\"#Pass-by-Reference\" class=\"headerlink\" title=\"Pass by Reference\"></a>Pass by Reference</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ostream傳遞位址，os這個變數將會被改變</span></span><br><span class=\"line\">ostream&amp;</span><br><span class=\"line\"><span class=\"keyword\">operator</span> &lt;&lt; (ostream&amp; os, <span class=\"type\">const</span> Complex&amp; x)&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">&#x27;(&#x27;</span> &lt;&lt; <span class=\"built_in\">real</span> (x) &lt;&lt; <span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">              &lt;&lt; <span class=\"built_in\">imag</span> (x) &lt;&lt; <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pass-by-Reference-to-Constant\"><a href=\"#Pass-by-Reference-to-Constant\" class=\"headerlink\" title=\"Pass by Reference to Constant\"></a>Pass by Reference to Constant</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Complex&amp; <span class=\"keyword\">operator</span> += (<span class=\"type\">const</span> Complex&amp;);</span><br><span class=\"line\"><span class=\"comment\">// += 右邊的變數，是被加的，不會改變其量值，因此加上const</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Return-by-Value\"><a href=\"#Return-by-Value\" class=\"headerlink\" title=\"Return by Value\"></a>Return by Value</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">real</span> <span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> re; &#125;    <span class=\"comment\">// 回傳值，因其沒有位址</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Return-by-Reference\"><a href=\"#Return-by-Reference\" class=\"headerlink\" title=\"Return by Reference\"></a>Return by Reference</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Complex&amp; <span class=\"keyword\">operator</span> += ( <span class=\"type\">const</span> Complex&amp; );    <span class=\"comment\">// 回傳的值需要&quot;賦值&quot; 給變數</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Appendix-Smart-Pointer\"><a href=\"#Appendix-Smart-Pointer\" class=\"headerlink\" title=\"Appendix - Smart Pointer\"></a>Appendix - Smart Pointer</h2><p>可以用來取代傳統的pointer方法，更具有強健性、更加可靠，也可以自動做好內存管理，以避免memory leaking的問題</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">0</span>);  <span class=\"comment\">// allocate memory</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = *a;           <span class=\"comment\">// dereference</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> a;             <span class=\"comment\">// release resource</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////// Use Smart pointer ////////</span></span><br><span class=\"line\"><span class=\"function\">std::unique_ptr&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">( <span class=\"keyword\">new</span> <span class=\"type\">int</span>(<span class=\"number\">0</span>) )</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// or: std::unique_ptr&lt;int&gt; a = make_unique&lt;int&gt;(0);</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = *a;</span><br><span class=\"line\"><span class=\"comment\">// NO NEED to release &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Appendix-Enum-Class\"><a href=\"#Appendix-Enum-Class\" class=\"headerlink\" title=\"Appendix - Enum Class\"></a>Appendix - Enum Class</h2><p>用來取代傳統的enum方法</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://i.imgur.com/WPBFLSn.png\"\n                        alt=\"WPBFLSn.png\"\n                 ></p>\n<h2 id=\"Appendix-Coding-Style\"><a href=\"#Appendix-Coding-Style\" class=\"headerlink\" title=\"Appendix - Coding Style\"></a>Appendix - Coding Style</h2><p><strong>Reference：</strong></p>\n<p><a class=\"link\"   href=\"https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html\" >https://tw-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a class=\"link\"   href=\"https://hackmd.io/@1_KXOGKTSJ-h5DpyHTXySg/rk5ki3auK\" >C++ 物件導向高級程式學習筆記<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://yhtechnote.com/constructor/\" >科技讀蟲 C++ 建構子<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/\" >When do we use Initializer List in C++?<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://dotblogs.com.tw/v6610688/2013/11/27/introduction_inline_function\" >[C++]內嵌函數（inline　function）筆記<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://vinesmsuic.github.io/2020/01/09/c++-initializationlists/#initializer-list\" >C++ Constructor後面的”:”是什麼鬼意思？ (Initialization List 教學)<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://kheresy.wordpress.com/2019/03/27/using-enum-class/\" >使用 enum class 取代傳統的 enum<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>這篇文章的初稿，其實是我在公司與同事分享的ＰＰＴ；自己希望將這些重要的概念，寫成文章，將使用方法記錄下來，以便未來自己可以去重複複習，在創建一個類別時，可以有所依據。也希望可以幫助到有需要的朋友們！</p>\n<p>如果文章內容有錯誤的話，歡迎留言與我指教指教！</p>\n"},{"title":"DLAI - ChatGPT API [I] - Language Models, the Chat Format and Tokens","date":"2024-04-15T15:32:01.000Z","updated":"2024-04-15T15:36:02.794Z","_content":"\n\n> Link: [DLAI - Building Systems with the ChatGPT API](https://learn.deeplearning.ai/courses/chatgpt-building-system/lesson/2/language-models%2C-the-chat-format-and-tokens)\n\n# Language Models, the Chat Format and Tokens\n\n- LLM在互動過程，是一直依據前面的Input X(前面的句子)，來預測下一個字詞Output Y\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/f06b8c53-5281-4692-a3fb-3c7465afb37b)\n\n## Tokens\n\n```plaintext\n[Learning][ new][ things][ is][ fun][!]    // [] is one \"token\"\n```\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/01c20d21-4b1d-4736-a006-e5f9df60c510)\n\n## 三大提示詞－System, User and Assistant Message\n\n1. System: sets tone/behavior of assistant. 領先於User and Assistant的提示，會去定義GPT的回答方式或回答行為\n   - System 的提示詞，有多種提示用法：\n      - 調整回答長度，或者做角色扮演\n1. Assistant: Chat model / LLM response. 亦即ChatGPT的回答，可以先定義前面的提示句，後面讓ChatGPT來完成他\n2. User: YOU，也就是使用者的prompt，就問他問題\n\n```python\nmessages =  [  \n{'role':'system', \n 'content':\"\"\"You are an assistant who\\\n responds in the style of Dr Seuss.\"\"\"}, \n# {\n#   'role':'assistant',\n#   'content':\"\"\"...\"\"\"\n# },\n{'role':'user', \n 'content':\"\"\"write me a very short poem\\\n about a happy carrot\"\"\"},  \n]\n```\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/5df2ba83-1aae-4809-96c9-49f536f3c336)\n\n### API Key\n\n- There is more secure way to use API Key\n\n```python\nfrom dotenv import load_dotenv, find_dotenv\n\n_ = load_dotenv(find_dotenv())    # read local .env file\nimport os\nimport openai\n\nopenai.api_key = os.getenv('OPENAP_API_KEY')\n```\n\n### Revolutionizing AI Application\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/42c90de6-ca0b-4045-9e5c-656e1d7c94ff)\n\n多虧AI的革新，我們可以快速去使用相關的API，用非常簡短的時間來完成大型語言模型的調教，更快部屬到應用端。\n\n## 如何使用API－Call Methods\n\n### Function: `get_completion`\n\n```python\nclient = openai.OpenAI()\n\ndef get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = client.chat.completions.create(\n        model=model,\n        messages=messages,\n        temperature=0  # this is the degree of randomness of the model's output \n    )\n    return response.choices[0].message.content\n```\n\n### Function: `get_completion_from_messages`\n\n```python\ndef get_completion_and_token_count(messages, \n                                   model=\"gpt-3.5-turbo\", \n                                   temperature=0, \n                                   max_tokens=500):\n    \n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature, \n        max_tokens=max_tokens,\n    )\n    \n    content = response.choices[0].message[\"content\"]\n    \n    token_dict = {\n'prompt_tokens':response['usage']['prompt_tokens'],\n'completion_tokens':response['usage']['completion_tokens'],\n'total_tokens':response['usage']['total_tokens'],\n    }\n\n    return content, token_dict\n##################################################################\nmessages = [\n{'role':'system', \n 'content':\"\"\"You are an assistant who responds\\\n in the style of Dr Seuss.\"\"\"},    \n{'role':'user',\n 'content':\"\"\"write me a very short poem \\ \n about a happy carrot\"\"\"},  \n] \nresponse, token_dict = get_completion_and_token_count(messages)\n```\n\n---\n\n# Exercise: 星座描述應答\n\n### 軟體概念呈現\n\n- **Motivation & Objective**: 讓不清楚生日對應甚麼星座的人們，方便查詢星座與該星座的相關細節; 讓使用者可以方便查詢且易於顯示\n- **Input**: 使用者只要輸入 [綽號] 與 [生日日期]\n- **Output**: 以表格方式顯示：[對應星座] [星座月份日期] [星座性格特質] [優缺點] [愛情觀/感情觀]，並以表格的方式呈現\n\n### 程式碼實作\n\n> 環境使用課程中提供的Jupyter note book 進行案例實作\n\n```python\nimport os\nimport openai\nimport tiktoken\nfrom IPython.display import display, Markdown, Latex, HTML, JSON\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv()) # read local .env file\n\nopenai.api_key  = os.environ['OPENAI_API_KEY']\n\n# OpenAI API Function Definition\ndef get_completion_from_messages(messages, \n                                 model=\"gpt-3.5-turbo\", \n                                 temperature=0, \n                                 max_tokens=500):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature, # this is the degree of randomness of the model's output\n        max_tokens=max_tokens, # the maximum number of tokens the model can ouptut \n    )\n    return response.choices[0].message[\"content\"]\n\n# Message Definition: System role and User role\nmessages =  [  \n{'role':'system', \n 'content':\"\"\"You are an assistant who\\\n responds in the style of an professional astrologer.\\\n User will give you his/her nickname and their birthday.\\\n Your goal is reply user that what the star sign they are,\\\n and response the below items:\\\n 1. What star sign?\\\n 2. The date period of the star sign.\\\n 3. Character traits of the star sign.\\\n 4. Advantages and Disadvantages of the star sign.\\\n 5. View of love/view of feelings of the star sign.\\\n Please response them with a table style in HTML structure.\"\"\"},    \n{'role':'user', \n 'content':\"\"\"Nickname: Jimmy, Birthday: eighth, Dec\"\"\"},  \n] \n\n# Output\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\ndisplay(HTML(response))\n```\n\n### 輸出結果\n\n#### HTML Code\n\n```html\n<table>\n    <tr>\n        <td>1. Star Sign:</td>\n        <td>Sagittarius</td>\n    </tr>\n    <tr>\n        <td>2. Date Period:</td>\n        <td>November 22 - December 21</td>\n    </tr>\n    <tr>\n        <td>3. Character Traits:</td>\n        <td>Adventurous, independent, optimistic, generous, and philosophical.</td>\n    </tr>\n    <tr>\n        <td>4. Advantages:</td>\n        <td>Enthusiastic, open-minded, and great sense of humor.</td>\n    </tr>\n    <tr>\n        <td>Disadvantages:</td>\n        <td>Impatient, tactless, and prone to taking risks.</td>\n    </tr>\n    <tr>\n        <td>5. View of Love/Feelings:</td>\n        <td>Sagittarians value freedom and honesty in relationships, often seeking excitement and new experiences. They may struggle with commitment but are loyal and passionate partners.</td>\n    </tr>\n</table>\n```\n\n#### Output View\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/67012c22-61e3-49c0-b82f-166d23a38a21)\n\n---\n\n## Conclusion\n\n以上就是這次的課程筆記。按照課程步驟，在一次體會到提示工程的重要性，良好並完整的提示，對LLM模型的回答而言是很有幫助的。未來，有機會建置屬於自己的API時，`system role` 的提示詞也要多用點心來撰寫。\n\n另外，我自己有直接使用 OpenAI API 直接在本地端進行實作，測試過程中發現：使用本地端API沒有免費的使用權限(需要$$)；有鑑於現階段尚無需求，那就先蹭一下課程的API吧~","source":"_posts/dlai-chatgpt-api-course-1-md.md","raw":"---\ntitle: DLAI - ChatGPT API [I] - Language Models, the Chat Format and Tokens\ndate: 2024-04-15 23:32:01\nupdated:\ntags: llm/gpt\ncategories: software\n---\n\n\n> Link: [DLAI - Building Systems with the ChatGPT API](https://learn.deeplearning.ai/courses/chatgpt-building-system/lesson/2/language-models%2C-the-chat-format-and-tokens)\n\n# Language Models, the Chat Format and Tokens\n\n- LLM在互動過程，是一直依據前面的Input X(前面的句子)，來預測下一個字詞Output Y\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/f06b8c53-5281-4692-a3fb-3c7465afb37b)\n\n## Tokens\n\n```plaintext\n[Learning][ new][ things][ is][ fun][!]    // [] is one \"token\"\n```\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/01c20d21-4b1d-4736-a006-e5f9df60c510)\n\n## 三大提示詞－System, User and Assistant Message\n\n1. System: sets tone/behavior of assistant. 領先於User and Assistant的提示，會去定義GPT的回答方式或回答行為\n   - System 的提示詞，有多種提示用法：\n      - 調整回答長度，或者做角色扮演\n1. Assistant: Chat model / LLM response. 亦即ChatGPT的回答，可以先定義前面的提示句，後面讓ChatGPT來完成他\n2. User: YOU，也就是使用者的prompt，就問他問題\n\n```python\nmessages =  [  \n{'role':'system', \n 'content':\"\"\"You are an assistant who\\\n responds in the style of Dr Seuss.\"\"\"}, \n# {\n#   'role':'assistant',\n#   'content':\"\"\"...\"\"\"\n# },\n{'role':'user', \n 'content':\"\"\"write me a very short poem\\\n about a happy carrot\"\"\"},  \n]\n```\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/5df2ba83-1aae-4809-96c9-49f536f3c336)\n\n### API Key\n\n- There is more secure way to use API Key\n\n```python\nfrom dotenv import load_dotenv, find_dotenv\n\n_ = load_dotenv(find_dotenv())    # read local .env file\nimport os\nimport openai\n\nopenai.api_key = os.getenv('OPENAP_API_KEY')\n```\n\n### Revolutionizing AI Application\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/42c90de6-ca0b-4045-9e5c-656e1d7c94ff)\n\n多虧AI的革新，我們可以快速去使用相關的API，用非常簡短的時間來完成大型語言模型的調教，更快部屬到應用端。\n\n## 如何使用API－Call Methods\n\n### Function: `get_completion`\n\n```python\nclient = openai.OpenAI()\n\ndef get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = client.chat.completions.create(\n        model=model,\n        messages=messages,\n        temperature=0  # this is the degree of randomness of the model's output \n    )\n    return response.choices[0].message.content\n```\n\n### Function: `get_completion_from_messages`\n\n```python\ndef get_completion_and_token_count(messages, \n                                   model=\"gpt-3.5-turbo\", \n                                   temperature=0, \n                                   max_tokens=500):\n    \n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature, \n        max_tokens=max_tokens,\n    )\n    \n    content = response.choices[0].message[\"content\"]\n    \n    token_dict = {\n'prompt_tokens':response['usage']['prompt_tokens'],\n'completion_tokens':response['usage']['completion_tokens'],\n'total_tokens':response['usage']['total_tokens'],\n    }\n\n    return content, token_dict\n##################################################################\nmessages = [\n{'role':'system', \n 'content':\"\"\"You are an assistant who responds\\\n in the style of Dr Seuss.\"\"\"},    \n{'role':'user',\n 'content':\"\"\"write me a very short poem \\ \n about a happy carrot\"\"\"},  \n] \nresponse, token_dict = get_completion_and_token_count(messages)\n```\n\n---\n\n# Exercise: 星座描述應答\n\n### 軟體概念呈現\n\n- **Motivation & Objective**: 讓不清楚生日對應甚麼星座的人們，方便查詢星座與該星座的相關細節; 讓使用者可以方便查詢且易於顯示\n- **Input**: 使用者只要輸入 [綽號] 與 [生日日期]\n- **Output**: 以表格方式顯示：[對應星座] [星座月份日期] [星座性格特質] [優缺點] [愛情觀/感情觀]，並以表格的方式呈現\n\n### 程式碼實作\n\n> 環境使用課程中提供的Jupyter note book 進行案例實作\n\n```python\nimport os\nimport openai\nimport tiktoken\nfrom IPython.display import display, Markdown, Latex, HTML, JSON\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv()) # read local .env file\n\nopenai.api_key  = os.environ['OPENAI_API_KEY']\n\n# OpenAI API Function Definition\ndef get_completion_from_messages(messages, \n                                 model=\"gpt-3.5-turbo\", \n                                 temperature=0, \n                                 max_tokens=500):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature, # this is the degree of randomness of the model's output\n        max_tokens=max_tokens, # the maximum number of tokens the model can ouptut \n    )\n    return response.choices[0].message[\"content\"]\n\n# Message Definition: System role and User role\nmessages =  [  \n{'role':'system', \n 'content':\"\"\"You are an assistant who\\\n responds in the style of an professional astrologer.\\\n User will give you his/her nickname and their birthday.\\\n Your goal is reply user that what the star sign they are,\\\n and response the below items:\\\n 1. What star sign?\\\n 2. The date period of the star sign.\\\n 3. Character traits of the star sign.\\\n 4. Advantages and Disadvantages of the star sign.\\\n 5. View of love/view of feelings of the star sign.\\\n Please response them with a table style in HTML structure.\"\"\"},    \n{'role':'user', \n 'content':\"\"\"Nickname: Jimmy, Birthday: eighth, Dec\"\"\"},  \n] \n\n# Output\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\ndisplay(HTML(response))\n```\n\n### 輸出結果\n\n#### HTML Code\n\n```html\n<table>\n    <tr>\n        <td>1. Star Sign:</td>\n        <td>Sagittarius</td>\n    </tr>\n    <tr>\n        <td>2. Date Period:</td>\n        <td>November 22 - December 21</td>\n    </tr>\n    <tr>\n        <td>3. Character Traits:</td>\n        <td>Adventurous, independent, optimistic, generous, and philosophical.</td>\n    </tr>\n    <tr>\n        <td>4. Advantages:</td>\n        <td>Enthusiastic, open-minded, and great sense of humor.</td>\n    </tr>\n    <tr>\n        <td>Disadvantages:</td>\n        <td>Impatient, tactless, and prone to taking risks.</td>\n    </tr>\n    <tr>\n        <td>5. View of Love/Feelings:</td>\n        <td>Sagittarians value freedom and honesty in relationships, often seeking excitement and new experiences. They may struggle with commitment but are loyal and passionate partners.</td>\n    </tr>\n</table>\n```\n\n#### Output View\n\n![image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/67012c22-61e3-49c0-b82f-166d23a38a21)\n\n---\n\n## Conclusion\n\n以上就是這次的課程筆記。按照課程步驟，在一次體會到提示工程的重要性，良好並完整的提示，對LLM模型的回答而言是很有幫助的。未來，有機會建置屬於自己的API時，`system role` 的提示詞也要多用點心來撰寫。\n\n另外，我自己有直接使用 OpenAI API 直接在本地端進行實作，測試過程中發現：使用本地端API沒有免費的使用權限(需要$$)；有鑑於現階段尚無需求，那就先蹭一下課程的API吧~","slug":"dlai-chatgpt-api-course-1-md","published":1,"comments":1,"layout":"post","photos":[],"_id":"clybox2pg0007txzk5rqg1pha","content":"<blockquote>\n<p>Link: <a class=\"link\"   href=\"https://learn.deeplearning.ai/courses/chatgpt-building-system/lesson/2/language-models%2C-the-chat-format-and-tokens\" >DLAI - Building Systems with the ChatGPT API<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h1 id=\"Language-Models-the-Chat-Format-and-Tokens\"><a href=\"#Language-Models-the-Chat-Format-and-Tokens\" class=\"headerlink\" title=\"Language Models, the Chat Format and Tokens\"></a>Language Models, the Chat Format and Tokens</h1><ul>\n<li>LLM在互動過程，是一直依據前面的Input X(前面的句子)，來預測下一個字詞Output Y</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/f06b8c53-5281-4692-a3fb-3c7465afb37b\"\n                        alt=\"image.png\"\n                 ></p>\n<h2 id=\"Tokens\"><a href=\"#Tokens\" class=\"headerlink\" title=\"Tokens\"></a>Tokens</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Learning][ new][ things][ is][ fun][!]    // [] is one &quot;token&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/01c20d21-4b1d-4736-a006-e5f9df60c510\"\n                        alt=\"image.png\"\n                 ></p>\n<h2 id=\"三大提示詞－System-User-and-Assistant-Message\"><a href=\"#三大提示詞－System-User-and-Assistant-Message\" class=\"headerlink\" title=\"三大提示詞－System, User and Assistant Message\"></a>三大提示詞－System, User and Assistant Message</h2><ol>\n<li>System: sets tone&#x2F;behavior of assistant. 領先於User and Assistant的提示，會去定義GPT的回答方式或回答行為<ul>\n<li>System 的提示詞，有多種提示用法：<ul>\n<li>調整回答長度，或者做角色扮演</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Assistant: Chat model &#x2F; LLM response. 亦即ChatGPT的回答，可以先定義前面的提示句，後面讓ChatGPT來完成他</li>\n<li>User: YOU，也就是使用者的prompt，就問他問題</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">messages =  [  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;system&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;You are an assistant who\\</span></span><br><span class=\"line\"><span class=\"string\"> responds in the style of Dr Seuss.&quot;&quot;&quot;</span>&#125;, </span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;role&#x27;:&#x27;assistant&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;content&#x27;:&quot;&quot;&quot;...&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;,</span></span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;user&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;write me a very short poem\\</span></span><br><span class=\"line\"><span class=\"string\"> about a happy carrot&quot;&quot;&quot;</span>&#125;,  </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/5df2ba83-1aae-4809-96c9-49f536f3c336\"\n                        alt=\"image.png\"\n                 ></p>\n<h3 id=\"API-Key\"><a href=\"#API-Key\" class=\"headerlink\" title=\"API Key\"></a>API Key</h3><ul>\n<li>There is more secure way to use API Key</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv, find_dotenv</span><br><span class=\"line\"></span><br><span class=\"line\">_ = load_dotenv(find_dotenv())    <span class=\"comment\"># read local .env file</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> openai</span><br><span class=\"line\"></span><br><span class=\"line\">openai.api_key = os.getenv(<span class=\"string\">&#x27;OPENAP_API_KEY&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Revolutionizing-AI-Application\"><a href=\"#Revolutionizing-AI-Application\" class=\"headerlink\" title=\"Revolutionizing AI Application\"></a>Revolutionizing AI Application</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/42c90de6-ca0b-4045-9e5c-656e1d7c94ff\"\n                        alt=\"image.png\"\n                 ></p>\n<p>多虧AI的革新，我們可以快速去使用相關的API，用非常簡短的時間來完成大型語言模型的調教，更快部屬到應用端。</p>\n<h2 id=\"如何使用API－Call-Methods\"><a href=\"#如何使用API－Call-Methods\" class=\"headerlink\" title=\"如何使用API－Call Methods\"></a>如何使用API－Call Methods</h2><h3 id=\"Function-get-completion\"><a href=\"#Function-get-completion\" class=\"headerlink\" title=\"Function: get_completion\"></a>Function: <code>get_completion</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client = openai.OpenAI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_completion</span>(<span class=\"params\">prompt, model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span></span>):</span><br><span class=\"line\">    messages = [&#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: prompt&#125;]</span><br><span class=\"line\">    response = client.chat.completions.create(</span><br><span class=\"line\">        model=model,</span><br><span class=\"line\">        messages=messages,</span><br><span class=\"line\">        temperature=<span class=\"number\">0</span>  <span class=\"comment\"># this is the degree of randomness of the model&#x27;s output </span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.choices[<span class=\"number\">0</span>].message.content</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Function-get-completion-from-messages\"><a href=\"#Function-get-completion-from-messages\" class=\"headerlink\" title=\"Function: get_completion_from_messages\"></a>Function: <code>get_completion_from_messages</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_completion_and_token_count</span>(<span class=\"params\">messages, </span></span><br><span class=\"line\"><span class=\"params\">                                   model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span>, </span></span><br><span class=\"line\"><span class=\"params\">                                   temperature=<span class=\"number\">0</span>, </span></span><br><span class=\"line\"><span class=\"params\">                                   max_tokens=<span class=\"number\">500</span></span>):</span><br><span class=\"line\">    </span><br><span class=\"line\">    response = openai.ChatCompletion.create(</span><br><span class=\"line\">        model=model,</span><br><span class=\"line\">        messages=messages,</span><br><span class=\"line\">        temperature=temperature, </span><br><span class=\"line\">        max_tokens=max_tokens,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    content = response.choices[<span class=\"number\">0</span>].message[<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    token_dict = &#123;</span><br><span class=\"line\"><span class=\"string\">&#x27;prompt_tokens&#x27;</span>:response[<span class=\"string\">&#x27;usage&#x27;</span>][<span class=\"string\">&#x27;prompt_tokens&#x27;</span>],</span><br><span class=\"line\"><span class=\"string\">&#x27;completion_tokens&#x27;</span>:response[<span class=\"string\">&#x27;usage&#x27;</span>][<span class=\"string\">&#x27;completion_tokens&#x27;</span>],</span><br><span class=\"line\"><span class=\"string\">&#x27;total_tokens&#x27;</span>:response[<span class=\"string\">&#x27;usage&#x27;</span>][<span class=\"string\">&#x27;total_tokens&#x27;</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> content, token_dict</span><br><span class=\"line\"><span class=\"comment\">##################################################################</span></span><br><span class=\"line\">messages = [</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;system&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;You are an assistant who responds\\</span></span><br><span class=\"line\"><span class=\"string\"> in the style of Dr Seuss.&quot;&quot;&quot;</span>&#125;,    </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;user&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;write me a very short poem \\ </span></span><br><span class=\"line\"><span class=\"string\"> about a happy carrot&quot;&quot;&quot;</span>&#125;,  </span><br><span class=\"line\">] </span><br><span class=\"line\">response, token_dict = get_completion_and_token_count(messages)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Exercise-星座描述應答\"><a href=\"#Exercise-星座描述應答\" class=\"headerlink\" title=\"Exercise: 星座描述應答\"></a>Exercise: 星座描述應答</h1><h3 id=\"軟體概念呈現\"><a href=\"#軟體概念呈現\" class=\"headerlink\" title=\"軟體概念呈現\"></a>軟體概念呈現</h3><ul>\n<li><strong>Motivation &amp; Objective</strong>: 讓不清楚生日對應甚麼星座的人們，方便查詢星座與該星座的相關細節; 讓使用者可以方便查詢且易於顯示</li>\n<li><strong>Input</strong>: 使用者只要輸入 [綽號] 與 [生日日期]</li>\n<li><strong>Output</strong>: 以表格方式顯示：[對應星座] [星座月份日期] [星座性格特質] [優缺點] [愛情觀&#x2F;感情觀]，並以表格的方式呈現</li>\n</ul>\n<h3 id=\"程式碼實作\"><a href=\"#程式碼實作\" class=\"headerlink\" title=\"程式碼實作\"></a>程式碼實作</h3><blockquote>\n<p>環境使用課程中提供的Jupyter note book 進行案例實作</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> openai</span><br><span class=\"line\"><span class=\"keyword\">import</span> tiktoken</span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython.display <span class=\"keyword\">import</span> display, Markdown, Latex, HTML, JSON</span><br><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv, find_dotenv</span><br><span class=\"line\">_ = load_dotenv(find_dotenv()) <span class=\"comment\"># read local .env file</span></span><br><span class=\"line\"></span><br><span class=\"line\">openai.api_key  = os.environ[<span class=\"string\">&#x27;OPENAI_API_KEY&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OpenAI API Function Definition</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_completion_from_messages</span>(<span class=\"params\">messages, </span></span><br><span class=\"line\"><span class=\"params\">                                 model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span>, </span></span><br><span class=\"line\"><span class=\"params\">                                 temperature=<span class=\"number\">0</span>, </span></span><br><span class=\"line\"><span class=\"params\">                                 max_tokens=<span class=\"number\">500</span></span>):</span><br><span class=\"line\">    response = openai.ChatCompletion.create(</span><br><span class=\"line\">        model=model,</span><br><span class=\"line\">        messages=messages,</span><br><span class=\"line\">        temperature=temperature, <span class=\"comment\"># this is the degree of randomness of the model&#x27;s output</span></span><br><span class=\"line\">        max_tokens=max_tokens, <span class=\"comment\"># the maximum number of tokens the model can ouptut </span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.choices[<span class=\"number\">0</span>].message[<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Message Definition: System role and User role</span></span><br><span class=\"line\">messages =  [  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;system&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;You are an assistant who\\</span></span><br><span class=\"line\"><span class=\"string\"> responds in the style of an professional astrologer.\\</span></span><br><span class=\"line\"><span class=\"string\"> User will give you his/her nickname and their birthday.\\</span></span><br><span class=\"line\"><span class=\"string\"> Your goal is reply user that what the star sign they are,\\</span></span><br><span class=\"line\"><span class=\"string\"> and response the below items:\\</span></span><br><span class=\"line\"><span class=\"string\"> 1. What star sign?\\</span></span><br><span class=\"line\"><span class=\"string\"> 2. The date period of the star sign.\\</span></span><br><span class=\"line\"><span class=\"string\"> 3. Character traits of the star sign.\\</span></span><br><span class=\"line\"><span class=\"string\"> 4. Advantages and Disadvantages of the star sign.\\</span></span><br><span class=\"line\"><span class=\"string\"> 5. View of love/view of feelings of the star sign.\\</span></span><br><span class=\"line\"><span class=\"string\"> Please response them with a table style in HTML structure.&quot;&quot;&quot;</span>&#125;,    </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;user&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;Nickname: Jimmy, Birthday: eighth, Dec&quot;&quot;&quot;</span>&#125;,  </span><br><span class=\"line\">] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Output</span></span><br><span class=\"line\">response = get_completion_from_messages(messages, temperature=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response)</span><br><span class=\"line\">display(HTML(response))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"輸出結果\"><a href=\"#輸出結果\" class=\"headerlink\" title=\"輸出結果\"></a>輸出結果</h3><h4 id=\"HTML-Code\"><a href=\"#HTML-Code\" class=\"headerlink\" title=\"HTML Code\"></a>HTML Code</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1. Star Sign:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sagittarius<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>2. Date Period:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>November 22 - December 21<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3. Character Traits:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Adventurous, independent, optimistic, generous, and philosophical.<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>4. Advantages:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Enthusiastic, open-minded, and great sense of humor.<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Disadvantages:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Impatient, tactless, and prone to taking risks.<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>5. View of Love/Feelings:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sagittarians value freedom and honesty in relationships, often seeking excitement and new experiences. They may struggle with commitment but are loyal and passionate partners.<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Output-View\"><a href=\"#Output-View\" class=\"headerlink\" title=\"Output View\"></a>Output View</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/67012c22-61e3-49c0-b82f-166d23a38a21\"\n                        alt=\"image.png\"\n                 ></p>\n<hr>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>以上就是這次的課程筆記。按照課程步驟，在一次體會到提示工程的重要性，良好並完整的提示，對LLM模型的回答而言是很有幫助的。未來，有機會建置屬於自己的API時，<code>system role</code> 的提示詞也要多用點心來撰寫。</p>\n<p>另外，我自己有直接使用 OpenAI API 直接在本地端進行實作，測試過程中發現：使用本地端API沒有免費的使用權限(需要$$)；有鑑於現階段尚無需求，那就先蹭一下課程的API吧~</p>\n","excerpt":"","more":"<blockquote>\n<p>Link: <a class=\"link\"   href=\"https://learn.deeplearning.ai/courses/chatgpt-building-system/lesson/2/language-models%2C-the-chat-format-and-tokens\" >DLAI - Building Systems with the ChatGPT API<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h1 id=\"Language-Models-the-Chat-Format-and-Tokens\"><a href=\"#Language-Models-the-Chat-Format-and-Tokens\" class=\"headerlink\" title=\"Language Models, the Chat Format and Tokens\"></a>Language Models, the Chat Format and Tokens</h1><ul>\n<li>LLM在互動過程，是一直依據前面的Input X(前面的句子)，來預測下一個字詞Output Y</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/f06b8c53-5281-4692-a3fb-3c7465afb37b\"\n                        alt=\"image.png\"\n                 ></p>\n<h2 id=\"Tokens\"><a href=\"#Tokens\" class=\"headerlink\" title=\"Tokens\"></a>Tokens</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Learning][ new][ things][ is][ fun][!]    // [] is one &quot;token&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/01c20d21-4b1d-4736-a006-e5f9df60c510\"\n                        alt=\"image.png\"\n                 ></p>\n<h2 id=\"三大提示詞－System-User-and-Assistant-Message\"><a href=\"#三大提示詞－System-User-and-Assistant-Message\" class=\"headerlink\" title=\"三大提示詞－System, User and Assistant Message\"></a>三大提示詞－System, User and Assistant Message</h2><ol>\n<li>System: sets tone&#x2F;behavior of assistant. 領先於User and Assistant的提示，會去定義GPT的回答方式或回答行為<ul>\n<li>System 的提示詞，有多種提示用法：<ul>\n<li>調整回答長度，或者做角色扮演</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Assistant: Chat model &#x2F; LLM response. 亦即ChatGPT的回答，可以先定義前面的提示句，後面讓ChatGPT來完成他</li>\n<li>User: YOU，也就是使用者的prompt，就問他問題</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">messages =  [  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;system&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;You are an assistant who\\</span></span><br><span class=\"line\"><span class=\"string\"> responds in the style of Dr Seuss.&quot;&quot;&quot;</span>&#125;, </span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;role&#x27;:&#x27;assistant&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;content&#x27;:&quot;&quot;&quot;...&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;,</span></span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;user&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;write me a very short poem\\</span></span><br><span class=\"line\"><span class=\"string\"> about a happy carrot&quot;&quot;&quot;</span>&#125;,  </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/5df2ba83-1aae-4809-96c9-49f536f3c336\"\n                        alt=\"image.png\"\n                 ></p>\n<h3 id=\"API-Key\"><a href=\"#API-Key\" class=\"headerlink\" title=\"API Key\"></a>API Key</h3><ul>\n<li>There is more secure way to use API Key</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv, find_dotenv</span><br><span class=\"line\"></span><br><span class=\"line\">_ = load_dotenv(find_dotenv())    <span class=\"comment\"># read local .env file</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> openai</span><br><span class=\"line\"></span><br><span class=\"line\">openai.api_key = os.getenv(<span class=\"string\">&#x27;OPENAP_API_KEY&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Revolutionizing-AI-Application\"><a href=\"#Revolutionizing-AI-Application\" class=\"headerlink\" title=\"Revolutionizing AI Application\"></a>Revolutionizing AI Application</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/42c90de6-ca0b-4045-9e5c-656e1d7c94ff\"\n                        alt=\"image.png\"\n                 ></p>\n<p>多虧AI的革新，我們可以快速去使用相關的API，用非常簡短的時間來完成大型語言模型的調教，更快部屬到應用端。</p>\n<h2 id=\"如何使用API－Call-Methods\"><a href=\"#如何使用API－Call-Methods\" class=\"headerlink\" title=\"如何使用API－Call Methods\"></a>如何使用API－Call Methods</h2><h3 id=\"Function-get-completion\"><a href=\"#Function-get-completion\" class=\"headerlink\" title=\"Function: get_completion\"></a>Function: <code>get_completion</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client = openai.OpenAI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_completion</span>(<span class=\"params\">prompt, model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span></span>):</span><br><span class=\"line\">    messages = [&#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: prompt&#125;]</span><br><span class=\"line\">    response = client.chat.completions.create(</span><br><span class=\"line\">        model=model,</span><br><span class=\"line\">        messages=messages,</span><br><span class=\"line\">        temperature=<span class=\"number\">0</span>  <span class=\"comment\"># this is the degree of randomness of the model&#x27;s output </span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.choices[<span class=\"number\">0</span>].message.content</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Function-get-completion-from-messages\"><a href=\"#Function-get-completion-from-messages\" class=\"headerlink\" title=\"Function: get_completion_from_messages\"></a>Function: <code>get_completion_from_messages</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_completion_and_token_count</span>(<span class=\"params\">messages, </span></span><br><span class=\"line\"><span class=\"params\">                                   model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span>, </span></span><br><span class=\"line\"><span class=\"params\">                                   temperature=<span class=\"number\">0</span>, </span></span><br><span class=\"line\"><span class=\"params\">                                   max_tokens=<span class=\"number\">500</span></span>):</span><br><span class=\"line\">    </span><br><span class=\"line\">    response = openai.ChatCompletion.create(</span><br><span class=\"line\">        model=model,</span><br><span class=\"line\">        messages=messages,</span><br><span class=\"line\">        temperature=temperature, </span><br><span class=\"line\">        max_tokens=max_tokens,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    content = response.choices[<span class=\"number\">0</span>].message[<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    token_dict = &#123;</span><br><span class=\"line\"><span class=\"string\">&#x27;prompt_tokens&#x27;</span>:response[<span class=\"string\">&#x27;usage&#x27;</span>][<span class=\"string\">&#x27;prompt_tokens&#x27;</span>],</span><br><span class=\"line\"><span class=\"string\">&#x27;completion_tokens&#x27;</span>:response[<span class=\"string\">&#x27;usage&#x27;</span>][<span class=\"string\">&#x27;completion_tokens&#x27;</span>],</span><br><span class=\"line\"><span class=\"string\">&#x27;total_tokens&#x27;</span>:response[<span class=\"string\">&#x27;usage&#x27;</span>][<span class=\"string\">&#x27;total_tokens&#x27;</span>],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> content, token_dict</span><br><span class=\"line\"><span class=\"comment\">##################################################################</span></span><br><span class=\"line\">messages = [</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;system&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;You are an assistant who responds\\</span></span><br><span class=\"line\"><span class=\"string\"> in the style of Dr Seuss.&quot;&quot;&quot;</span>&#125;,    </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;user&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;write me a very short poem \\ </span></span><br><span class=\"line\"><span class=\"string\"> about a happy carrot&quot;&quot;&quot;</span>&#125;,  </span><br><span class=\"line\">] </span><br><span class=\"line\">response, token_dict = get_completion_and_token_count(messages)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Exercise-星座描述應答\"><a href=\"#Exercise-星座描述應答\" class=\"headerlink\" title=\"Exercise: 星座描述應答\"></a>Exercise: 星座描述應答</h1><h3 id=\"軟體概念呈現\"><a href=\"#軟體概念呈現\" class=\"headerlink\" title=\"軟體概念呈現\"></a>軟體概念呈現</h3><ul>\n<li><strong>Motivation &amp; Objective</strong>: 讓不清楚生日對應甚麼星座的人們，方便查詢星座與該星座的相關細節; 讓使用者可以方便查詢且易於顯示</li>\n<li><strong>Input</strong>: 使用者只要輸入 [綽號] 與 [生日日期]</li>\n<li><strong>Output</strong>: 以表格方式顯示：[對應星座] [星座月份日期] [星座性格特質] [優缺點] [愛情觀&#x2F;感情觀]，並以表格的方式呈現</li>\n</ul>\n<h3 id=\"程式碼實作\"><a href=\"#程式碼實作\" class=\"headerlink\" title=\"程式碼實作\"></a>程式碼實作</h3><blockquote>\n<p>環境使用課程中提供的Jupyter note book 進行案例實作</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> openai</span><br><span class=\"line\"><span class=\"keyword\">import</span> tiktoken</span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython.display <span class=\"keyword\">import</span> display, Markdown, Latex, HTML, JSON</span><br><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv, find_dotenv</span><br><span class=\"line\">_ = load_dotenv(find_dotenv()) <span class=\"comment\"># read local .env file</span></span><br><span class=\"line\"></span><br><span class=\"line\">openai.api_key  = os.environ[<span class=\"string\">&#x27;OPENAI_API_KEY&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OpenAI API Function Definition</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_completion_from_messages</span>(<span class=\"params\">messages, </span></span><br><span class=\"line\"><span class=\"params\">                                 model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span>, </span></span><br><span class=\"line\"><span class=\"params\">                                 temperature=<span class=\"number\">0</span>, </span></span><br><span class=\"line\"><span class=\"params\">                                 max_tokens=<span class=\"number\">500</span></span>):</span><br><span class=\"line\">    response = openai.ChatCompletion.create(</span><br><span class=\"line\">        model=model,</span><br><span class=\"line\">        messages=messages,</span><br><span class=\"line\">        temperature=temperature, <span class=\"comment\"># this is the degree of randomness of the model&#x27;s output</span></span><br><span class=\"line\">        max_tokens=max_tokens, <span class=\"comment\"># the maximum number of tokens the model can ouptut </span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.choices[<span class=\"number\">0</span>].message[<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Message Definition: System role and User role</span></span><br><span class=\"line\">messages =  [  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;system&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;You are an assistant who\\</span></span><br><span class=\"line\"><span class=\"string\"> responds in the style of an professional astrologer.\\</span></span><br><span class=\"line\"><span class=\"string\"> User will give you his/her nickname and their birthday.\\</span></span><br><span class=\"line\"><span class=\"string\"> Your goal is reply user that what the star sign they are,\\</span></span><br><span class=\"line\"><span class=\"string\"> and response the below items:\\</span></span><br><span class=\"line\"><span class=\"string\"> 1. What star sign?\\</span></span><br><span class=\"line\"><span class=\"string\"> 2. The date period of the star sign.\\</span></span><br><span class=\"line\"><span class=\"string\"> 3. Character traits of the star sign.\\</span></span><br><span class=\"line\"><span class=\"string\"> 4. Advantages and Disadvantages of the star sign.\\</span></span><br><span class=\"line\"><span class=\"string\"> 5. View of love/view of feelings of the star sign.\\</span></span><br><span class=\"line\"><span class=\"string\"> Please response them with a table style in HTML structure.&quot;&quot;&quot;</span>&#125;,    </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;role&#x27;</span>:<span class=\"string\">&#x27;user&#x27;</span>, </span><br><span class=\"line\"> <span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&quot;&quot;&quot;Nickname: Jimmy, Birthday: eighth, Dec&quot;&quot;&quot;</span>&#125;,  </span><br><span class=\"line\">] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Output</span></span><br><span class=\"line\">response = get_completion_from_messages(messages, temperature=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response)</span><br><span class=\"line\">display(HTML(response))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"輸出結果\"><a href=\"#輸出結果\" class=\"headerlink\" title=\"輸出結果\"></a>輸出結果</h3><h4 id=\"HTML-Code\"><a href=\"#HTML-Code\" class=\"headerlink\" title=\"HTML Code\"></a>HTML Code</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1. Star Sign:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sagittarius<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>2. Date Period:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>November 22 - December 21<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3. Character Traits:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Adventurous, independent, optimistic, generous, and philosophical.<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>4. Advantages:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Enthusiastic, open-minded, and great sense of humor.<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Disadvantages:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Impatient, tactless, and prone to taking risks.<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>5. View of Love/Feelings:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sagittarians value freedom and honesty in relationships, often seeking excitement and new experiences. They may struggle with commitment but are loyal and passionate partners.<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Output-View\"><a href=\"#Output-View\" class=\"headerlink\" title=\"Output View\"></a>Output View</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/3dfed944-4d33-4022-8938-df8b230db6a0/67012c22-61e3-49c0-b82f-166d23a38a21\"\n                        alt=\"image.png\"\n                 ></p>\n<hr>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>以上就是這次的課程筆記。按照課程步驟，在一次體會到提示工程的重要性，良好並完整的提示，對LLM模型的回答而言是很有幫助的。未來，有機會建置屬於自己的API時，<code>system role</code> 的提示詞也要多用點心來撰寫。</p>\n<p>另外，我自己有直接使用 OpenAI API 直接在本地端進行實作，測試過程中發現：使用本地端API沒有免費的使用權限(需要$$)；有鑑於現階段尚無需求，那就先蹭一下課程的API吧~</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-02-10T13:48:33.304Z","updated":"2024-02-10T13:48:33.304Z","comments":1,"layout":"post","photos":[],"_id":"clybox2ph0008txzkdad7f959","content":"<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo<i class=\"fas fa-external-link-alt\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation<i class=\"fas fa-external-link-alt\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting<i class=\"fas fa-external-link-alt\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment<i class=\"fas fa-external-link-alt\"></i></a></p>\n","excerpt":"","more":"<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo<i class=\"fas fa-external-link-alt\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation<i class=\"fas fa-external-link-alt\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting<i class=\"fas fa-external-link-alt\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"Hexo at MacOS架站心路歷程：Part I - 環境安裝","date":"2024-02-29T14:22:48.000Z","_content":"\n## 主旨與動機\n\n- 想在繁忙的工作生活時間中，找到一個沈靜自己、消化自己收穫的小天地\n- 用於記錄自己的工作、生活心得體悟\n- 也分享給有需要的朋友們\n\n## 心路歷程Ｉ：安裝Hexo必須環境(at MacOS)\n\n> 學習連結：[https://easyhexo.com/1-Hexo-install-and-config/](https://easyhexo.com/1-Hexo-install-and-config/)\n\n### Step 1 - 安裝套件管理工具：HomeBrew\n\n> 官方連結：[https://brew.sh/zh-tw/](https://brew.sh/zh-tw/)\n\n- 如同linux系統的`apt-get`，`brew`就是ＭＡＣ系統的套件管理工具\n- 在電腦中的terminal執行下面指令\n\n```other\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n- 讓他跑一下，過程中會需要輸入使用者密碼\n- 接著，安裝好後，系統會提示下兩個指令，設定brew指令至PATH\n\n```other\n(echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') >> /Users/user/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n- 設定完指令後，即可測試指令`brew`是否可以運作！\n\n### Step 2 - 安裝 git and Node.js\n\n- 下載git套件，下指令安裝git，沒難度：\n\n```other\nbrew install git\n```\n\n- 接著，下載套件Node.js，我們將透由`nvm`這個套件進行下載\n   - [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)\n\n```other\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n- 注意：需要先重新啟動終端器，重啟後再輸入以下的指令，來安裝`npm`\n\n```other\nnvm install stable\n```\n\n- 可以輸入以下指令，看是否安裝成功：\n\n```other\nnpm --version\n```\n\n### Step 3 - 安裝Hexo\n\n- 最後，我們就可以使用npm指令來安裝我們的Hexo囉！\n\n```other\nnpm install -g hexo-cli\n```\n\n## 小結\n\n安裝的過程蠻簡單的，跟在linux上的使用體驗類似。\n\n非常感謝各方大神的技術資源提供。\n\n","source":"_posts/202403-hexo/hexo_build_part1.md","raw":"---\ntitle: Hexo at MacOS架站心路歷程：Part I - 環境安裝\ndate: 2024-02-29 22:22:48\ntags: hexo\ncategories: Software\n---\n\n## 主旨與動機\n\n- 想在繁忙的工作生活時間中，找到一個沈靜自己、消化自己收穫的小天地\n- 用於記錄自己的工作、生活心得體悟\n- 也分享給有需要的朋友們\n\n## 心路歷程Ｉ：安裝Hexo必須環境(at MacOS)\n\n> 學習連結：[https://easyhexo.com/1-Hexo-install-and-config/](https://easyhexo.com/1-Hexo-install-and-config/)\n\n### Step 1 - 安裝套件管理工具：HomeBrew\n\n> 官方連結：[https://brew.sh/zh-tw/](https://brew.sh/zh-tw/)\n\n- 如同linux系統的`apt-get`，`brew`就是ＭＡＣ系統的套件管理工具\n- 在電腦中的terminal執行下面指令\n\n```other\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n- 讓他跑一下，過程中會需要輸入使用者密碼\n- 接著，安裝好後，系統會提示下兩個指令，設定brew指令至PATH\n\n```other\n(echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') >> /Users/user/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n- 設定完指令後，即可測試指令`brew`是否可以運作！\n\n### Step 2 - 安裝 git and Node.js\n\n- 下載git套件，下指令安裝git，沒難度：\n\n```other\nbrew install git\n```\n\n- 接著，下載套件Node.js，我們將透由`nvm`這個套件進行下載\n   - [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)\n\n```other\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n- 注意：需要先重新啟動終端器，重啟後再輸入以下的指令，來安裝`npm`\n\n```other\nnvm install stable\n```\n\n- 可以輸入以下指令，看是否安裝成功：\n\n```other\nnpm --version\n```\n\n### Step 3 - 安裝Hexo\n\n- 最後，我們就可以使用npm指令來安裝我們的Hexo囉！\n\n```other\nnpm install -g hexo-cli\n```\n\n## 小結\n\n安裝的過程蠻簡單的，跟在linux上的使用體驗類似。\n\n非常感謝各方大神的技術資源提供。\n\n","slug":"202403-hexo/hexo_build_part1","published":1,"updated":"2024-03-10T02:44:21.054Z","comments":1,"layout":"post","photos":[],"_id":"clybox2pj000mtxzkdmqocn6i","content":"<h2 id=\"主旨與動機\"><a href=\"#主旨與動機\" class=\"headerlink\" title=\"主旨與動機\"></a>主旨與動機</h2><ul>\n<li>想在繁忙的工作生活時間中，找到一個沈靜自己、消化自己收穫的小天地</li>\n<li>用於記錄自己的工作、生活心得體悟</li>\n<li>也分享給有需要的朋友們</li>\n</ul>\n<h2 id=\"心路歷程I：安裝Hexo必須環境-at-MacOS\"><a href=\"#心路歷程I：安裝Hexo必須環境-at-MacOS\" class=\"headerlink\" title=\"心路歷程Ｉ：安裝Hexo必須環境(at MacOS)\"></a>心路歷程Ｉ：安裝Hexo必須環境(at MacOS)</h2><blockquote>\n<p>學習連結：<a class=\"link\"   href=\"https://easyhexo.com/1-Hexo-install-and-config/\" >https://easyhexo.com/1-Hexo-install-and-config/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h3 id=\"Step-1-安裝套件管理工具：HomeBrew\"><a href=\"#Step-1-安裝套件管理工具：HomeBrew\" class=\"headerlink\" title=\"Step 1 - 安裝套件管理工具：HomeBrew\"></a>Step 1 - 安裝套件管理工具：HomeBrew</h3><blockquote>\n<p>官方連結：<a class=\"link\"   href=\"https://brew.sh/zh-tw/\" >https://brew.sh/zh-tw/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<ul>\n<li>如同linux系統的<code>apt-get</code>，<code>brew</code>就是ＭＡＣ系統的套件管理工具</li>\n<li>在電腦中的terminal執行下面指令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>讓他跑一下，過程中會需要輸入使用者密碼</li>\n<li>接著，安裝好後，系統會提示下兩個指令，設定brew指令至PATH</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(echo; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;) &gt;&gt; /Users/user/.zprofile</span><br><span class=\"line\">eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>設定完指令後，即可測試指令<code>brew</code>是否可以運作！</li>\n</ul>\n<h3 id=\"Step-2-安裝-git-and-Node-js\"><a href=\"#Step-2-安裝-git-and-Node-js\" class=\"headerlink\" title=\"Step 2 - 安裝 git and Node.js\"></a>Step 2 - 安裝 git and Node.js</h3><ul>\n<li>下載git套件，下指令安裝git，沒難度：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接著，下載套件Node.js，我們將透由<code>nvm</code>這個套件進行下載<ul>\n<li><a class=\"link\"   href=\"https://github.com/nvm-sh/nvm\" >https://github.com/nvm-sh/nvm<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：需要先重新啟動終端器，重啟後再輸入以下的指令，來安裝<code>npm</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以輸入以下指令，看是否安裝成功：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-3-安裝Hexo\"><a href=\"#Step-3-安裝Hexo\" class=\"headerlink\" title=\"Step 3 - 安裝Hexo\"></a>Step 3 - 安裝Hexo</h3><ul>\n<li>最後，我們就可以使用npm指令來安裝我們的Hexo囉！</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>安裝的過程蠻簡單的，跟在linux上的使用體驗類似。</p>\n<p>非常感謝各方大神的技術資源提供。</p>\n","excerpt":"","more":"<h2 id=\"主旨與動機\"><a href=\"#主旨與動機\" class=\"headerlink\" title=\"主旨與動機\"></a>主旨與動機</h2><ul>\n<li>想在繁忙的工作生活時間中，找到一個沈靜自己、消化自己收穫的小天地</li>\n<li>用於記錄自己的工作、生活心得體悟</li>\n<li>也分享給有需要的朋友們</li>\n</ul>\n<h2 id=\"心路歷程I：安裝Hexo必須環境-at-MacOS\"><a href=\"#心路歷程I：安裝Hexo必須環境-at-MacOS\" class=\"headerlink\" title=\"心路歷程Ｉ：安裝Hexo必須環境(at MacOS)\"></a>心路歷程Ｉ：安裝Hexo必須環境(at MacOS)</h2><blockquote>\n<p>學習連結：<a class=\"link\"   href=\"https://easyhexo.com/1-Hexo-install-and-config/\" >https://easyhexo.com/1-Hexo-install-and-config/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h3 id=\"Step-1-安裝套件管理工具：HomeBrew\"><a href=\"#Step-1-安裝套件管理工具：HomeBrew\" class=\"headerlink\" title=\"Step 1 - 安裝套件管理工具：HomeBrew\"></a>Step 1 - 安裝套件管理工具：HomeBrew</h3><blockquote>\n<p>官方連結：<a class=\"link\"   href=\"https://brew.sh/zh-tw/\" >https://brew.sh/zh-tw/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<ul>\n<li>如同linux系統的<code>apt-get</code>，<code>brew</code>就是ＭＡＣ系統的套件管理工具</li>\n<li>在電腦中的terminal執行下面指令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>讓他跑一下，過程中會需要輸入使用者密碼</li>\n<li>接著，安裝好後，系統會提示下兩個指令，設定brew指令至PATH</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(echo; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;) &gt;&gt; /Users/user/.zprofile</span><br><span class=\"line\">eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>設定完指令後，即可測試指令<code>brew</code>是否可以運作！</li>\n</ul>\n<h3 id=\"Step-2-安裝-git-and-Node-js\"><a href=\"#Step-2-安裝-git-and-Node-js\" class=\"headerlink\" title=\"Step 2 - 安裝 git and Node.js\"></a>Step 2 - 安裝 git and Node.js</h3><ul>\n<li>下載git套件，下指令安裝git，沒難度：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接著，下載套件Node.js，我們將透由<code>nvm</code>這個套件進行下載<ul>\n<li><a class=\"link\"   href=\"https://github.com/nvm-sh/nvm\" >https://github.com/nvm-sh/nvm<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：需要先重新啟動終端器，重啟後再輸入以下的指令，來安裝<code>npm</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以輸入以下指令，看是否安裝成功：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step-3-安裝Hexo\"><a href=\"#Step-3-安裝Hexo\" class=\"headerlink\" title=\"Step 3 - 安裝Hexo\"></a>Step 3 - 安裝Hexo</h3><ul>\n<li>最後，我們就可以使用npm指令來安裝我們的Hexo囉！</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><p>安裝的過程蠻簡單的，跟在linux上的使用體驗類似。</p>\n<p>非常感謝各方大神的技術資源提供。</p>\n"},{"title":"Hexo at MacOS架站心路歷程：Part II - Hexo配置","date":"2024-03-03T09:51:31.000Z","_content":"\n> 上一篇經歷Hexo的環境安裝，現在就讓我們進行基礎的Hexo配置。\n\n## Step 1 - 初始化建立Hexo服務\n\n- 首先，創立一個資料夾，我們會在這個資料夾中，建立服務\n\n```other\nmkdir <your-dir-name>\n```\n\n- 接著，初始化Hexo服務：\n\n```other\nhexo init <your_blog_name>\n```\n\n- 見到狀態：`INFO  Start blogging with Hexo!`表示已建立成功！\n\n## Step 2 - 配置Hexo\n\n> #### ！溫馨提醒！\n> - 可以同時參照官方參考：[https://hexo.io/zh-cn/docs/configuration](https://hexo.io/zh-cn/docs/configuration)\n> - 要稍微理解YAML的語法：冒號後面，需要一個**空格**才能繼續寫下去\n\n- 這裡建議，直接參考官方的配置說明：[https://hexo.io/zh-cn/docs/configuration](https://hexo.io/zh-cn/docs/configuration)\n\n- 如同官方所說，大部分的網頁配置，都是在`_config.yml` 或 [代替配置文件](https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6) 中調整修改\n\n## Step 3 - 使用 Hexo 的指令\n\n> 以下分享一些常用的Hexo指令，便於操作\n\n### hexo init [folder]\n\n- Goal: 初始化Hexo 的相關配置\n- Parameters:\n   - folder: 表是要初始化的文件資料夾地址\n   - 若要直接在當前資料夾初始化，直接輸入`hexo init .`\n\n### hexo server\n\n- Goal: 可以在本地端進行網站的預覽，同時也是一種Debug方式\n- 默認的網址連結為`http://localhost:8080/` ，可能會有所不同，像我就是4000這個port口\n- 如果說想要換port地址，可以在終端器輸入`hexo s -p <new_port>`\n\n### hexo generate\n\n- Goal: 用於生成靜態文件，生成後網頁相關內容會放在根目錄下面的`public` 文件夾中\n\n### hexo deploy\n\n- Goal: 用來部署網站內容，使用這個命令會將生成好的頁面（根目錄下面的`public` 文件夾的內容）部署到指定的地方\n- 這個指定的地方，可以在`_config.yml` 進行定義\n\n### hexo clean\n\n- Goal: 用於清空`public`文件夾內容\n\n### hexo version\n\n- Goal: 用於輸出目前hexo版本號\n\n## Step 4 - 配置主題（我使用Keep）\n\n> 我使用的主題為 [https://keep.xpoet.cn/](https://keep.xpoet.cn/)\n\n- 如何設定：請參照[Keep 官網](https://keep-docs.xpoet.cn/basis/get-start/install-theme.html)的示範教學，依序設定\n\n### 踩雷解決方法\n\n1. 我用npm的方式下載好keep主題，但看不到相關的主題配置文件？\n   1. 解法：在hexo根目錄中，Dir: `source` 資料夾建立資料夾 `_data` ，並且在該資料夾底下創建檔案`keep.yml` 。該主題就會讀取這檔案中的設定配置。\n   2. 配置檔案設定路徑：  `source/_data/keep.yml`\n   3. 再follow [https://keep-docs.xpoet.cn/basis/configuration-guide/base_info.html](https://keep-docs.xpoet.cn/basis/configuration-guide/base_info.html) 所述去配置。\n2. 配置的「影像」檔案要放在哪裡？\n   1. 文件中（.yml），會寫成`/images/xxx.svg`\n   2. 檔案文件中會存放在：`source/images` 這個檔案中\n3. 部署討論區時，該怎麼部署Disqus套件\n   1. 請在主題設置文件中，輸入下列程式碼：\nshortname的部分，可以參照下圖，登入Disqus後，尋找shortname的標籤\n```yaml\ncomment:\n  enable: true\n  use: disqus  # values: valine | gitalk | twikoo | waline | giscus | artalk | disqus\n\n  # Disqus Setting\n  disqus:\n    enable: true\n    shortname: <your-shortname>\n    count: true\n```\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/92EC70A5-36A8-4EB1-9E7B-E9A022328511/7ABBAA31-7678-40CA-AE9C-3E959D504E78_2/6RMxt4siGmWelKoZadcREm5DVyyVg5sbIw6j9yVpxnUz/Image.png)\n\n","source":"_posts/202403-hexo/hexo_build_part2.md","raw":"---\ntitle: Hexo at MacOS架站心路歷程：Part II - Hexo配置\ndate: 2024-03-03 17:51:31\n# updated: \ntags: hexo\ncategories: Software\n---\n\n> 上一篇經歷Hexo的環境安裝，現在就讓我們進行基礎的Hexo配置。\n\n## Step 1 - 初始化建立Hexo服務\n\n- 首先，創立一個資料夾，我們會在這個資料夾中，建立服務\n\n```other\nmkdir <your-dir-name>\n```\n\n- 接著，初始化Hexo服務：\n\n```other\nhexo init <your_blog_name>\n```\n\n- 見到狀態：`INFO  Start blogging with Hexo!`表示已建立成功！\n\n## Step 2 - 配置Hexo\n\n> #### ！溫馨提醒！\n> - 可以同時參照官方參考：[https://hexo.io/zh-cn/docs/configuration](https://hexo.io/zh-cn/docs/configuration)\n> - 要稍微理解YAML的語法：冒號後面，需要一個**空格**才能繼續寫下去\n\n- 這裡建議，直接參考官方的配置說明：[https://hexo.io/zh-cn/docs/configuration](https://hexo.io/zh-cn/docs/configuration)\n\n- 如同官方所說，大部分的網頁配置，都是在`_config.yml` 或 [代替配置文件](https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6) 中調整修改\n\n## Step 3 - 使用 Hexo 的指令\n\n> 以下分享一些常用的Hexo指令，便於操作\n\n### hexo init [folder]\n\n- Goal: 初始化Hexo 的相關配置\n- Parameters:\n   - folder: 表是要初始化的文件資料夾地址\n   - 若要直接在當前資料夾初始化，直接輸入`hexo init .`\n\n### hexo server\n\n- Goal: 可以在本地端進行網站的預覽，同時也是一種Debug方式\n- 默認的網址連結為`http://localhost:8080/` ，可能會有所不同，像我就是4000這個port口\n- 如果說想要換port地址，可以在終端器輸入`hexo s -p <new_port>`\n\n### hexo generate\n\n- Goal: 用於生成靜態文件，生成後網頁相關內容會放在根目錄下面的`public` 文件夾中\n\n### hexo deploy\n\n- Goal: 用來部署網站內容，使用這個命令會將生成好的頁面（根目錄下面的`public` 文件夾的內容）部署到指定的地方\n- 這個指定的地方，可以在`_config.yml` 進行定義\n\n### hexo clean\n\n- Goal: 用於清空`public`文件夾內容\n\n### hexo version\n\n- Goal: 用於輸出目前hexo版本號\n\n## Step 4 - 配置主題（我使用Keep）\n\n> 我使用的主題為 [https://keep.xpoet.cn/](https://keep.xpoet.cn/)\n\n- 如何設定：請參照[Keep 官網](https://keep-docs.xpoet.cn/basis/get-start/install-theme.html)的示範教學，依序設定\n\n### 踩雷解決方法\n\n1. 我用npm的方式下載好keep主題，但看不到相關的主題配置文件？\n   1. 解法：在hexo根目錄中，Dir: `source` 資料夾建立資料夾 `_data` ，並且在該資料夾底下創建檔案`keep.yml` 。該主題就會讀取這檔案中的設定配置。\n   2. 配置檔案設定路徑：  `source/_data/keep.yml`\n   3. 再follow [https://keep-docs.xpoet.cn/basis/configuration-guide/base_info.html](https://keep-docs.xpoet.cn/basis/configuration-guide/base_info.html) 所述去配置。\n2. 配置的「影像」檔案要放在哪裡？\n   1. 文件中（.yml），會寫成`/images/xxx.svg`\n   2. 檔案文件中會存放在：`source/images` 這個檔案中\n3. 部署討論區時，該怎麼部署Disqus套件\n   1. 請在主題設置文件中，輸入下列程式碼：\nshortname的部分，可以參照下圖，登入Disqus後，尋找shortname的標籤\n```yaml\ncomment:\n  enable: true\n  use: disqus  # values: valine | gitalk | twikoo | waline | giscus | artalk | disqus\n\n  # Disqus Setting\n  disqus:\n    enable: true\n    shortname: <your-shortname>\n    count: true\n```\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/92EC70A5-36A8-4EB1-9E7B-E9A022328511/7ABBAA31-7678-40CA-AE9C-3E959D504E78_2/6RMxt4siGmWelKoZadcREm5DVyyVg5sbIw6j9yVpxnUz/Image.png)\n\n","slug":"202403-hexo/hexo_build_part2","published":1,"updated":"2024-03-09T05:03:37.438Z","comments":1,"layout":"post","photos":[],"_id":"clybox2pj000ntxzk637whee4","content":"<blockquote>\n<p>上一篇經歷Hexo的環境安裝，現在就讓我們進行基礎的Hexo配置。</p>\n</blockquote>\n<h2 id=\"Step-1-初始化建立Hexo服務\"><a href=\"#Step-1-初始化建立Hexo服務\" class=\"headerlink\" title=\"Step 1 - 初始化建立Hexo服務\"></a>Step 1 - 初始化建立Hexo服務</h2><ul>\n<li>首先，創立一個資料夾，我們會在這個資料夾中，建立服務</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &lt;your-dir-name&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接著，初始化Hexo服務：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;your_blog_name&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>見到狀態：<code>INFO  Start blogging with Hexo!</code>表示已建立成功！</li>\n</ul>\n<h2 id=\"Step-2-配置Hexo\"><a href=\"#Step-2-配置Hexo\" class=\"headerlink\" title=\"Step 2 - 配置Hexo\"></a>Step 2 - 配置Hexo</h2><blockquote>\n<h4 id=\"！溫馨提醒！\"><a href=\"#！溫馨提醒！\" class=\"headerlink\" title=\"！溫馨提醒！\"></a>！溫馨提醒！</h4><ul>\n<li>可以同時參照官方參考：<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/configuration\" >https://hexo.io/zh-cn/docs/configuration<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>要稍微理解YAML的語法：冒號後面，需要一個<strong>空格</strong>才能繼續寫下去</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>這裡建議，直接參考官方的配置說明：<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/configuration\" >https://hexo.io/zh-cn/docs/configuration<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n<li><p>如同官方所說，大部分的網頁配置，都是在<code>_config.yml</code> 或 <a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" >代替配置文件<i class=\"fas fa-external-link-alt\"></i></a> 中調整修改</p>\n</li>\n</ul>\n<h2 id=\"Step-3-使用-Hexo-的指令\"><a href=\"#Step-3-使用-Hexo-的指令\" class=\"headerlink\" title=\"Step 3 - 使用 Hexo 的指令\"></a>Step 3 - 使用 Hexo 的指令</h2><blockquote>\n<p>以下分享一些常用的Hexo指令，便於操作</p>\n</blockquote>\n<h3 id=\"hexo-init-folder\"><a href=\"#hexo-init-folder\" class=\"headerlink\" title=\"hexo init [folder]\"></a>hexo init [folder]</h3><ul>\n<li>Goal: 初始化Hexo 的相關配置</li>\n<li>Parameters:<ul>\n<li>folder: 表是要初始化的文件資料夾地址</li>\n<li>若要直接在當前資料夾初始化，直接輸入<code>hexo init .</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a>hexo server</h3><ul>\n<li>Goal: 可以在本地端進行網站的預覽，同時也是一種Debug方式</li>\n<li>默認的網址連結為<code>http://localhost:8080/</code> ，可能會有所不同，像我就是4000這個port口</li>\n<li>如果說想要換port地址，可以在終端器輸入<code>hexo s -p &lt;new_port&gt;</code></li>\n</ul>\n<h3 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h3><ul>\n<li>Goal: 用於生成靜態文件，生成後網頁相關內容會放在根目錄下面的<code>public</code> 文件夾中</li>\n</ul>\n<h3 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a>hexo deploy</h3><ul>\n<li>Goal: 用來部署網站內容，使用這個命令會將生成好的頁面（根目錄下面的<code>public</code> 文件夾的內容）部署到指定的地方</li>\n<li>這個指定的地方，可以在<code>_config.yml</code> 進行定義</li>\n</ul>\n<h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h3><ul>\n<li>Goal: 用於清空<code>public</code>文件夾內容</li>\n</ul>\n<h3 id=\"hexo-version\"><a href=\"#hexo-version\" class=\"headerlink\" title=\"hexo version\"></a>hexo version</h3><ul>\n<li>Goal: 用於輸出目前hexo版本號</li>\n</ul>\n<h2 id=\"Step-4-配置主題（我使用Keep）\"><a href=\"#Step-4-配置主題（我使用Keep）\" class=\"headerlink\" title=\"Step 4 - 配置主題（我使用Keep）\"></a>Step 4 - 配置主題（我使用Keep）</h2><blockquote>\n<p>我使用的主題為 <a class=\"link\"   href=\"https://keep.xpoet.cn/\" >https://keep.xpoet.cn/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<ul>\n<li>如何設定：請參照<a class=\"link\"   href=\"https://keep-docs.xpoet.cn/basis/get-start/install-theme.html\" >Keep 官網<i class=\"fas fa-external-link-alt\"></i></a>的示範教學，依序設定</li>\n</ul>\n<h3 id=\"踩雷解決方法\"><a href=\"#踩雷解決方法\" class=\"headerlink\" title=\"踩雷解決方法\"></a>踩雷解決方法</h3><ol>\n<li>我用npm的方式下載好keep主題，但看不到相關的主題配置文件？<ol>\n<li>解法：在hexo根目錄中，Dir: <code>source</code> 資料夾建立資料夾 <code>_data</code> ，並且在該資料夾底下創建檔案<code>keep.yml</code> 。該主題就會讀取這檔案中的設定配置。</li>\n<li>配置檔案設定路徑：  <code>source/_data/keep.yml</code></li>\n<li>再follow <a class=\"link\"   href=\"https://keep-docs.xpoet.cn/basis/configuration-guide/base_info.html\" >https://keep-docs.xpoet.cn/basis/configuration-guide/base_info.html<i class=\"fas fa-external-link-alt\"></i></a> 所述去配置。</li>\n</ol>\n</li>\n<li>配置的「影像」檔案要放在哪裡？<ol>\n<li>文件中（.yml），會寫成<code>/images/xxx.svg</code></li>\n<li>檔案文件中會存放在：<code>source/images</code> 這個檔案中</li>\n</ol>\n</li>\n<li>部署討論區時，該怎麼部署Disqus套件<ol>\n<li>請在主題設置文件中，輸入下列程式碼：<br>shortname的部分，可以參照下圖，登入Disqus後，尋找shortname的標籤<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">use:</span> <span class=\"string\">disqus</span>  <span class=\"comment\"># values: valine | gitalk | twikoo | waline | giscus | artalk | disqus</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Disqus Setting</span></span><br><span class=\"line\">  <span class=\"attr\">disqus:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">shortname:</span> <span class=\"string\">&lt;your-shortname&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">count:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/92EC70A5-36A8-4EB1-9E7B-E9A022328511/7ABBAA31-7678-40CA-AE9C-3E959D504E78_2/6RMxt4siGmWelKoZadcREm5DVyyVg5sbIw6j9yVpxnUz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n","excerpt":"","more":"<blockquote>\n<p>上一篇經歷Hexo的環境安裝，現在就讓我們進行基礎的Hexo配置。</p>\n</blockquote>\n<h2 id=\"Step-1-初始化建立Hexo服務\"><a href=\"#Step-1-初始化建立Hexo服務\" class=\"headerlink\" title=\"Step 1 - 初始化建立Hexo服務\"></a>Step 1 - 初始化建立Hexo服務</h2><ul>\n<li>首先，創立一個資料夾，我們會在這個資料夾中，建立服務</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &lt;your-dir-name&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接著，初始化Hexo服務：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;your_blog_name&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>見到狀態：<code>INFO  Start blogging with Hexo!</code>表示已建立成功！</li>\n</ul>\n<h2 id=\"Step-2-配置Hexo\"><a href=\"#Step-2-配置Hexo\" class=\"headerlink\" title=\"Step 2 - 配置Hexo\"></a>Step 2 - 配置Hexo</h2><blockquote>\n<h4 id=\"！溫馨提醒！\"><a href=\"#！溫馨提醒！\" class=\"headerlink\" title=\"！溫馨提醒！\"></a>！溫馨提醒！</h4><ul>\n<li>可以同時參照官方參考：<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/configuration\" >https://hexo.io/zh-cn/docs/configuration<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>要稍微理解YAML的語法：冒號後面，需要一個<strong>空格</strong>才能繼續寫下去</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>這裡建議，直接參考官方的配置說明：<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/configuration\" >https://hexo.io/zh-cn/docs/configuration<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n<li><p>如同官方所說，大部分的網頁配置，都是在<code>_config.yml</code> 或 <a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" >代替配置文件<i class=\"fas fa-external-link-alt\"></i></a> 中調整修改</p>\n</li>\n</ul>\n<h2 id=\"Step-3-使用-Hexo-的指令\"><a href=\"#Step-3-使用-Hexo-的指令\" class=\"headerlink\" title=\"Step 3 - 使用 Hexo 的指令\"></a>Step 3 - 使用 Hexo 的指令</h2><blockquote>\n<p>以下分享一些常用的Hexo指令，便於操作</p>\n</blockquote>\n<h3 id=\"hexo-init-folder\"><a href=\"#hexo-init-folder\" class=\"headerlink\" title=\"hexo init [folder]\"></a>hexo init [folder]</h3><ul>\n<li>Goal: 初始化Hexo 的相關配置</li>\n<li>Parameters:<ul>\n<li>folder: 表是要初始化的文件資料夾地址</li>\n<li>若要直接在當前資料夾初始化，直接輸入<code>hexo init .</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a>hexo server</h3><ul>\n<li>Goal: 可以在本地端進行網站的預覽，同時也是一種Debug方式</li>\n<li>默認的網址連結為<code>http://localhost:8080/</code> ，可能會有所不同，像我就是4000這個port口</li>\n<li>如果說想要換port地址，可以在終端器輸入<code>hexo s -p &lt;new_port&gt;</code></li>\n</ul>\n<h3 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h3><ul>\n<li>Goal: 用於生成靜態文件，生成後網頁相關內容會放在根目錄下面的<code>public</code> 文件夾中</li>\n</ul>\n<h3 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a>hexo deploy</h3><ul>\n<li>Goal: 用來部署網站內容，使用這個命令會將生成好的頁面（根目錄下面的<code>public</code> 文件夾的內容）部署到指定的地方</li>\n<li>這個指定的地方，可以在<code>_config.yml</code> 進行定義</li>\n</ul>\n<h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h3><ul>\n<li>Goal: 用於清空<code>public</code>文件夾內容</li>\n</ul>\n<h3 id=\"hexo-version\"><a href=\"#hexo-version\" class=\"headerlink\" title=\"hexo version\"></a>hexo version</h3><ul>\n<li>Goal: 用於輸出目前hexo版本號</li>\n</ul>\n<h2 id=\"Step-4-配置主題（我使用Keep）\"><a href=\"#Step-4-配置主題（我使用Keep）\" class=\"headerlink\" title=\"Step 4 - 配置主題（我使用Keep）\"></a>Step 4 - 配置主題（我使用Keep）</h2><blockquote>\n<p>我使用的主題為 <a class=\"link\"   href=\"https://keep.xpoet.cn/\" >https://keep.xpoet.cn/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<ul>\n<li>如何設定：請參照<a class=\"link\"   href=\"https://keep-docs.xpoet.cn/basis/get-start/install-theme.html\" >Keep 官網<i class=\"fas fa-external-link-alt\"></i></a>的示範教學，依序設定</li>\n</ul>\n<h3 id=\"踩雷解決方法\"><a href=\"#踩雷解決方法\" class=\"headerlink\" title=\"踩雷解決方法\"></a>踩雷解決方法</h3><ol>\n<li>我用npm的方式下載好keep主題，但看不到相關的主題配置文件？<ol>\n<li>解法：在hexo根目錄中，Dir: <code>source</code> 資料夾建立資料夾 <code>_data</code> ，並且在該資料夾底下創建檔案<code>keep.yml</code> 。該主題就會讀取這檔案中的設定配置。</li>\n<li>配置檔案設定路徑：  <code>source/_data/keep.yml</code></li>\n<li>再follow <a class=\"link\"   href=\"https://keep-docs.xpoet.cn/basis/configuration-guide/base_info.html\" >https://keep-docs.xpoet.cn/basis/configuration-guide/base_info.html<i class=\"fas fa-external-link-alt\"></i></a> 所述去配置。</li>\n</ol>\n</li>\n<li>配置的「影像」檔案要放在哪裡？<ol>\n<li>文件中（.yml），會寫成<code>/images/xxx.svg</code></li>\n<li>檔案文件中會存放在：<code>source/images</code> 這個檔案中</li>\n</ol>\n</li>\n<li>部署討論區時，該怎麼部署Disqus套件<ol>\n<li>請在主題設置文件中，輸入下列程式碼：<br>shortname的部分，可以參照下圖，登入Disqus後，尋找shortname的標籤<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">use:</span> <span class=\"string\">disqus</span>  <span class=\"comment\"># values: valine | gitalk | twikoo | waline | giscus | artalk | disqus</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Disqus Setting</span></span><br><span class=\"line\">  <span class=\"attr\">disqus:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">shortname:</span> <span class=\"string\">&lt;your-shortname&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">count:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/92EC70A5-36A8-4EB1-9E7B-E9A022328511/7ABBAA31-7678-40CA-AE9C-3E959D504E78_2/6RMxt4siGmWelKoZadcREm5DVyyVg5sbIw6j9yVpxnUz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n"},{"title":"Hexo at MacOS架站心路歷程：Part III - Hexo部署架設 - Github Pages 篇","date":"2024-03-09T05:00:40.000Z","updated":"2024-03-09T05:08:44.949Z","_content":"\n> 上一篇經歷Hexo的設定配置，現在就讓我們進行Hexo的部署架設任務，期待我們的網站出現在網路世界上！\n\n## 使用Github Pages進行網站部署\n\n### 申請Github Pages\n\n- 因為我很早以前申請過了><，網路上也有各方豪傑的分享可以參考，這邊就先跳過，假設申請好了！\n- 請記下git申請過後的網址：[`https://github.com/your_username/your_reponame.git`](https://github.com/your_username/your_reponame.git)\n\n### 於本地端建立Github Pages服務\n\n- 首先，安裝相關的部署套件\n\n```other\n$ npm install hexo-deployer-git --save\n$ npm install hexo-server --save\n```\n\n- 填寫git的相關標註資訊\n\n```other\n$ git config --global user.name \"Your_user_name\"\n$ git config --global user.email Your_email@example.com\n```\n\n- 接下來，設定部落格中`_config.yml`的部署文件\n\n```yaml\ndeploy:\n  type: git\n  repo: <your-git-repo-url>\n  branch: master\n  message:  # Default is deploy time\n```\n\n- 最後，使用以下指令，將網站生成並部署到github上\n\n```yaml\n$ hexo clean && hexo d -g\n```\n\n- 如此一來，只要輸入你的github pages網址：[https://<your-name>.github.io/](https://janes128.github.io/)，就可以看到你自己架設的網站囉！可喜可賀！\n\n---\n\n### 小結\n\n第一次部署Hexo網站，可以在無邊際的網路海中，看到自己的一點足跡，非常感動！也期勉自己，可以維持這樣的恆心毅力，分享自己的生活工作，希望可以對別人有所幫助！\n\n","source":"_posts/202403-hexo/hexo_build_part3-1.md","raw":"---\ntitle: Hexo at MacOS架站心路歷程：Part III - Hexo部署架設 - Github Pages 篇\ndate: 2024-03-09 13:00:40\nupdated:\ntags: hexo\ncategories: Software\n---\n\n> 上一篇經歷Hexo的設定配置，現在就讓我們進行Hexo的部署架設任務，期待我們的網站出現在網路世界上！\n\n## 使用Github Pages進行網站部署\n\n### 申請Github Pages\n\n- 因為我很早以前申請過了><，網路上也有各方豪傑的分享可以參考，這邊就先跳過，假設申請好了！\n- 請記下git申請過後的網址：[`https://github.com/your_username/your_reponame.git`](https://github.com/your_username/your_reponame.git)\n\n### 於本地端建立Github Pages服務\n\n- 首先，安裝相關的部署套件\n\n```other\n$ npm install hexo-deployer-git --save\n$ npm install hexo-server --save\n```\n\n- 填寫git的相關標註資訊\n\n```other\n$ git config --global user.name \"Your_user_name\"\n$ git config --global user.email Your_email@example.com\n```\n\n- 接下來，設定部落格中`_config.yml`的部署文件\n\n```yaml\ndeploy:\n  type: git\n  repo: <your-git-repo-url>\n  branch: master\n  message:  # Default is deploy time\n```\n\n- 最後，使用以下指令，將網站生成並部署到github上\n\n```yaml\n$ hexo clean && hexo d -g\n```\n\n- 如此一來，只要輸入你的github pages網址：[https://<your-name>.github.io/](https://janes128.github.io/)，就可以看到你自己架設的網站囉！可喜可賀！\n\n---\n\n### 小結\n\n第一次部署Hexo網站，可以在無邊際的網路海中，看到自己的一點足跡，非常感動！也期勉自己，可以維持這樣的恆心毅力，分享自己的生活工作，希望可以對別人有所幫助！\n\n","slug":"202403-hexo/hexo_build_part3-1","published":1,"comments":1,"layout":"post","photos":[],"_id":"clybox2pk000ptxzk4ms34lar","content":"<blockquote>\n<p>上一篇經歷Hexo的設定配置，現在就讓我們進行Hexo的部署架設任務，期待我們的網站出現在網路世界上！</p>\n</blockquote>\n<h2 id=\"使用Github-Pages進行網站部署\"><a href=\"#使用Github-Pages進行網站部署\" class=\"headerlink\" title=\"使用Github Pages進行網站部署\"></a>使用Github Pages進行網站部署</h2><h3 id=\"申請Github-Pages\"><a href=\"#申請Github-Pages\" class=\"headerlink\" title=\"申請Github Pages\"></a>申請Github Pages</h3><ul>\n<li>因為我很早以前申請過了&gt;&lt;，網路上也有各方豪傑的分享可以參考，這邊就先跳過，假設申請好了！</li>\n<li>請記下git申請過後的網址：<a href=\"https://github.com/your_username/your_reponame.git\"><code>https://github.com/your_username/your_reponame.git</code></a></li>\n</ul>\n<h3 id=\"於本地端建立Github-Pages服務\"><a href=\"#於本地端建立Github-Pages服務\" class=\"headerlink\" title=\"於本地端建立Github Pages服務\"></a>於本地端建立Github Pages服務</h3><ul>\n<li>首先，安裝相關的部署套件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>填寫git的相關標註資訊</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your_user_name&quot;</span><br><span class=\"line\">$ git config --global user.email Your_email@example.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接下來，設定部落格中<code>_config.yml</code>的部署文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&lt;your-git-repo-url&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span>  <span class=\"comment\"># Default is deploy time</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最後，使用以下指令，將網站生成並部署到github上</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">hexo</span> <span class=\"string\">d</span> <span class=\"string\">-g</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如此一來，只要輸入你的github pages網址：<a href=\"https://janes128.github.io/\">https:&#x2F;&#x2F;<your-name>.github.io&#x2F;</a>，就可以看到你自己架設的網站囉！可喜可賀！</li>\n</ul>\n<hr>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><p>第一次部署Hexo網站，可以在無邊際的網路海中，看到自己的一點足跡，非常感動！也期勉自己，可以維持這樣的恆心毅力，分享自己的生活工作，希望可以對別人有所幫助！</p>\n","excerpt":"","more":"<blockquote>\n<p>上一篇經歷Hexo的設定配置，現在就讓我們進行Hexo的部署架設任務，期待我們的網站出現在網路世界上！</p>\n</blockquote>\n<h2 id=\"使用Github-Pages進行網站部署\"><a href=\"#使用Github-Pages進行網站部署\" class=\"headerlink\" title=\"使用Github Pages進行網站部署\"></a>使用Github Pages進行網站部署</h2><h3 id=\"申請Github-Pages\"><a href=\"#申請Github-Pages\" class=\"headerlink\" title=\"申請Github Pages\"></a>申請Github Pages</h3><ul>\n<li>因為我很早以前申請過了&gt;&lt;，網路上也有各方豪傑的分享可以參考，這邊就先跳過，假設申請好了！</li>\n<li>請記下git申請過後的網址：<a href=\"https://github.com/your_username/your_reponame.git\"><code>https://github.com/your_username/your_reponame.git</code></a></li>\n</ul>\n<h3 id=\"於本地端建立Github-Pages服務\"><a href=\"#於本地端建立Github-Pages服務\" class=\"headerlink\" title=\"於本地端建立Github Pages服務\"></a>於本地端建立Github Pages服務</h3><ul>\n<li>首先，安裝相關的部署套件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>填寫git的相關標註資訊</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your_user_name&quot;</span><br><span class=\"line\">$ git config --global user.email Your_email@example.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接下來，設定部落格中<code>_config.yml</code>的部署文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&lt;your-git-repo-url&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span>  <span class=\"comment\"># Default is deploy time</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最後，使用以下指令，將網站生成並部署到github上</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">hexo</span> <span class=\"string\">d</span> <span class=\"string\">-g</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如此一來，只要輸入你的github pages網址：<a href=\"https://janes128.github.io/\">https:&#x2F;&#x2F;<your-name>.github.io&#x2F;</a>，就可以看到你自己架設的網站囉！可喜可賀！</li>\n</ul>\n<hr>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><p>第一次部署Hexo網站，可以在無邊際的網路海中，看到自己的一點足跡，非常感動！也期勉自己，可以維持這樣的恆心毅力，分享自己的生活工作，希望可以對別人有所幫助！</p>\n"},{"title":"Hexo at MacOS架站心路歷程：Part III - Hexo部署架設 - Netlify + Github 篇","date":"2024-03-09T15:21:27.000Z","updated":"2024-03-09T15:26:40.173Z","_content":"\n## 動機與目的\n\n- 用了Github Pages部署方式後，發現會有些不方便的地方，比如更新文章時，需要在本地端先進行編譯建置（hexo generate），部署到public文件夾後，再手動上傳資料夾中內容至github更新網頁。\n- 上網研究，發現**Netlify**這項好用工具，可以更快速方便的更新自己的網站，做到**持續性部署（CD）**\n- 接下來，就讓我們開始吧！\n\n## 使用Netlify＋Github進行網站部署\n\n> Netlify 是一家遠端優先的雲端運算公司，提供一個開發平台，其中包括針對 Web 應用程式和動態網站的建置、部署和無伺服器後端服務。(Wiki)\n\n- 操作原理\n   - 將Hexo 部落格相關資料，丟到Github建立一個repo\n   - 使用Netlify來建立無伺服器的後端部署服務，並連結至上述repo\n   - Netlify將會自動偵測Github repo的更新變動，自動進行部署\n\n### Step 1: 將Hexo Project上傳github進行遠端管理\n\n- 在部落格的根目錄中，初始git服務，並將我的hexo網頁檔案push上github repo\n\n```bash\n$ git init\n$ git add .\n$ git commit -m \":tada: Init repo\"\n$ git remote add origin git@github.com:<your-github-name>/<hexo-project-name>.git\n$ git push -u origin master #here need PAT to login your github\n```\n\n> #### Debug - git problem with 'critical error: 身份驗證失敗'\n\n> 請參考這篇：[https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed](https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed)\n\n> - 2021-08-13以後，github不再支援直接輸入密碼的方式，來操作git；而是使用**PAT (Personal Access Token)**作為替代。\n> - 長話短說：請至github頁面申請一組PAT，使用PAT來取代密碼即可。\n\n### Step 2: 辦理與部署Netlify\n\n> 官網：[https://www.netlify.com/](https://www.netlify.com/)\n\n- 登入官網後，可以直接使用github帳號做登陸\n- 填寫完相關資訊，請選擇使用github連動您的hexo repo(剛剛上傳的那個)\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/2FD6B68B-6A84-4234-80CE-E0CBD0D7BF82/EBC2E25C-0475-430C-9B7E-184BA3EA2870_2/fe0JMSwyNbBg6wARRtS33ooYrPHvzrNqpdRlD4Vjkogz/Image.png)\n\n- 點選剛剛連動的repo，再點選Edit build settings\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/2FD6B68B-6A84-4234-80CE-E0CBD0D7BF82/853FD916-ADE3-4923-89A8-2FE8E386C11D_2/hhux99NeYzpKALvcm9nBGnSoc2NkraodIn9HQsVlfvMz/Image.png)\n\n- 修改如下圖所示(其實使用系統預設值即可)\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/20A9448C-164D-42C8-A10A-005B69E0DD0A_2/nIwQiXx6rLUFQZzc27MQenuWSyxQiNn0jyF5Ltyix0kz/Image.png)\n\n- 修改後，即可按下部署「Deploy name to Netlify」並等待發出；成功的話，將會出現下面的資訊囉！\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/F0266889-0F9B-424A-8F05-253C80571EE8_2/yLZc0NJzxfOLXY2qnNyBChBAdgUKYJN2D9hIzEc0yCEz/Image.png)\n\n- 此時，就可以接著後續的設定，如：客製化網誌ＵＲＬ，或是內嵌入其他插件，這邊不做贅述。\n- 如此一來，就完成網站的部署囉！\n\n---\n\n## Debug經驗分享：Netlify 部署Hexo Github 初始化（initializing） 失敗\n\n- 問題發現：\n   - 建制初期，進行Hexo部落格更新時，推到Github上，理論上Netlify會自動幫我編譯與部署，但當netlify在進行初始化(initializing)動作，會跳出**Failed**的警告字樣，如下圖：\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/D0688305-FD1E-430A-ABED-133DD3C8E5FF_2/f8M3qyROpcUFeVybxfwylg6Tbpq9pIfbI9qTSO8lSmkz/Image.png)\n\n- 分析觀察：\n   - 觀察第八與第九行，可以發現，問題是出在「.deploy_git」這個檔案。發現這個檔案應該是Netlify在部署時會自動產生出的文件，git submodule 無法追蹤或更新到這份模組，導致錯誤。\n- 解決方法：\n   - 參考以下連結，先將「.deploy_git」這個檔案給刪掉\n\n[](https://blog.csdn.net/lemqs0123/article/details/110429731)\n\n   - 刪除指令：\n```bash\ngit rm --cache '.deploy_git'    # system response: rm '.deploy_git'\n```\n\n   - 下圖為檢查與刪除的過程圖：\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/92A29C99-9794-49BA-A79D-C64090A53662_2/fTUgJOlycKrHdenqq0b8y7qnYImjkE7WJvSMp2G1ipQz/Image.png)\n\n   - 並且，記得將部署檔案\".deploy_git\"加入到\".gitignore\"檔案裡面（若無此檔案，要自己創建），以免再次把\".deploy_git\"更新上去。\n      - 可以使用指令`ls -la` 看看有沒有這個檔案，若沒有，可以用指令`touch .gitignore` 來創造，再使用文字編輯器將檔案`.gitignore` 加上去即可\n   - 編輯結束後，再將hexo的repo推上去github，讓netlify自動部署更新，就可以成功囉！\n\n---\n\n## 小結\n\n- 將部署工具換成netlify之後，有種如釋負重的感覺，之前繁瑣的部署流程，可以直接推上github後就結束了，他將會幫我自動部署到網路上，輕鬆方便許多！\n- 遇到Bug時，一時間也覺得不知所措，但真的仔細深入了解其原因後，才發現原來解法這麼單純，但這也是玩資訊工程時的醍醐味吧！\n\n","source":"_posts/202403-hexo/hexo_build_part3-2.md","raw":"---\ntitle: Hexo at MacOS架站心路歷程：Part III - Hexo部署架設 - Netlify + Github 篇\ndate: 2024-03-09 23:21:27\nupdated:\ntags: hexo\ncategories: Software\n---\n\n## 動機與目的\n\n- 用了Github Pages部署方式後，發現會有些不方便的地方，比如更新文章時，需要在本地端先進行編譯建置（hexo generate），部署到public文件夾後，再手動上傳資料夾中內容至github更新網頁。\n- 上網研究，發現**Netlify**這項好用工具，可以更快速方便的更新自己的網站，做到**持續性部署（CD）**\n- 接下來，就讓我們開始吧！\n\n## 使用Netlify＋Github進行網站部署\n\n> Netlify 是一家遠端優先的雲端運算公司，提供一個開發平台，其中包括針對 Web 應用程式和動態網站的建置、部署和無伺服器後端服務。(Wiki)\n\n- 操作原理\n   - 將Hexo 部落格相關資料，丟到Github建立一個repo\n   - 使用Netlify來建立無伺服器的後端部署服務，並連結至上述repo\n   - Netlify將會自動偵測Github repo的更新變動，自動進行部署\n\n### Step 1: 將Hexo Project上傳github進行遠端管理\n\n- 在部落格的根目錄中，初始git服務，並將我的hexo網頁檔案push上github repo\n\n```bash\n$ git init\n$ git add .\n$ git commit -m \":tada: Init repo\"\n$ git remote add origin git@github.com:<your-github-name>/<hexo-project-name>.git\n$ git push -u origin master #here need PAT to login your github\n```\n\n> #### Debug - git problem with 'critical error: 身份驗證失敗'\n\n> 請參考這篇：[https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed](https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed)\n\n> - 2021-08-13以後，github不再支援直接輸入密碼的方式，來操作git；而是使用**PAT (Personal Access Token)**作為替代。\n> - 長話短說：請至github頁面申請一組PAT，使用PAT來取代密碼即可。\n\n### Step 2: 辦理與部署Netlify\n\n> 官網：[https://www.netlify.com/](https://www.netlify.com/)\n\n- 登入官網後，可以直接使用github帳號做登陸\n- 填寫完相關資訊，請選擇使用github連動您的hexo repo(剛剛上傳的那個)\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/2FD6B68B-6A84-4234-80CE-E0CBD0D7BF82/EBC2E25C-0475-430C-9B7E-184BA3EA2870_2/fe0JMSwyNbBg6wARRtS33ooYrPHvzrNqpdRlD4Vjkogz/Image.png)\n\n- 點選剛剛連動的repo，再點選Edit build settings\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/2FD6B68B-6A84-4234-80CE-E0CBD0D7BF82/853FD916-ADE3-4923-89A8-2FE8E386C11D_2/hhux99NeYzpKALvcm9nBGnSoc2NkraodIn9HQsVlfvMz/Image.png)\n\n- 修改如下圖所示(其實使用系統預設值即可)\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/20A9448C-164D-42C8-A10A-005B69E0DD0A_2/nIwQiXx6rLUFQZzc27MQenuWSyxQiNn0jyF5Ltyix0kz/Image.png)\n\n- 修改後，即可按下部署「Deploy name to Netlify」並等待發出；成功的話，將會出現下面的資訊囉！\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/F0266889-0F9B-424A-8F05-253C80571EE8_2/yLZc0NJzxfOLXY2qnNyBChBAdgUKYJN2D9hIzEc0yCEz/Image.png)\n\n- 此時，就可以接著後續的設定，如：客製化網誌ＵＲＬ，或是內嵌入其他插件，這邊不做贅述。\n- 如此一來，就完成網站的部署囉！\n\n---\n\n## Debug經驗分享：Netlify 部署Hexo Github 初始化（initializing） 失敗\n\n- 問題發現：\n   - 建制初期，進行Hexo部落格更新時，推到Github上，理論上Netlify會自動幫我編譯與部署，但當netlify在進行初始化(initializing)動作，會跳出**Failed**的警告字樣，如下圖：\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/D0688305-FD1E-430A-ABED-133DD3C8E5FF_2/f8M3qyROpcUFeVybxfwylg6Tbpq9pIfbI9qTSO8lSmkz/Image.png)\n\n- 分析觀察：\n   - 觀察第八與第九行，可以發現，問題是出在「.deploy_git」這個檔案。發現這個檔案應該是Netlify在部署時會自動產生出的文件，git submodule 無法追蹤或更新到這份模組，導致錯誤。\n- 解決方法：\n   - 參考以下連結，先將「.deploy_git」這個檔案給刪掉\n\n[](https://blog.csdn.net/lemqs0123/article/details/110429731)\n\n   - 刪除指令：\n```bash\ngit rm --cache '.deploy_git'    # system response: rm '.deploy_git'\n```\n\n   - 下圖為檢查與刪除的過程圖：\n\n![Image.png](https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/92A29C99-9794-49BA-A79D-C64090A53662_2/fTUgJOlycKrHdenqq0b8y7qnYImjkE7WJvSMp2G1ipQz/Image.png)\n\n   - 並且，記得將部署檔案\".deploy_git\"加入到\".gitignore\"檔案裡面（若無此檔案，要自己創建），以免再次把\".deploy_git\"更新上去。\n      - 可以使用指令`ls -la` 看看有沒有這個檔案，若沒有，可以用指令`touch .gitignore` 來創造，再使用文字編輯器將檔案`.gitignore` 加上去即可\n   - 編輯結束後，再將hexo的repo推上去github，讓netlify自動部署更新，就可以成功囉！\n\n---\n\n## 小結\n\n- 將部署工具換成netlify之後，有種如釋負重的感覺，之前繁瑣的部署流程，可以直接推上github後就結束了，他將會幫我自動部署到網路上，輕鬆方便許多！\n- 遇到Bug時，一時間也覺得不知所措，但真的仔細深入了解其原因後，才發現原來解法這麼單純，但這也是玩資訊工程時的醍醐味吧！\n\n","slug":"202403-hexo/hexo_build_part3-2","published":1,"comments":1,"layout":"post","photos":[],"_id":"clybox2pk000qtxzk1wih08nf","content":"<h2 id=\"動機與目的\"><a href=\"#動機與目的\" class=\"headerlink\" title=\"動機與目的\"></a>動機與目的</h2><ul>\n<li>用了Github Pages部署方式後，發現會有些不方便的地方，比如更新文章時，需要在本地端先進行編譯建置（hexo generate），部署到public文件夾後，再手動上傳資料夾中內容至github更新網頁。</li>\n<li>上網研究，發現<strong>Netlify</strong>這項好用工具，可以更快速方便的更新自己的網站，做到<strong>持續性部署（CD）</strong></li>\n<li>接下來，就讓我們開始吧！</li>\n</ul>\n<h2 id=\"使用Netlify＋Github進行網站部署\"><a href=\"#使用Netlify＋Github進行網站部署\" class=\"headerlink\" title=\"使用Netlify＋Github進行網站部署\"></a>使用Netlify＋Github進行網站部署</h2><blockquote>\n<p>Netlify 是一家遠端優先的雲端運算公司，提供一個開發平台，其中包括針對 Web 應用程式和動態網站的建置、部署和無伺服器後端服務。(Wiki)</p>\n</blockquote>\n<ul>\n<li>操作原理<ul>\n<li>將Hexo 部落格相關資料，丟到Github建立一個repo</li>\n<li>使用Netlify來建立無伺服器的後端部署服務，並連結至上述repo</li>\n<li>Netlify將會自動偵測Github repo的更新變動，自動進行部署</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Step-1-將Hexo-Project上傳github進行遠端管理\"><a href=\"#Step-1-將Hexo-Project上傳github進行遠端管理\" class=\"headerlink\" title=\"Step 1: 將Hexo Project上傳github進行遠端管理\"></a>Step 1: 將Hexo Project上傳github進行遠端管理</h3><ul>\n<li>在部落格的根目錄中，初始git服務，並將我的hexo網頁檔案push上github repo</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">&quot;:tada: Init repo&quot;</span></span><br><span class=\"line\">$ git remote add origin git@github.com:&lt;your-github-name&gt;/&lt;hexo-project-name&gt;.git</span><br><span class=\"line\">$ git push -u origin master <span class=\"comment\">#here need PAT to login your github</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h4 id=\"Debug-git-problem-with-‘critical-error-身份驗證失敗’\"><a href=\"#Debug-git-problem-with-‘critical-error-身份驗證失敗’\" class=\"headerlink\" title=\"Debug - git problem with ‘critical error: 身份驗證失敗’\"></a>Debug - git problem with ‘critical error: 身份驗證失敗’</h4></blockquote>\n<blockquote>\n<p>請參考這篇：<a class=\"link\"   href=\"https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed\" >https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>2021-08-13以後，github不再支援直接輸入密碼的方式，來操作git；而是使用**PAT (Personal Access Token)**作為替代。</li>\n<li>長話短說：請至github頁面申請一組PAT，使用PAT來取代密碼即可。</li>\n</ul>\n</blockquote>\n<h3 id=\"Step-2-辦理與部署Netlify\"><a href=\"#Step-2-辦理與部署Netlify\" class=\"headerlink\" title=\"Step 2: 辦理與部署Netlify\"></a>Step 2: 辦理與部署Netlify</h3><blockquote>\n<p>官網：<a class=\"link\"   href=\"https://www.netlify.com/\" >https://www.netlify.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<ul>\n<li>登入官網後，可以直接使用github帳號做登陸</li>\n<li>填寫完相關資訊，請選擇使用github連動您的hexo repo(剛剛上傳的那個)</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/2FD6B68B-6A84-4234-80CE-E0CBD0D7BF82/EBC2E25C-0475-430C-9B7E-184BA3EA2870_2/fe0JMSwyNbBg6wARRtS33ooYrPHvzrNqpdRlD4Vjkogz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>點選剛剛連動的repo，再點選Edit build settings</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/2FD6B68B-6A84-4234-80CE-E0CBD0D7BF82/853FD916-ADE3-4923-89A8-2FE8E386C11D_2/hhux99NeYzpKALvcm9nBGnSoc2NkraodIn9HQsVlfvMz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>修改如下圖所示(其實使用系統預設值即可)</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/20A9448C-164D-42C8-A10A-005B69E0DD0A_2/nIwQiXx6rLUFQZzc27MQenuWSyxQiNn0jyF5Ltyix0kz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>修改後，即可按下部署「Deploy name to Netlify」並等待發出；成功的話，將會出現下面的資訊囉！</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/F0266889-0F9B-424A-8F05-253C80571EE8_2/yLZc0NJzxfOLXY2qnNyBChBAdgUKYJN2D9hIzEc0yCEz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>此時，就可以接著後續的設定，如：客製化網誌ＵＲＬ，或是內嵌入其他插件，這邊不做贅述。</li>\n<li>如此一來，就完成網站的部署囉！</li>\n</ul>\n<hr>\n<h2 id=\"Debug經驗分享：Netlify-部署Hexo-Github-初始化（initializing）-失敗\"><a href=\"#Debug經驗分享：Netlify-部署Hexo-Github-初始化（initializing）-失敗\" class=\"headerlink\" title=\"Debug經驗分享：Netlify 部署Hexo Github 初始化（initializing） 失敗\"></a>Debug經驗分享：Netlify 部署Hexo Github 初始化（initializing） 失敗</h2><ul>\n<li>問題發現：<ul>\n<li>建制初期，進行Hexo部落格更新時，推到Github上，理論上Netlify會自動幫我編譯與部署，但當netlify在進行初始化(initializing)動作，會跳出<strong>Failed</strong>的警告字樣，如下圖：</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/D0688305-FD1E-430A-ABED-133DD3C8E5FF_2/f8M3qyROpcUFeVybxfwylg6Tbpq9pIfbI9qTSO8lSmkz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>分析觀察：<ul>\n<li>觀察第八與第九行，可以發現，問題是出在「.deploy_git」這個檔案。發現這個檔案應該是Netlify在部署時會自動產生出的文件，git submodule 無法追蹤或更新到這份模組，導致錯誤。</li>\n</ul>\n</li>\n<li>解決方法：<ul>\n<li>參考以下連結，先將「.deploy_git」這個檔案給刪掉</li>\n</ul>\n</li>\n</ul>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/lemqs0123/article/details/110429731\" ><i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li><p>刪除指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> --cache <span class=\"string\">&#x27;.deploy_git&#x27;</span>    <span class=\"comment\"># system response: rm &#x27;.deploy_git&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下圖為檢查與刪除的過程圖：</p>\n</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/92A29C99-9794-49BA-A79D-C64090A53662_2/fTUgJOlycKrHdenqq0b8y7qnYImjkE7WJvSMp2G1ipQz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>並且，記得將部署檔案”.deploy_git”加入到”.gitignore”檔案裡面（若無此檔案，要自己創建），以免再次把”.deploy_git”更新上去。<ul>\n<li>可以使用指令<code>ls -la</code> 看看有沒有這個檔案，若沒有，可以用指令<code>touch .gitignore</code> 來創造，再使用文字編輯器將檔案<code>.gitignore</code> 加上去即可</li>\n</ul>\n</li>\n<li>編輯結束後，再將hexo的repo推上去github，讓netlify自動部署更新，就可以成功囉！</li>\n</ul>\n<hr>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><ul>\n<li>將部署工具換成netlify之後，有種如釋負重的感覺，之前繁瑣的部署流程，可以直接推上github後就結束了，他將會幫我自動部署到網路上，輕鬆方便許多！</li>\n<li>遇到Bug時，一時間也覺得不知所措，但真的仔細深入了解其原因後，才發現原來解法這麼單純，但這也是玩資訊工程時的醍醐味吧！</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"動機與目的\"><a href=\"#動機與目的\" class=\"headerlink\" title=\"動機與目的\"></a>動機與目的</h2><ul>\n<li>用了Github Pages部署方式後，發現會有些不方便的地方，比如更新文章時，需要在本地端先進行編譯建置（hexo generate），部署到public文件夾後，再手動上傳資料夾中內容至github更新網頁。</li>\n<li>上網研究，發現<strong>Netlify</strong>這項好用工具，可以更快速方便的更新自己的網站，做到<strong>持續性部署（CD）</strong></li>\n<li>接下來，就讓我們開始吧！</li>\n</ul>\n<h2 id=\"使用Netlify＋Github進行網站部署\"><a href=\"#使用Netlify＋Github進行網站部署\" class=\"headerlink\" title=\"使用Netlify＋Github進行網站部署\"></a>使用Netlify＋Github進行網站部署</h2><blockquote>\n<p>Netlify 是一家遠端優先的雲端運算公司，提供一個開發平台，其中包括針對 Web 應用程式和動態網站的建置、部署和無伺服器後端服務。(Wiki)</p>\n</blockquote>\n<ul>\n<li>操作原理<ul>\n<li>將Hexo 部落格相關資料，丟到Github建立一個repo</li>\n<li>使用Netlify來建立無伺服器的後端部署服務，並連結至上述repo</li>\n<li>Netlify將會自動偵測Github repo的更新變動，自動進行部署</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Step-1-將Hexo-Project上傳github進行遠端管理\"><a href=\"#Step-1-將Hexo-Project上傳github進行遠端管理\" class=\"headerlink\" title=\"Step 1: 將Hexo Project上傳github進行遠端管理\"></a>Step 1: 將Hexo Project上傳github進行遠端管理</h3><ul>\n<li>在部落格的根目錄中，初始git服務，並將我的hexo網頁檔案push上github repo</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">&quot;:tada: Init repo&quot;</span></span><br><span class=\"line\">$ git remote add origin git@github.com:&lt;your-github-name&gt;/&lt;hexo-project-name&gt;.git</span><br><span class=\"line\">$ git push -u origin master <span class=\"comment\">#here need PAT to login your github</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h4 id=\"Debug-git-problem-with-‘critical-error-身份驗證失敗’\"><a href=\"#Debug-git-problem-with-‘critical-error-身份驗證失敗’\" class=\"headerlink\" title=\"Debug - git problem with ‘critical error: 身份驗證失敗’\"></a>Debug - git problem with ‘critical error: 身份驗證失敗’</h4></blockquote>\n<blockquote>\n<p>請參考這篇：<a class=\"link\"   href=\"https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed\" >https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>2021-08-13以後，github不再支援直接輸入密碼的方式，來操作git；而是使用**PAT (Personal Access Token)**作為替代。</li>\n<li>長話短說：請至github頁面申請一組PAT，使用PAT來取代密碼即可。</li>\n</ul>\n</blockquote>\n<h3 id=\"Step-2-辦理與部署Netlify\"><a href=\"#Step-2-辦理與部署Netlify\" class=\"headerlink\" title=\"Step 2: 辦理與部署Netlify\"></a>Step 2: 辦理與部署Netlify</h3><blockquote>\n<p>官網：<a class=\"link\"   href=\"https://www.netlify.com/\" >https://www.netlify.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<ul>\n<li>登入官網後，可以直接使用github帳號做登陸</li>\n<li>填寫完相關資訊，請選擇使用github連動您的hexo repo(剛剛上傳的那個)</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/2FD6B68B-6A84-4234-80CE-E0CBD0D7BF82/EBC2E25C-0475-430C-9B7E-184BA3EA2870_2/fe0JMSwyNbBg6wARRtS33ooYrPHvzrNqpdRlD4Vjkogz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>點選剛剛連動的repo，再點選Edit build settings</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/2FD6B68B-6A84-4234-80CE-E0CBD0D7BF82/853FD916-ADE3-4923-89A8-2FE8E386C11D_2/hhux99NeYzpKALvcm9nBGnSoc2NkraodIn9HQsVlfvMz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>修改如下圖所示(其實使用系統預設值即可)</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/20A9448C-164D-42C8-A10A-005B69E0DD0A_2/nIwQiXx6rLUFQZzc27MQenuWSyxQiNn0jyF5Ltyix0kz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>修改後，即可按下部署「Deploy name to Netlify」並等待發出；成功的話，將會出現下面的資訊囉！</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/F0266889-0F9B-424A-8F05-253C80571EE8_2/yLZc0NJzxfOLXY2qnNyBChBAdgUKYJN2D9hIzEc0yCEz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>此時，就可以接著後續的設定，如：客製化網誌ＵＲＬ，或是內嵌入其他插件，這邊不做贅述。</li>\n<li>如此一來，就完成網站的部署囉！</li>\n</ul>\n<hr>\n<h2 id=\"Debug經驗分享：Netlify-部署Hexo-Github-初始化（initializing）-失敗\"><a href=\"#Debug經驗分享：Netlify-部署Hexo-Github-初始化（initializing）-失敗\" class=\"headerlink\" title=\"Debug經驗分享：Netlify 部署Hexo Github 初始化（initializing） 失敗\"></a>Debug經驗分享：Netlify 部署Hexo Github 初始化（initializing） 失敗</h2><ul>\n<li>問題發現：<ul>\n<li>建制初期，進行Hexo部落格更新時，推到Github上，理論上Netlify會自動幫我編譯與部署，但當netlify在進行初始化(initializing)動作，會跳出<strong>Failed</strong>的警告字樣，如下圖：</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/D0688305-FD1E-430A-ABED-133DD3C8E5FF_2/f8M3qyROpcUFeVybxfwylg6Tbpq9pIfbI9qTSO8lSmkz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>分析觀察：<ul>\n<li>觀察第八與第九行，可以發現，問題是出在「.deploy_git」這個檔案。發現這個檔案應該是Netlify在部署時會自動產生出的文件，git submodule 無法追蹤或更新到這份模組，導致錯誤。</li>\n</ul>\n</li>\n<li>解決方法：<ul>\n<li>參考以下連結，先將「.deploy_git」這個檔案給刪掉</li>\n</ul>\n</li>\n</ul>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/lemqs0123/article/details/110429731\" ><i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li><p>刪除指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> --cache <span class=\"string\">&#x27;.deploy_git&#x27;</span>    <span class=\"comment\"># system response: rm &#x27;.deploy_git&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下圖為檢查與刪除的過程圖：</p>\n</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://res.craft.do/user/full/2e84309a-ca7c-d40a-c79f-c06a3542c138/doc/46342A65-FCCC-4ABE-A88C-54FA91036167/92A29C99-9794-49BA-A79D-C64090A53662_2/fTUgJOlycKrHdenqq0b8y7qnYImjkE7WJvSMp2G1ipQz/Image.png\"\n                        alt=\"Image.png\"\n                 ></p>\n<ul>\n<li>並且，記得將部署檔案”.deploy_git”加入到”.gitignore”檔案裡面（若無此檔案，要自己創建），以免再次把”.deploy_git”更新上去。<ul>\n<li>可以使用指令<code>ls -la</code> 看看有沒有這個檔案，若沒有，可以用指令<code>touch .gitignore</code> 來創造，再使用文字編輯器將檔案<code>.gitignore</code> 加上去即可</li>\n</ul>\n</li>\n<li>編輯結束後，再將hexo的repo推上去github，讓netlify自動部署更新，就可以成功囉！</li>\n</ul>\n<hr>\n<h2 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h2><ul>\n<li>將部署工具換成netlify之後，有種如釋負重的感覺，之前繁瑣的部署流程，可以直接推上github後就結束了，他將會幫我自動部署到網路上，輕鬆方便許多！</li>\n<li>遇到Bug時，一時間也覺得不知所措，但真的仔細深入了解其原因後，才發現原來解法這麼單純，但這也是玩資訊工程時的醍醐味吧！</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clybox2pg0007txzk5rqg1pha","category_id":"clybox2pf0004txzk2vgc6dqi","_id":"clybox2pi000ctxzk3out6soh"},{"post_id":"clybox2pb0001txzkbzdlezh7","category_id":"clybox2pf0004txzk2vgc6dqi","_id":"clybox2pi000ftxzkek1yha7a"},{"post_id":"clybox2pe0003txzk6xqo03ni","category_id":"clybox2ph0009txzk0oyueb19","_id":"clybox2pi000htxzk30n7dcsl"},{"post_id":"clybox2pg0006txzkagnt4dwk","category_id":"clybox2pi000dtxzk8zfk9h6b","_id":"clybox2pi000ktxzkech471f4"},{"post_id":"clybox2pj000mtxzkdmqocn6i","category_id":"clybox2pi000dtxzk8zfk9h6b","_id":"clybox2pk000rtxzkbayxautx"},{"post_id":"clybox2pj000ntxzk637whee4","category_id":"clybox2pi000dtxzk8zfk9h6b","_id":"clybox2pl000stxzkfrc3h9qw"},{"post_id":"clybox2pk000ptxzk4ms34lar","category_id":"clybox2pi000dtxzk8zfk9h6b","_id":"clybox2pm000vtxzkhy1hblda"},{"post_id":"clybox2pk000qtxzk1wih08nf","category_id":"clybox2pi000dtxzk8zfk9h6b","_id":"clybox2pm000xtxzka2151jjs"}],"PostTag":[{"post_id":"clybox2pb0001txzkbzdlezh7","tag_id":"clybox2pf0005txzk0uue1cet","_id":"clybox2pi000btxzk7gmp6wrr"},{"post_id":"clybox2pe0003txzk6xqo03ni","tag_id":"clybox2ph000atxzk2fu65r54","_id":"clybox2pi000gtxzkde7xeyti"},{"post_id":"clybox2pg0006txzkagnt4dwk","tag_id":"clybox2pi000etxzkbho7h3cq","_id":"clybox2pi000jtxzkf1uhfsqj"},{"post_id":"clybox2pg0007txzk5rqg1pha","tag_id":"clybox2pi000itxzk0f8955fp","_id":"clybox2pi000ltxzk4hye8bet"},{"post_id":"clybox2pk000qtxzk1wih08nf","tag_id":"clybox2pk000otxzk4bjz3q4y","_id":"clybox2pm000utxzkcl8yhfii"},{"post_id":"clybox2pj000mtxzkdmqocn6i","tag_id":"clybox2pk000otxzk4bjz3q4y","_id":"clybox2pm000wtxzk5y4t815f"},{"post_id":"clybox2pj000ntxzk637whee4","tag_id":"clybox2pk000otxzk4bjz3q4y","_id":"clybox2pm000ztxzkd8mlcx94"},{"post_id":"clybox2pk000ptxzk4ms34lar","tag_id":"clybox2pk000otxzk4bjz3q4y","_id":"clybox2pm0010txzkbsxb0kc4"}],"Tag":[{"name":"git","_id":"clybox2pf0005txzk0uue1cet"},{"name":"arduino","_id":"clybox2ph000atxzk2fu65r54"},{"name":"c++","_id":"clybox2pi000etxzkbho7h3cq"},{"name":"llm/gpt","_id":"clybox2pi000itxzk0f8955fp"},{"name":"hexo","_id":"clybox2pk000otxzk4bjz3q4y"}]}}